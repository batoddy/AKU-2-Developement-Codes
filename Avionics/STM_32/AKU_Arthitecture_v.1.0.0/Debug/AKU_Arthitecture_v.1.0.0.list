
AKU_Arthitecture_v.1.0.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b404  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800b5d8  0800b5d8  0001b5d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b918  0800b918  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b918  0800b918  0001b918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b920  0800b920  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b920  0800b920  0001b920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b924  0800b924  0001b924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800b928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b908  200000a4  0800b9cc  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b9ac  0800b9cc  0002b9ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f672  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a72  00000000  00000000  0003f746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a38  00000000  00000000  000441b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001848  00000000  00000000  00045bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026cd0  00000000  00000000  00047438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021084  00000000  00000000  0006e108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1a41  00000000  00000000  0008f18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00170bcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007910  00000000  00000000  00170c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b5bc 	.word	0x0800b5bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a8 	.word	0x200000a8
 800020c:	0800b5bc 	.word	0x0800b5bc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b974 	b.w	8000f28 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468e      	mov	lr, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14d      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4694      	mov	ip, r2
 8000c6a:	d969      	bls.n	8000d40 <__udivmoddi4+0xe8>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b152      	cbz	r2, 8000c88 <__udivmoddi4+0x30>
 8000c72:	fa01 f302 	lsl.w	r3, r1, r2
 8000c76:	f1c2 0120 	rsb	r1, r2, #32
 8000c7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c82:	ea41 0e03 	orr.w	lr, r1, r3
 8000c86:	4094      	lsls	r4, r2
 8000c88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c8c:	0c21      	lsrs	r1, r4, #16
 8000c8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c92:	fa1f f78c 	uxth.w	r7, ip
 8000c96:	fb08 e316 	mls	r3, r8, r6, lr
 8000c9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c9e:	fb06 f107 	mul.w	r1, r6, r7
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cae:	f080 811f 	bcs.w	8000ef0 <__udivmoddi4+0x298>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 811c 	bls.w	8000ef0 <__udivmoddi4+0x298>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 f707 	mul.w	r7, r0, r7
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x92>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cdc:	f080 810a 	bcs.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	f240 8107 	bls.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cee:	1be4      	subs	r4, r4, r7
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa4>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0xc2>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	f000 80ef 	beq.w	8000eea <__udivmoddi4+0x292>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d12:	4630      	mov	r0, r6
 8000d14:	4631      	mov	r1, r6
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f683 	clz	r6, r3
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x160>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd4>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80f9 	bhi.w	8000f1e <__udivmoddi4+0x2c6>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	469e      	mov	lr, r3
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0e0      	beq.n	8000cfc <__udivmoddi4+0xa4>
 8000d3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d3e:	e7dd      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xec>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 8092 	bne.w	8000e72 <__udivmoddi4+0x21a>
 8000d4e:	eba1 010c 	sub.w	r1, r1, ip
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	2601      	movs	r6, #1
 8000d5c:	0c20      	lsrs	r0, r4, #16
 8000d5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d62:	fb07 1113 	mls	r1, r7, r3, r1
 8000d66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6a:	fb0e f003 	mul.w	r0, lr, r3
 8000d6e:	4288      	cmp	r0, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x12c>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x12a>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f200 80cb 	bhi.w	8000f18 <__udivmoddi4+0x2c0>
 8000d82:	4643      	mov	r3, r8
 8000d84:	1a09      	subs	r1, r1, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d94:	fb0e fe00 	mul.w	lr, lr, r0
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x156>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x154>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f200 80bb 	bhi.w	8000f22 <__udivmoddi4+0x2ca>
 8000dac:	4608      	mov	r0, r1
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000db6:	e79c      	b.n	8000cf2 <__udivmoddi4+0x9a>
 8000db8:	f1c6 0720 	rsb	r7, r6, #32
 8000dbc:	40b3      	lsls	r3, r6
 8000dbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dc6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dca:	fa01 f306 	lsl.w	r3, r1, r6
 8000dce:	431c      	orrs	r4, r3
 8000dd0:	40f9      	lsrs	r1, r7
 8000dd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dd6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dde:	0c20      	lsrs	r0, r4, #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fb09 1118 	mls	r1, r9, r8, r1
 8000de8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dec:	fb08 f00e 	mul.w	r0, r8, lr
 8000df0:	4288      	cmp	r0, r1
 8000df2:	fa02 f206 	lsl.w	r2, r2, r6
 8000df6:	d90b      	bls.n	8000e10 <__udivmoddi4+0x1b8>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e00:	f080 8088 	bcs.w	8000f14 <__udivmoddi4+0x2bc>
 8000e04:	4288      	cmp	r0, r1
 8000e06:	f240 8085 	bls.w	8000f14 <__udivmoddi4+0x2bc>
 8000e0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e18:	fb09 1110 	mls	r1, r9, r0, r1
 8000e1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e24:	458e      	cmp	lr, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x1e2>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e30:	d26c      	bcs.n	8000f0c <__udivmoddi4+0x2b4>
 8000e32:	458e      	cmp	lr, r1
 8000e34:	d96a      	bls.n	8000f0c <__udivmoddi4+0x2b4>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e42:	eba1 010e 	sub.w	r1, r1, lr
 8000e46:	42a1      	cmp	r1, r4
 8000e48:	46c8      	mov	r8, r9
 8000e4a:	46a6      	mov	lr, r4
 8000e4c:	d356      	bcc.n	8000efc <__udivmoddi4+0x2a4>
 8000e4e:	d053      	beq.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e50:	b15d      	cbz	r5, 8000e6a <__udivmoddi4+0x212>
 8000e52:	ebb3 0208 	subs.w	r2, r3, r8
 8000e56:	eb61 010e 	sbc.w	r1, r1, lr
 8000e5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e62:	40f1      	lsrs	r1, r6
 8000e64:	431f      	orrs	r7, r3
 8000e66:	e9c5 7100 	strd	r7, r1, [r5]
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	f1c2 0320 	rsb	r3, r2, #32
 8000e76:	40d8      	lsrs	r0, r3
 8000e78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e80:	4091      	lsls	r1, r2
 8000e82:	4301      	orrs	r1, r0
 8000e84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e88:	fa1f fe8c 	uxth.w	lr, ip
 8000e8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e90:	fb07 3610 	mls	r6, r7, r0, r3
 8000e94:	0c0b      	lsrs	r3, r1, #16
 8000e96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x260>
 8000ea6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eaa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eae:	d22f      	bcs.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb0:	429e      	cmp	r6, r3
 8000eb2:	d92d      	bls.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	b289      	uxth	r1, r1
 8000ebc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x28a>
 8000ed0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ed8:	d216      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d914      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000ede:	3e02      	subs	r6, #2
 8000ee0:	4461      	add	r1, ip
 8000ee2:	1ac9      	subs	r1, r1, r3
 8000ee4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee8:	e738      	b.n	8000d5c <__udivmoddi4+0x104>
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e705      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e3      	b.n	8000cbc <__udivmoddi4+0x64>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6f8      	b.n	8000cea <__udivmoddi4+0x92>
 8000ef8:	454b      	cmp	r3, r9
 8000efa:	d2a9      	bcs.n	8000e50 <__udivmoddi4+0x1f8>
 8000efc:	ebb9 0802 	subs.w	r8, r9, r2
 8000f00:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7a3      	b.n	8000e50 <__udivmoddi4+0x1f8>
 8000f08:	4646      	mov	r6, r8
 8000f0a:	e7ea      	b.n	8000ee2 <__udivmoddi4+0x28a>
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	e794      	b.n	8000e3a <__udivmoddi4+0x1e2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	e7d1      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000f14:	46d0      	mov	r8, sl
 8000f16:	e77b      	b.n	8000e10 <__udivmoddi4+0x1b8>
 8000f18:	3b02      	subs	r3, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	e732      	b.n	8000d84 <__udivmoddi4+0x12c>
 8000f1e:	4630      	mov	r0, r6
 8000f20:	e709      	b.n	8000d36 <__udivmoddi4+0xde>
 8000f22:	4464      	add	r4, ip
 8000f24:	3802      	subs	r0, #2
 8000f26:	e742      	b.n	8000dae <__udivmoddi4+0x156>

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <config_barometer>:
//--------------------------------------------------------------
//--------------------------------------------------------------
// -------------------- USER CODE 1 BEGIN ---------------------

void config_barometer()
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	ms5611_config(ms5611.i2c, ms5611.addr, ms5611.osr, &aku_delay);
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <config_barometer+0x24>)
 8000f32:	6818      	ldr	r0, [r3, #0]
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <config_barometer+0x24>)
 8000f36:	7919      	ldrb	r1, [r3, #4]
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <config_barometer+0x24>)
 8000f3a:	7b9a      	ldrb	r2, [r3, #14]
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <config_barometer+0x28>)
 8000f3e:	f001 ff53 	bl	8002de8 <ms5611_config>
	ms5611_init();
 8000f42:	f001 ffe9 	bl	8002f18 <ms5611_init>
	aku_delay(100);
 8000f46:	2064      	movs	r0, #100	; 0x64
 8000f48:	f000 fdbc 	bl	8001ac4 <aku_delay>
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000000 	.word	0x20000000
 8000f54:	08001ac5 	.word	0x08001ac5

08000f58 <read_barometer_data>:

void read_barometer_data(float *temp, float *press, float *alt)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
	ms5611_getTemperatureAndPressure(temp, press, alt);
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	68b9      	ldr	r1, [r7, #8]
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f002 fad3 	bl	8003514 <ms5611_getTemperatureAndPressure>
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <get_base_pressure>:
// --------------------- USER CODE 1 END ---------------------
//--------------------------------------------------------------
//--------------------------------------------------------------

void get_base_pressure()
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
	float alt, press, temp;

	for (int i = 0; i < ms5611.base_press_caliber_val; i++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	e016      	b.n	8000fb2 <get_base_pressure+0x3a>
	{
		read_barometer_data(&temp, &press, &alt);
 8000f84:	f107 0208 	add.w	r2, r7, #8
 8000f88:	1d39      	adds	r1, r7, #4
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ffe3 	bl	8000f58 <read_barometer_data>
		altitude.base_pressure += press;
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <get_base_pressure+0x6c>)
 8000f94:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f98:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fa0:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <get_base_pressure+0x6c>)
 8000fa2:	edc3 7a01 	vstr	s15, [r3, #4]
		aku_delay(2);
 8000fa6:	2002      	movs	r0, #2
 8000fa8:	f000 fd8c 	bl	8001ac4 <aku_delay>
	for (int i = 0; i < ms5611.base_press_caliber_val; i++)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <get_base_pressure+0x70>)
 8000fb4:	895b      	ldrh	r3, [r3, #10]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	dbe2      	blt.n	8000f84 <get_base_pressure+0xc>
	}
	altitude.base_pressure /= ms5611.base_press_caliber_val;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <get_base_pressure+0x6c>)
 8000fc0:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <get_base_pressure+0x70>)
 8000fc6:	895b      	ldrh	r3, [r3, #10]
 8000fc8:	ee07 3a90 	vmov	s15, r3
 8000fcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <get_base_pressure+0x6c>)
 8000fd6:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200000c0 	.word	0x200000c0
 8000fe8:	20000000 	.word	0x20000000

08000fec <empty_barometer_registers>:

void empty_barometer_registers()
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
	float alt, press, temp;
	uint16_t ctr ;
	for (ctr = 0; ctr < ms5611.empty_reg_val; ctr++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	81fb      	strh	r3, [r7, #14]
 8000ff6:	e00c      	b.n	8001012 <empty_barometer_registers+0x26>

	{
		read_barometer_data(&temp, &press, &alt);
 8000ff8:	f107 0208 	add.w	r2, r7, #8
 8000ffc:	1d39      	adds	r1, r7, #4
 8000ffe:	463b      	mov	r3, r7
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ffa9 	bl	8000f58 <read_barometer_data>
		aku_delay(2);
 8001006:	2002      	movs	r0, #2
 8001008:	f000 fd5c 	bl	8001ac4 <aku_delay>
	for (ctr = 0; ctr < ms5611.empty_reg_val; ctr++)
 800100c:	89fb      	ldrh	r3, [r7, #14]
 800100e:	3301      	adds	r3, #1
 8001010:	81fb      	strh	r3, [r7, #14]
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <empty_barometer_registers+0x3c>)
 8001014:	891b      	ldrh	r3, [r3, #8]
 8001016:	89fa      	ldrh	r2, [r7, #14]
 8001018:	429a      	cmp	r2, r3
 800101a:	d3ed      	bcc.n	8000ff8 <empty_barometer_registers+0xc>
	}
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000000 	.word	0x20000000

0800102c <init_Barometer>:

void init_Barometer()
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	config_barometer();
 8001030:	f7ff ff7c 	bl	8000f2c <config_barometer>
	empty_barometer_registers();
 8001034:	f7ff ffda 	bl	8000fec <empty_barometer_registers>
	get_base_pressure();
 8001038:	f7ff ff9e 	bl	8000f78 <get_base_pressure>
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <calculateAltitude>:

float calculateAltitude(float p, float pi)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	ed87 0a01 	vstr	s0, [r7, #4]
 800104a:	edc7 0a00 	vstr	s1, [r7]
	p = p / 100;
 800104e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001052:	eddf 6a25 	vldr	s13, [pc, #148]	; 80010e8 <calculateAltitude+0xa8>
 8001056:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800105a:	edc7 7a01 	vstr	s15, [r7, #4]
	pi = pi / 100;
 800105e:	ed97 7a00 	vldr	s14, [r7]
 8001062:	eddf 6a21 	vldr	s13, [pc, #132]	; 80010e8 <calculateAltitude+0xa8>
 8001066:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106a:	edc7 7a00 	vstr	s15, [r7]
	float alt = (44330 * (1.0 - pow(p / pi, 0.1903)));
 800106e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001072:	edd7 7a00 	vldr	s15, [r7]
 8001076:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800107a:	ee16 0a90 	vmov	r0, s13
 800107e:	f7ff fa7b 	bl	8000578 <__aeabi_f2d>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80010d8 <calculateAltitude+0x98>
 800108a:	ec43 2b10 	vmov	d0, r2, r3
 800108e:	f009 fb4f 	bl	800a730 <pow>
 8001092:	ec53 2b10 	vmov	r2, r3, d0
 8001096:	f04f 0000 	mov.w	r0, #0
 800109a:	4914      	ldr	r1, [pc, #80]	; (80010ec <calculateAltitude+0xac>)
 800109c:	f7ff f90c 	bl	80002b8 <__aeabi_dsub>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	a30d      	add	r3, pc, #52	; (adr r3, 80010e0 <calculateAltitude+0xa0>)
 80010aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ae:	f7ff fabb 	bl	8000628 <__aeabi_dmul>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4610      	mov	r0, r2
 80010b8:	4619      	mov	r1, r3
 80010ba:	f7ff fd65 	bl	8000b88 <__aeabi_d2f>
 80010be:	4603      	mov	r3, r0
 80010c0:	60fb      	str	r3, [r7, #12]
	return alt;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	ee07 3a90 	vmov	s15, r3
}
 80010c8:	eeb0 0a67 	vmov.f32	s0, s15
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	f3af 8000 	nop.w
 80010d8:	1a36e2eb 	.word	0x1a36e2eb
 80010dc:	3fc85bc0 	.word	0x3fc85bc0
 80010e0:	00000000 	.word	0x00000000
 80010e4:	40e5a540 	.word	0x40e5a540
 80010e8:	42c80000 	.word	0x42c80000
 80010ec:	3ff00000 	.word	0x3ff00000

080010f0 <read_Barometer>:

Altitude *read_Barometer()
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
	float temp_altitude;
	altitude.dataflow_rate = aku_chronometer(&altitude.tick);
 80010f6:	481e      	ldr	r0, [pc, #120]	; (8001170 <read_Barometer+0x80>)
 80010f8:	f000 fcef 	bl	8001ada <aku_chronometer>
 80010fc:	4603      	mov	r3, r0
 80010fe:	461a      	mov	r2, r3
 8001100:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <read_Barometer+0x84>)
 8001102:	61da      	str	r2, [r3, #28]
	read_barometer_data(&altitude.temperature, &altitude.pressure, &temp_altitude);
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	461a      	mov	r2, r3
 8001108:	491a      	ldr	r1, [pc, #104]	; (8001174 <read_Barometer+0x84>)
 800110a:	481b      	ldr	r0, [pc, #108]	; (8001178 <read_Barometer+0x88>)
 800110c:	f7ff ff24 	bl	8000f58 <read_barometer_data>
	altitude.altitude = calculateAltitude(altitude.pressure, altitude.base_pressure);
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <read_Barometer+0x84>)
 8001112:	edd3 7a00 	vldr	s15, [r3]
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <read_Barometer+0x84>)
 8001118:	ed93 7a01 	vldr	s14, [r3, #4]
 800111c:	eef0 0a47 	vmov.f32	s1, s14
 8001120:	eeb0 0a67 	vmov.f32	s0, s15
 8001124:	f7ff ff8c 	bl	8001040 <calculateAltitude>
 8001128:	eef0 7a40 	vmov.f32	s15, s0
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <read_Barometer+0x84>)
 800112e:	edc3 7a03 	vstr	s15, [r3, #12]

	if (altitude.max_altitude < altitude.altitude)
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <read_Barometer+0x84>)
 8001134:	ed93 7a04 	vldr	s14, [r3, #16]
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <read_Barometer+0x84>)
 800113a:	edd3 7a03 	vldr	s15, [r3, #12]
 800113e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001146:	d50e      	bpl.n	8001166 <read_Barometer+0x76>
	{
		altitude.max_altitude = altitude.altitude;
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <read_Barometer+0x84>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	4a09      	ldr	r2, [pc, #36]	; (8001174 <read_Barometer+0x84>)
 800114e:	6113      	str	r3, [r2, #16]
		altitude.diff_to_max = altitude.max_altitude - altitude.altitude;
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <read_Barometer+0x84>)
 8001152:	ed93 7a04 	vldr	s14, [r3, #16]
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <read_Barometer+0x84>)
 8001158:	edd3 7a03 	vldr	s15, [r3, #12]
 800115c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <read_Barometer+0x84>)
 8001162:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	return (&altitude);
 8001166:	4b03      	ldr	r3, [pc, #12]	; (8001174 <read_Barometer+0x84>)
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200000d8 	.word	0x200000d8
 8001174:	200000c0 	.word	0x200000c0
 8001178:	200000c8 	.word	0x200000c8

0800117c <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <bno055_assignI2C+0x1c>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6013      	str	r3, [r2, #0]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	200000e0 	.word	0x200000e0

0800119c <bno055_delay>:

void bno055_delay(int time) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 fab0 	bl	800370c <HAL_Delay>
#endif
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	4603      	mov	r3, r0
 80011bc:	460a      	mov	r2, r1
 80011be:	71fb      	strb	r3, [r7, #7]
 80011c0:	4613      	mov	r3, r2
 80011c2:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	733b      	strb	r3, [r7, #12]
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, txdata, sizeof(txdata), 10);
 80011cc:	4b5a      	ldr	r3, [pc, #360]	; (8001338 <bno055_writeData+0x184>)
 80011ce:	6818      	ldr	r0, [r3, #0]
 80011d0:	f107 020c 	add.w	r2, r7, #12
 80011d4:	230a      	movs	r3, #10
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2302      	movs	r3, #2
 80011da:	2150      	movs	r1, #80	; 0x50
 80011dc:	f002 ff20 	bl	8004020 <HAL_I2C_Master_Transmit>
 80011e0:	4603      	mov	r3, r0
 80011e2:	75fb      	strb	r3, [r7, #23]
  if (status == HAL_OK) {
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 80a0 	beq.w	800132c <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80011ec:	7dfb      	ldrb	r3, [r7, #23]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d103      	bne.n	80011fa <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80011f2:	4852      	ldr	r0, [pc, #328]	; (800133c <bno055_writeData+0x188>)
 80011f4:	f008 fc40 	bl	8009a78 <puts>
 80011f8:	e012      	b.n	8001220 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 80011fa:	7dfb      	ldrb	r3, [r7, #23]
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d103      	bne.n	8001208 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001200:	484f      	ldr	r0, [pc, #316]	; (8001340 <bno055_writeData+0x18c>)
 8001202:	f008 fc39 	bl	8009a78 <puts>
 8001206:	e00b      	b.n	8001220 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001208:	7dfb      	ldrb	r3, [r7, #23]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d103      	bne.n	8001216 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800120e:	484d      	ldr	r0, [pc, #308]	; (8001344 <bno055_writeData+0x190>)
 8001210:	f008 fc32 	bl	8009a78 <puts>
 8001214:	e004      	b.n	8001220 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001216:	7dfb      	ldrb	r3, [r7, #23]
 8001218:	4619      	mov	r1, r3
 800121a:	484b      	ldr	r0, [pc, #300]	; (8001348 <bno055_writeData+0x194>)
 800121c:	f008 fba6 	bl	800996c <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001220:	4b45      	ldr	r3, [pc, #276]	; (8001338 <bno055_writeData+0x184>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f003 fd4d 	bl	8004cc4 <HAL_I2C_GetError>
 800122a:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d07e      	beq.n	8001330 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d103      	bne.n	8001240 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001238:	4844      	ldr	r0, [pc, #272]	; (800134c <bno055_writeData+0x198>)
 800123a:	f008 fc1d 	bl	8009a78 <puts>
 800123e:	e021      	b.n	8001284 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	2b02      	cmp	r3, #2
 8001244:	d103      	bne.n	800124e <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001246:	4842      	ldr	r0, [pc, #264]	; (8001350 <bno055_writeData+0x19c>)
 8001248:	f008 fc16 	bl	8009a78 <puts>
 800124c:	e01a      	b.n	8001284 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	2b04      	cmp	r3, #4
 8001252:	d103      	bne.n	800125c <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001254:	483f      	ldr	r0, [pc, #252]	; (8001354 <bno055_writeData+0x1a0>)
 8001256:	f008 fc0f 	bl	8009a78 <puts>
 800125a:	e013      	b.n	8001284 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	2b08      	cmp	r3, #8
 8001260:	d103      	bne.n	800126a <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001262:	483d      	ldr	r0, [pc, #244]	; (8001358 <bno055_writeData+0x1a4>)
 8001264:	f008 fc08 	bl	8009a78 <puts>
 8001268:	e00c      	b.n	8001284 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	2b10      	cmp	r3, #16
 800126e:	d103      	bne.n	8001278 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001270:	483a      	ldr	r0, [pc, #232]	; (800135c <bno055_writeData+0x1a8>)
 8001272:	f008 fc01 	bl	8009a78 <puts>
 8001276:	e005      	b.n	8001284 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	2b20      	cmp	r3, #32
 800127c:	d102      	bne.n	8001284 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800127e:	4838      	ldr	r0, [pc, #224]	; (8001360 <bno055_writeData+0x1ac>)
 8001280:	f008 fbfa 	bl	8009a78 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001284:	4b2c      	ldr	r3, [pc, #176]	; (8001338 <bno055_writeData+0x184>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f003 fd0d 	bl	8004ca8 <HAL_I2C_GetState>
 800128e:	4603      	mov	r3, r0
 8001290:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d103      	bne.n	80012a0 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001298:	4832      	ldr	r0, [pc, #200]	; (8001364 <bno055_writeData+0x1b0>)
 800129a:	f008 fbed 	bl	8009a78 <puts>
 800129e:	e048      	b.n	8001332 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	2b20      	cmp	r3, #32
 80012a4:	d103      	bne.n	80012ae <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80012a6:	482f      	ldr	r0, [pc, #188]	; (8001364 <bno055_writeData+0x1b0>)
 80012a8:	f008 fbe6 	bl	8009a78 <puts>
 80012ac:	e041      	b.n	8001332 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	2b24      	cmp	r3, #36	; 0x24
 80012b2:	d103      	bne.n	80012bc <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80012b4:	482c      	ldr	r0, [pc, #176]	; (8001368 <bno055_writeData+0x1b4>)
 80012b6:	f008 fbdf 	bl	8009a78 <puts>
 80012ba:	e03a      	b.n	8001332 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	2b21      	cmp	r3, #33	; 0x21
 80012c0:	d103      	bne.n	80012ca <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80012c2:	482a      	ldr	r0, [pc, #168]	; (800136c <bno055_writeData+0x1b8>)
 80012c4:	f008 fbd8 	bl	8009a78 <puts>
 80012c8:	e033      	b.n	8001332 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	2b22      	cmp	r3, #34	; 0x22
 80012ce:	d103      	bne.n	80012d8 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80012d0:	4827      	ldr	r0, [pc, #156]	; (8001370 <bno055_writeData+0x1bc>)
 80012d2:	f008 fbd1 	bl	8009a78 <puts>
 80012d6:	e02c      	b.n	8001332 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	2b28      	cmp	r3, #40	; 0x28
 80012dc:	d103      	bne.n	80012e6 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80012de:	4825      	ldr	r0, [pc, #148]	; (8001374 <bno055_writeData+0x1c0>)
 80012e0:	f008 fbca 	bl	8009a78 <puts>
 80012e4:	e025      	b.n	8001332 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	2b29      	cmp	r3, #41	; 0x29
 80012ea:	d103      	bne.n	80012f4 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80012ec:	4822      	ldr	r0, [pc, #136]	; (8001378 <bno055_writeData+0x1c4>)
 80012ee:	f008 fbc3 	bl	8009a78 <puts>
 80012f2:	e01e      	b.n	8001332 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	2b2a      	cmp	r3, #42	; 0x2a
 80012f8:	d103      	bne.n	8001302 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80012fa:	4820      	ldr	r0, [pc, #128]	; (800137c <bno055_writeData+0x1c8>)
 80012fc:	f008 fbbc 	bl	8009a78 <puts>
 8001300:	e017      	b.n	8001332 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	2b60      	cmp	r3, #96	; 0x60
 8001306:	d103      	bne.n	8001310 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001308:	481d      	ldr	r0, [pc, #116]	; (8001380 <bno055_writeData+0x1cc>)
 800130a:	f008 fbb5 	bl	8009a78 <puts>
 800130e:	e010      	b.n	8001332 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2ba0      	cmp	r3, #160	; 0xa0
 8001314:	d103      	bne.n	800131e <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001316:	481b      	ldr	r0, [pc, #108]	; (8001384 <bno055_writeData+0x1d0>)
 8001318:	f008 fbae 	bl	8009a78 <puts>
 800131c:	e009      	b.n	8001332 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	2be0      	cmp	r3, #224	; 0xe0
 8001322:	d106      	bne.n	8001332 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001324:	4818      	ldr	r0, [pc, #96]	; (8001388 <bno055_writeData+0x1d4>)
 8001326:	f008 fba7 	bl	8009a78 <puts>
 800132a:	e002      	b.n	8001332 <bno055_writeData+0x17e>
    return;
 800132c:	bf00      	nop
 800132e:	e000      	b.n	8001332 <bno055_writeData+0x17e>
    return;
 8001330:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200000e0 	.word	0x200000e0
 800133c:	0800b5d8 	.word	0x0800b5d8
 8001340:	0800b5fc 	.word	0x0800b5fc
 8001344:	0800b624 	.word	0x0800b624
 8001348:	0800b648 	.word	0x0800b648
 800134c:	0800b660 	.word	0x0800b660
 8001350:	0800b674 	.word	0x0800b674
 8001354:	0800b688 	.word	0x0800b688
 8001358:	0800b69c 	.word	0x0800b69c
 800135c:	0800b6b0 	.word	0x0800b6b0
 8001360:	0800b6c4 	.word	0x0800b6c4
 8001364:	0800b6dc 	.word	0x0800b6dc
 8001368:	0800b6f4 	.word	0x0800b6f4
 800136c:	0800b708 	.word	0x0800b708
 8001370:	0800b720 	.word	0x0800b720
 8001374:	0800b738 	.word	0x0800b738
 8001378:	0800b750 	.word	0x0800b750
 800137c:	0800b770 	.word	0x0800b770
 8001380:	0800b790 	.word	0x0800b790
 8001384:	0800b7a8 	.word	0x0800b7a8
 8001388:	0800b7c0 	.word	0x0800b7c0

0800138c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af02      	add	r7, sp, #8
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]
 8001398:	4613      	mov	r3, r2
 800139a:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <bno055_readData+0x40>)
 800139e:	6818      	ldr	r0, [r3, #0]
 80013a0:	1dfa      	adds	r2, r7, #7
 80013a2:	2364      	movs	r3, #100	; 0x64
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2301      	movs	r3, #1
 80013a8:	2150      	movs	r1, #80	; 0x50
 80013aa:	f002 fe39 	bl	8004020 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <bno055_readData+0x40>)
 80013b0:	6818      	ldr	r0, [r3, #0]
 80013b2:	79bb      	ldrb	r3, [r7, #6]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	2264      	movs	r2, #100	; 0x64
 80013b8:	9200      	str	r2, [sp, #0]
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	2150      	movs	r1, #80	; 0x50
 80013be:	f002 ff2d 	bl	800421c <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200000e0 	.word	0x200000e0

080013d0 <config_IMU>:
							100);
	HAL_I2C_Master_Receive(bno055.i2c, bno055.addr << 1, data, len,
						   100);
}
void config_IMU() // write imu configuration func.
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	// imu.data_flow_flag = check_imu_connection();
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013da:	4807      	ldr	r0, [pc, #28]	; (80013f8 <config_IMU+0x28>)
 80013dc:	f002 fcc2 	bl	8003d64 <HAL_GPIO_WritePin>
	bno055_assignI2C(bno055.i2c);
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <config_IMU+0x2c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fec9 	bl	800117c <bno055_assignI2C>
	bno055_reset();
 80013ea:	f000 fbba 	bl	8001b62 <bno055_reset>
	bno055_setOperationModeNDOF();
 80013ee:	f000 fbb1 	bl	8001b54 <bno055_setOperationModeNDOF>
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40020000 	.word	0x40020000
 80013fc:	20000010 	.word	0x20000010

08001400 <read_imu_data>:

void read_imu_data(IMU *imu_data) // write read data from imu func.
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b0aa      	sub	sp, #168	; 0xa8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

	bno055_vector_t accel = bno055_getVectorAccelerometer();
 8001408:	f000 fcfc 	bl	8001e04 <bno055_getVectorAccelerometer>
 800140c:	eeb0 4a40 	vmov.f32	s8, s0
 8001410:	eef0 4a60 	vmov.f32	s9, s1
 8001414:	eeb0 5a41 	vmov.f32	s10, s2
 8001418:	eef0 5a61 	vmov.f32	s11, s3
 800141c:	eeb0 6a42 	vmov.f32	s12, s4
 8001420:	eef0 6a62 	vmov.f32	s13, s5
 8001424:	eeb0 7a43 	vmov.f32	s14, s6
 8001428:	eef0 7a63 	vmov.f32	s15, s7
 800142c:	ed87 4b22 	vstr	d4, [r7, #136]	; 0x88
 8001430:	ed87 5b24 	vstr	d5, [r7, #144]	; 0x90
 8001434:	ed87 6b26 	vstr	d6, [r7, #152]	; 0x98
 8001438:	ed87 7b28 	vstr	d7, [r7, #160]	; 0xa0
	bno055_vector_t gyro = bno055_getVectorGyroscope();
 800143c:	f000 fd68 	bl	8001f10 <bno055_getVectorGyroscope>
 8001440:	eeb0 4a40 	vmov.f32	s8, s0
 8001444:	eef0 4a60 	vmov.f32	s9, s1
 8001448:	eeb0 5a41 	vmov.f32	s10, s2
 800144c:	eef0 5a61 	vmov.f32	s11, s3
 8001450:	eeb0 6a42 	vmov.f32	s12, s4
 8001454:	eef0 6a62 	vmov.f32	s13, s5
 8001458:	eeb0 7a43 	vmov.f32	s14, s6
 800145c:	eef0 7a63 	vmov.f32	s15, s7
 8001460:	ed87 4b1a 	vstr	d4, [r7, #104]	; 0x68
 8001464:	ed87 5b1c 	vstr	d5, [r7, #112]	; 0x70
 8001468:	ed87 6b1e 	vstr	d6, [r7, #120]	; 0x78
 800146c:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
	bno055_vector_t euler = bno055_getVectorEuler();
 8001470:	f000 fd91 	bl	8001f96 <bno055_getVectorEuler>
 8001474:	eeb0 4a40 	vmov.f32	s8, s0
 8001478:	eef0 4a60 	vmov.f32	s9, s1
 800147c:	eeb0 5a41 	vmov.f32	s10, s2
 8001480:	eef0 5a61 	vmov.f32	s11, s3
 8001484:	eeb0 6a42 	vmov.f32	s12, s4
 8001488:	eef0 6a62 	vmov.f32	s13, s5
 800148c:	eeb0 7a43 	vmov.f32	s14, s6
 8001490:	eef0 7a63 	vmov.f32	s15, s7
 8001494:	ed87 4b12 	vstr	d4, [r7, #72]	; 0x48
 8001498:	ed87 5b14 	vstr	d5, [r7, #80]	; 0x50
 800149c:	ed87 6b16 	vstr	d6, [r7, #88]	; 0x58
 80014a0:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
	bno055_vector_t magno = bno055_getVectorMagnetometer();
 80014a4:	f000 fcf1 	bl	8001e8a <bno055_getVectorMagnetometer>
 80014a8:	eeb0 4a40 	vmov.f32	s8, s0
 80014ac:	eef0 4a60 	vmov.f32	s9, s1
 80014b0:	eeb0 5a41 	vmov.f32	s10, s2
 80014b4:	eef0 5a61 	vmov.f32	s11, s3
 80014b8:	eeb0 6a42 	vmov.f32	s12, s4
 80014bc:	eef0 6a62 	vmov.f32	s13, s5
 80014c0:	eeb0 7a43 	vmov.f32	s14, s6
 80014c4:	eef0 7a63 	vmov.f32	s15, s7
 80014c8:	ed87 4b0a 	vstr	d4, [r7, #40]	; 0x28
 80014cc:	ed87 5b0c 	vstr	d5, [r7, #48]	; 0x30
 80014d0:	ed87 6b0e 	vstr	d6, [r7, #56]	; 0x38
 80014d4:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	bno055_vector_t lineer_accel = bno055_getVectorLinearAccel();
 80014d8:	f000 fda0 	bl	800201c <bno055_getVectorLinearAccel>
 80014dc:	eeb0 4a40 	vmov.f32	s8, s0
 80014e0:	eef0 4a60 	vmov.f32	s9, s1
 80014e4:	eeb0 5a41 	vmov.f32	s10, s2
 80014e8:	eef0 5a61 	vmov.f32	s11, s3
 80014ec:	eeb0 6a42 	vmov.f32	s12, s4
 80014f0:	eef0 6a62 	vmov.f32	s13, s5
 80014f4:	eeb0 7a43 	vmov.f32	s14, s6
 80014f8:	eef0 7a63 	vmov.f32	s15, s7
 80014fc:	ed87 4b02 	vstr	d4, [r7, #8]
 8001500:	ed87 5b04 	vstr	d5, [r7, #16]
 8001504:	ed87 6b06 	vstr	d6, [r7, #24]
 8001508:	ed87 7b08 	vstr	d7, [r7, #32]

	imu_data->accel.x = accel.x;
 800150c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fb38 	bl	8000b88 <__aeabi_d2f>
 8001518:	4602      	mov	r2, r0
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	601a      	str	r2, [r3, #0]
	imu_data->accel.y = accel.y;
 800151e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fb2f 	bl	8000b88 <__aeabi_d2f>
 800152a:	4602      	mov	r2, r0
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	605a      	str	r2, [r3, #4]
	imu_data->accel.z = accel.z;
 8001530:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff fb26 	bl	8000b88 <__aeabi_d2f>
 800153c:	4602      	mov	r2, r0
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	609a      	str	r2, [r3, #8]

	imu_data->gyro.x = gyro.x;
 8001542:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	f7ff fb1d 	bl	8000b88 <__aeabi_d2f>
 800154e:	4602      	mov	r2, r0
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	611a      	str	r2, [r3, #16]
	imu_data->gyro.y = gyro.y;
 8001554:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001558:	4610      	mov	r0, r2
 800155a:	4619      	mov	r1, r3
 800155c:	f7ff fb14 	bl	8000b88 <__aeabi_d2f>
 8001560:	4602      	mov	r2, r0
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	615a      	str	r2, [r3, #20]
	imu_data->gyro.z = gyro.z;
 8001566:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fb0b 	bl	8000b88 <__aeabi_d2f>
 8001572:	4602      	mov	r2, r0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	619a      	str	r2, [r3, #24]

	imu_data->magno.x = magno.x;
 8001578:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff fb02 	bl	8000b88 <__aeabi_d2f>
 8001584:	4602      	mov	r2, r0
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	621a      	str	r2, [r3, #32]
	imu_data->magno.y = magno.y;
 800158a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	f7ff faf9 	bl	8000b88 <__aeabi_d2f>
 8001596:	4602      	mov	r2, r0
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	625a      	str	r2, [r3, #36]	; 0x24
	imu_data->magno.z = magno.z;
 800159c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	f7ff faf0 	bl	8000b88 <__aeabi_d2f>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	629a      	str	r2, [r3, #40]	; 0x28

	imu_data->euler.yaw = euler.x;
 80015ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f7ff fae7 	bl	8000b88 <__aeabi_d2f>
 80015ba:	4602      	mov	r2, r0
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	631a      	str	r2, [r3, #48]	; 0x30
	imu_data->euler.pitch = euler.y;
 80015c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	f7ff fade 	bl	8000b88 <__aeabi_d2f>
 80015cc:	4602      	mov	r2, r0
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	639a      	str	r2, [r3, #56]	; 0x38
	imu_data->euler.roll = euler.z;
 80015d2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f7ff fad5 	bl	8000b88 <__aeabi_d2f>
 80015de:	4602      	mov	r2, r0
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	635a      	str	r2, [r3, #52]	; 0x34

	imu_data->lineer_accel.x = lineer_accel.x;
 80015e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	f7ff facc 	bl	8000b88 <__aeabi_d2f>
 80015f0:	4602      	mov	r2, r0
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	63da      	str	r2, [r3, #60]	; 0x3c
	imu_data->lineer_accel.y = lineer_accel.y;
 80015f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	f7ff fac3 	bl	8000b88 <__aeabi_d2f>
 8001602:	4602      	mov	r2, r0
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	641a      	str	r2, [r3, #64]	; 0x40
	imu_data->lineer_accel.z = lineer_accel.z;
 8001608:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f7ff faba 	bl	8000b88 <__aeabi_d2f>
 8001614:	4602      	mov	r2, r0
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	645a      	str	r2, [r3, #68]	; 0x44
	// ERROR CODES can be returned --dev note
}
 800161a:	bf00      	nop
 800161c:	37a8      	adds	r7, #168	; 0xa8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <init_IMU>:
//--------------------------------------------------------------
//--------------------------------------------------------------
//--------------------------------------------------------------
//--------------------------------------------------------------
void init_IMU()
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	// IMU initialize code:----------
	config_IMU();
 8001628:	f7ff fed2 	bl	80013d0 <config_IMU>
	// empty_imu_registers();
	aku_delay(20);
 800162c:	2014      	movs	r0, #20
 800162e:	f000 fa49 	bl	8001ac4 <aku_delay>
	if (bno055.set_offset)
 8001632:	4b04      	ldr	r3, [pc, #16]	; (8001644 <init_IMU+0x20>)
 8001634:	79db      	ldrb	r3, [r3, #7]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d002      	beq.n	8001640 <init_IMU+0x1c>
		get_offset_data(&imu_offset_data);
 800163a:	4803      	ldr	r0, [pc, #12]	; (8001648 <init_IMU+0x24>)
 800163c:	f000 f8f8 	bl	8001830 <get_offset_data>

	//-------------------------------
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000010 	.word	0x20000010
 8001648:	20000154 	.word	0x20000154
 800164c:	00000000 	.word	0x00000000

08001650 <read_IMU>:

IMU *read_IMU()
{
 8001650:	b5b0      	push	{r4, r5, r7, lr}
 8001652:	af00      	add	r7, sp, #0
	// imu.data_flow_flag = check_imu_connection();
	// imu.dev_status = check_imu_status();
	read_imu_data(&imu);
 8001654:	4872      	ldr	r0, [pc, #456]	; (8001820 <read_IMU+0x1d0>)
 8001656:	f7ff fed3 	bl	8001400 <read_imu_data>
	imu.dataflow_rate = aku_chronometer(&imu.tick);
 800165a:	4872      	ldr	r0, [pc, #456]	; (8001824 <read_IMU+0x1d4>)
 800165c:	f000 fa3d 	bl	8001ada <aku_chronometer>
 8001660:	4603      	mov	r3, r0
 8001662:	461a      	mov	r2, r3
 8001664:	4b6e      	ldr	r3, [pc, #440]	; (8001820 <read_IMU+0x1d0>)
 8001666:	669a      	str	r2, [r3, #104]	; 0x68
	if (bno055.set_offset)
 8001668:	4b6f      	ldr	r3, [pc, #444]	; (8001828 <read_IMU+0x1d8>)
 800166a:	79db      	ldrb	r3, [r3, #7]
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 8084 	beq.w	800177a <read_IMU+0x12a>
	{
		imu.accel.x = imu.accel.x - imu_offset_data.accel.x;
 8001672:	4b6b      	ldr	r3, [pc, #428]	; (8001820 <read_IMU+0x1d0>)
 8001674:	ed93 7a00 	vldr	s14, [r3]
 8001678:	4b6c      	ldr	r3, [pc, #432]	; (800182c <read_IMU+0x1dc>)
 800167a:	edd3 7a00 	vldr	s15, [r3]
 800167e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001682:	4b67      	ldr	r3, [pc, #412]	; (8001820 <read_IMU+0x1d0>)
 8001684:	edc3 7a00 	vstr	s15, [r3]
		imu.accel.y = imu.accel.y - imu_offset_data.accel.y;
 8001688:	4b65      	ldr	r3, [pc, #404]	; (8001820 <read_IMU+0x1d0>)
 800168a:	ed93 7a01 	vldr	s14, [r3, #4]
 800168e:	4b67      	ldr	r3, [pc, #412]	; (800182c <read_IMU+0x1dc>)
 8001690:	edd3 7a01 	vldr	s15, [r3, #4]
 8001694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001698:	4b61      	ldr	r3, [pc, #388]	; (8001820 <read_IMU+0x1d0>)
 800169a:	edc3 7a01 	vstr	s15, [r3, #4]
		imu.accel.z = imu.accel.z - imu_offset_data.accel.z;
 800169e:	4b60      	ldr	r3, [pc, #384]	; (8001820 <read_IMU+0x1d0>)
 80016a0:	ed93 7a02 	vldr	s14, [r3, #8]
 80016a4:	4b61      	ldr	r3, [pc, #388]	; (800182c <read_IMU+0x1dc>)
 80016a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80016aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ae:	4b5c      	ldr	r3, [pc, #368]	; (8001820 <read_IMU+0x1d0>)
 80016b0:	edc3 7a02 	vstr	s15, [r3, #8]

		imu.gyro.x = imu.gyro.x - imu_offset_data.gyro.x;
 80016b4:	4b5a      	ldr	r3, [pc, #360]	; (8001820 <read_IMU+0x1d0>)
 80016b6:	ed93 7a04 	vldr	s14, [r3, #16]
 80016ba:	4b5c      	ldr	r3, [pc, #368]	; (800182c <read_IMU+0x1dc>)
 80016bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80016c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c4:	4b56      	ldr	r3, [pc, #344]	; (8001820 <read_IMU+0x1d0>)
 80016c6:	edc3 7a04 	vstr	s15, [r3, #16]
		imu.gyro.y = imu.gyro.y - imu_offset_data.gyro.y;
 80016ca:	4b55      	ldr	r3, [pc, #340]	; (8001820 <read_IMU+0x1d0>)
 80016cc:	ed93 7a05 	vldr	s14, [r3, #20]
 80016d0:	4b56      	ldr	r3, [pc, #344]	; (800182c <read_IMU+0x1dc>)
 80016d2:	edd3 7a05 	vldr	s15, [r3, #20]
 80016d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016da:	4b51      	ldr	r3, [pc, #324]	; (8001820 <read_IMU+0x1d0>)
 80016dc:	edc3 7a05 	vstr	s15, [r3, #20]
		imu.gyro.z = imu.gyro.z - imu_offset_data.gyro.z;
 80016e0:	4b4f      	ldr	r3, [pc, #316]	; (8001820 <read_IMU+0x1d0>)
 80016e2:	ed93 7a06 	vldr	s14, [r3, #24]
 80016e6:	4b51      	ldr	r3, [pc, #324]	; (800182c <read_IMU+0x1dc>)
 80016e8:	edd3 7a06 	vldr	s15, [r3, #24]
 80016ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f0:	4b4b      	ldr	r3, [pc, #300]	; (8001820 <read_IMU+0x1d0>)
 80016f2:	edc3 7a06 	vstr	s15, [r3, #24]

		imu.euler.yaw = imu.euler.yaw - imu_offset_data.euler.yaw;
 80016f6:	4b4a      	ldr	r3, [pc, #296]	; (8001820 <read_IMU+0x1d0>)
 80016f8:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80016fc:	4b4b      	ldr	r3, [pc, #300]	; (800182c <read_IMU+0x1dc>)
 80016fe:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001702:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001706:	4b46      	ldr	r3, [pc, #280]	; (8001820 <read_IMU+0x1d0>)
 8001708:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		imu.euler.pitch = imu.euler.pitch - imu_offset_data.euler.pitch;
 800170c:	4b44      	ldr	r3, [pc, #272]	; (8001820 <read_IMU+0x1d0>)
 800170e:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001712:	4b46      	ldr	r3, [pc, #280]	; (800182c <read_IMU+0x1dc>)
 8001714:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001718:	ee77 7a67 	vsub.f32	s15, s14, s15
 800171c:	4b40      	ldr	r3, [pc, #256]	; (8001820 <read_IMU+0x1d0>)
 800171e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		imu.euler.roll = imu.euler.roll - imu_offset_data.euler.roll;
 8001722:	4b3f      	ldr	r3, [pc, #252]	; (8001820 <read_IMU+0x1d0>)
 8001724:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001728:	4b40      	ldr	r3, [pc, #256]	; (800182c <read_IMU+0x1dc>)
 800172a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800172e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001732:	4b3b      	ldr	r3, [pc, #236]	; (8001820 <read_IMU+0x1d0>)
 8001734:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

		imu.lineer_accel.x = imu.lineer_accel.x - imu_offset_data.lineer_accel.x;
 8001738:	4b39      	ldr	r3, [pc, #228]	; (8001820 <read_IMU+0x1d0>)
 800173a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800173e:	4b3b      	ldr	r3, [pc, #236]	; (800182c <read_IMU+0x1dc>)
 8001740:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001748:	4b35      	ldr	r3, [pc, #212]	; (8001820 <read_IMU+0x1d0>)
 800174a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		imu.lineer_accel.y = imu.lineer_accel.y - imu_offset_data.lineer_accel.y;
 800174e:	4b34      	ldr	r3, [pc, #208]	; (8001820 <read_IMU+0x1d0>)
 8001750:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001754:	4b35      	ldr	r3, [pc, #212]	; (800182c <read_IMU+0x1dc>)
 8001756:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800175a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800175e:	4b30      	ldr	r3, [pc, #192]	; (8001820 <read_IMU+0x1d0>)
 8001760:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		imu.lineer_accel.z = imu.lineer_accel.z - imu_offset_data.lineer_accel.z;
 8001764:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <read_IMU+0x1d0>)
 8001766:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800176a:	4b30      	ldr	r3, [pc, #192]	; (800182c <read_IMU+0x1dc>)
 800176c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001770:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001774:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <read_IMU+0x1d0>)
 8001776:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}
	imu.accel.resultant = sqrt(pow(imu.accel.x, 2) + pow(imu.accel.y, 2) + pow(imu.accel.z, 2));
 800177a:	4b29      	ldr	r3, [pc, #164]	; (8001820 <read_IMU+0x1d0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fefa 	bl	8000578 <__aeabi_f2d>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8001818 <read_IMU+0x1c8>
 800178c:	ec43 2b10 	vmov	d0, r2, r3
 8001790:	f008 ffce 	bl	800a730 <pow>
 8001794:	ec55 4b10 	vmov	r4, r5, d0
 8001798:	4b21      	ldr	r3, [pc, #132]	; (8001820 <read_IMU+0x1d0>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe feeb 	bl	8000578 <__aeabi_f2d>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8001818 <read_IMU+0x1c8>
 80017aa:	ec43 2b10 	vmov	d0, r2, r3
 80017ae:	f008 ffbf 	bl	800a730 <pow>
 80017b2:	ec53 2b10 	vmov	r2, r3, d0
 80017b6:	4620      	mov	r0, r4
 80017b8:	4629      	mov	r1, r5
 80017ba:	f7fe fd7f 	bl	80002bc <__adddf3>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4614      	mov	r4, r2
 80017c4:	461d      	mov	r5, r3
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <read_IMU+0x1d0>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fed4 	bl	8000578 <__aeabi_f2d>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8001818 <read_IMU+0x1c8>
 80017d8:	ec43 2b10 	vmov	d0, r2, r3
 80017dc:	f008 ffa8 	bl	800a730 <pow>
 80017e0:	ec53 2b10 	vmov	r2, r3, d0
 80017e4:	4620      	mov	r0, r4
 80017e6:	4629      	mov	r1, r5
 80017e8:	f7fe fd68 	bl	80002bc <__adddf3>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	ec43 2b17 	vmov	d7, r2, r3
 80017f4:	eeb0 0a47 	vmov.f32	s0, s14
 80017f8:	eef0 0a67 	vmov.f32	s1, s15
 80017fc:	f009 f808 	bl	800a810 <sqrt>
 8001800:	ec53 2b10 	vmov	r2, r3, d0
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff f9be 	bl	8000b88 <__aeabi_d2f>
 800180c:	4603      	mov	r3, r0
 800180e:	4a04      	ldr	r2, [pc, #16]	; (8001820 <read_IMU+0x1d0>)
 8001810:	60d3      	str	r3, [r2, #12]
	return (&imu);
 8001812:	4b03      	ldr	r3, [pc, #12]	; (8001820 <read_IMU+0x1d0>)
}
 8001814:	4618      	mov	r0, r3
 8001816:	bdb0      	pop	{r4, r5, r7, pc}
 8001818:	00000000 	.word	0x00000000
 800181c:	40000000 	.word	0x40000000
 8001820:	200000e4 	.word	0x200000e4
 8001824:	20000150 	.word	0x20000150
 8001828:	20000010 	.word	0x20000010
 800182c:	20000154 	.word	0x20000154

08001830 <get_offset_data>:
		read_imu_data(&imu);
	}
}

void get_offset_data(IMU *temp_imu_offset_data)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b0a0      	sub	sp, #128	; 0x80
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	uint16_t ctr;
	IMU offset_data;
	for (ctr = 0; ctr < bno055.offset_val; ctr++)
 8001838:	2300      	movs	r3, #0
 800183a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800183e:	e081      	b.n	8001944 <get_offset_data+0x114>
	{
		read_imu_data(&offset_data);
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fddb 	bl	8001400 <read_imu_data>
		temp_imu_offset_data->accel.x = temp_imu_offset_data->accel.x + offset_data.accel.x;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	ed93 7a00 	vldr	s14, [r3]
 8001850:	edd7 7a03 	vldr	s15, [r7, #12]
 8001854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	edc3 7a00 	vstr	s15, [r3]
		temp_imu_offset_data->accel.y = temp_imu_offset_data->accel.y + offset_data.accel.y;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	ed93 7a01 	vldr	s14, [r3, #4]
 8001864:	edd7 7a04 	vldr	s15, [r7, #16]
 8001868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	edc3 7a01 	vstr	s15, [r3, #4]
		temp_imu_offset_data->accel.z = temp_imu_offset_data->accel.z + offset_data.accel.z;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	ed93 7a02 	vldr	s14, [r3, #8]
 8001878:	edd7 7a05 	vldr	s15, [r7, #20]
 800187c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	edc3 7a02 	vstr	s15, [r3, #8]

		temp_imu_offset_data->gyro.x = temp_imu_offset_data->gyro.x + offset_data.gyro.x;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	ed93 7a04 	vldr	s14, [r3, #16]
 800188c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	edc3 7a04 	vstr	s15, [r3, #16]
		temp_imu_offset_data->gyro.y = temp_imu_offset_data->gyro.y + offset_data.gyro.y;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	ed93 7a05 	vldr	s14, [r3, #20]
 80018a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80018a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	edc3 7a05 	vstr	s15, [r3, #20]
		temp_imu_offset_data->gyro.z = temp_imu_offset_data->gyro.z + offset_data.gyro.z;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	ed93 7a06 	vldr	s14, [r3, #24]
 80018b4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	edc3 7a06 	vstr	s15, [r3, #24]

		temp_imu_offset_data->euler.yaw = temp_imu_offset_data->euler.yaw + offset_data.euler.yaw;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80018c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80018cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		temp_imu_offset_data->euler.pitch = temp_imu_offset_data->euler.pitch + offset_data.euler.pitch;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80018dc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		temp_imu_offset_data->euler.roll = temp_imu_offset_data->euler.roll + offset_data.euler.roll;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80018f0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80018f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

		temp_imu_offset_data->lineer_accel.x = temp_imu_offset_data->lineer_accel.x + offset_data.lineer_accel.x;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001904:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		temp_imu_offset_data->lineer_accel.y = temp_imu_offset_data->lineer_accel.y + offset_data.lineer_accel.y;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001918:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800191c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		temp_imu_offset_data->lineer_accel.z = temp_imu_offset_data->lineer_accel.z + offset_data.lineer_accel.z;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800192c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	for (ctr = 0; ctr < bno055.offset_val; ctr++)
 800193a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800193e:	3301      	adds	r3, #1
 8001940:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8001944:	4b59      	ldr	r3, [pc, #356]	; (8001aac <get_offset_data+0x27c>)
 8001946:	891b      	ldrh	r3, [r3, #8]
 8001948:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800194c:	429a      	cmp	r2, r3
 800194e:	f4ff af77 	bcc.w	8001840 <get_offset_data+0x10>
	}

	temp_imu_offset_data->accel.x /= bno055.offset_val;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	edd3 6a00 	vldr	s13, [r3]
 8001958:	4b54      	ldr	r3, [pc, #336]	; (8001aac <get_offset_data+0x27c>)
 800195a:	891b      	ldrh	r3, [r3, #8]
 800195c:	ee07 3a90 	vmov	s15, r3
 8001960:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	edc3 7a00 	vstr	s15, [r3]
	temp_imu_offset_data->accel.y /= bno055.offset_val;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	edd3 6a01 	vldr	s13, [r3, #4]
 8001974:	4b4d      	ldr	r3, [pc, #308]	; (8001aac <get_offset_data+0x27c>)
 8001976:	891b      	ldrh	r3, [r3, #8]
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	edc3 7a01 	vstr	s15, [r3, #4]
	temp_imu_offset_data->accel.z /= bno055.offset_val;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001990:	4b46      	ldr	r3, [pc, #280]	; (8001aac <get_offset_data+0x27c>)
 8001992:	891b      	ldrh	r3, [r3, #8]
 8001994:	ee07 3a90 	vmov	s15, r3
 8001998:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800199c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	edc3 7a02 	vstr	s15, [r3, #8]

	temp_imu_offset_data->gyro.x /= bno055.offset_val;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	edd3 6a04 	vldr	s13, [r3, #16]
 80019ac:	4b3f      	ldr	r3, [pc, #252]	; (8001aac <get_offset_data+0x27c>)
 80019ae:	891b      	ldrh	r3, [r3, #8]
 80019b0:	ee07 3a90 	vmov	s15, r3
 80019b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	edc3 7a04 	vstr	s15, [r3, #16]
	temp_imu_offset_data->gyro.y /= bno055.offset_val;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	edd3 6a05 	vldr	s13, [r3, #20]
 80019c8:	4b38      	ldr	r3, [pc, #224]	; (8001aac <get_offset_data+0x27c>)
 80019ca:	891b      	ldrh	r3, [r3, #8]
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	edc3 7a05 	vstr	s15, [r3, #20]
	temp_imu_offset_data->gyro.z /= bno055.offset_val;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	edd3 6a06 	vldr	s13, [r3, #24]
 80019e4:	4b31      	ldr	r3, [pc, #196]	; (8001aac <get_offset_data+0x27c>)
 80019e6:	891b      	ldrh	r3, [r3, #8]
 80019e8:	ee07 3a90 	vmov	s15, r3
 80019ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	edc3 7a06 	vstr	s15, [r3, #24]

	temp_imu_offset_data->euler.yaw /= bno055.offset_val;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001a00:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <get_offset_data+0x27c>)
 8001a02:	891b      	ldrh	r3, [r3, #8]
 8001a04:	ee07 3a90 	vmov	s15, r3
 8001a08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	temp_imu_offset_data->euler.pitch /= bno055.offset_val;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <get_offset_data+0x27c>)
 8001a1e:	891b      	ldrh	r3, [r3, #8]
 8001a20:	ee07 3a90 	vmov	s15, r3
 8001a24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	temp_imu_offset_data->euler.roll /= bno055.offset_val;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001a38:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <get_offset_data+0x27c>)
 8001a3a:	891b      	ldrh	r3, [r3, #8]
 8001a3c:	ee07 3a90 	vmov	s15, r3
 8001a40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	temp_imu_offset_data->lineer_accel.x /= bno055.offset_val;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <get_offset_data+0x27c>)
 8001a56:	891b      	ldrh	r3, [r3, #8]
 8001a58:	ee07 3a90 	vmov	s15, r3
 8001a5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	temp_imu_offset_data->lineer_accel.y /= bno055.offset_val;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <get_offset_data+0x27c>)
 8001a72:	891b      	ldrh	r3, [r3, #8]
 8001a74:	ee07 3a90 	vmov	s15, r3
 8001a78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	temp_imu_offset_data->lineer_accel.z /= bno055.offset_val;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <get_offset_data+0x27c>)
 8001a8e:	891b      	ldrh	r3, [r3, #8]
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 8001aa2:	bf00      	nop
 8001aa4:	3780      	adds	r7, #128	; 0x80
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000010 	.word	0x20000010

08001ab0 <timer_init>:
#include "aku_infrastructure.h"
#include "main.h"
#include "cmsis_os.h"


void timer_init(){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(DELAY_TIMER);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <timer_init+0x10>)
 8001ab6:	f004 fcff 	bl	80064b8 <HAL_TIM_Base_Start>
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000664 	.word	0x20000664

08001ac4 <aku_delay>:

void aku_delay(uint32_t delay){
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	/*__HAL_TIM_SET_COUNTER(DELAY_TIMER,0);
	while(__HAL_TIM_GET_COUNTER(DELAY_TIMER) < (delay*10)){
		0 == 0;
	}*/
	if(USE_FREERTOS)
		osDelay(delay);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f006 fb72 	bl	80081b6 <osDelay>
	else
		HAL_Delay(delay);
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <aku_chronometer>:

uint16_t aku_chronometer(uint32_t *tick){
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b084      	sub	sp, #16
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
	uint16_t timer = HAL_GetTick() - *tick;
 8001ae2:	f001 fe07 	bl	80036f4 <HAL_GetTick>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	81fb      	strh	r3, [r7, #14]
	*tick = HAL_GetTick();
 8001af4:	f001 fdfe 	bl	80036f4 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	601a      	str	r2, [r3, #0]
	return timer;
 8001afe:	89fb      	ldrh	r3, [r7, #14]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <bno055_setPage>:
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14
uint8_t batu = 0;


void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	4619      	mov	r1, r3
 8001b16:	2007      	movs	r0, #7
 8001b18:	f7ff fb4c 	bl	80011b4 <bno055_writeData>
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	4619      	mov	r1, r3
 8001b32:	203d      	movs	r0, #61	; 0x3d
 8001b34:	f7ff fb3e 	bl	80011b4 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d103      	bne.n	8001b46 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8001b3e:	2013      	movs	r0, #19
 8001b40:	f7ff fb2c 	bl	800119c <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001b44:	e002      	b.n	8001b4c <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001b46:	2007      	movs	r0, #7
 8001b48:	f7ff fb28 	bl	800119c <bno055_delay>
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeConfig() {
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
}

void bno055_setOperationModeNDOF() {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001b58:	200c      	movs	r0, #12
 8001b5a:	f7ff ffe3 	bl	8001b24 <bno055_setOperationMode>
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001b62:	b580      	push	{r7, lr}
 8001b64:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001b66:	2120      	movs	r1, #32
 8001b68:	203f      	movs	r0, #63	; 0x3f
 8001b6a:	f7ff fb23 	bl	80011b4 <bno055_writeData>
  bno055_delay(700);
 8001b6e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001b72:	f7ff fb13 	bl	800119c <bno055_delay>
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001b7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b80:	b09e      	sub	sp, #120	; 0x78
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f7ff ffbc 	bl	8001b08 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b94:	2b20      	cmp	r3, #32
 8001b96:	d108      	bne.n	8001baa <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001b98:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ba0:	2208      	movs	r2, #8
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fbf2 	bl	800138c <bno055_readData>
 8001ba8:	e007      	b.n	8001bba <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001baa:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001bae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bb2:	2206      	movs	r2, #6
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fbe9 	bl	800138c <bno055_readData>

  double scale = 1;
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	4b8b      	ldr	r3, [pc, #556]	; (8001dec <bno055_getVector+0x270>)
 8001bc0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bc8:	2b0e      	cmp	r3, #14
 8001bca:	d109      	bne.n	8001be0 <bno055_getVector+0x64>
    scale = magScale;
 8001bcc:	4b88      	ldr	r3, [pc, #544]	; (8001df0 <bno055_getVector+0x274>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fcaf 	bl	8000534 <__aeabi_ui2d>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001bde:	e03e      	b.n	8001c5e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001be0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d007      	beq.n	8001bf8 <bno055_getVector+0x7c>
 8001be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bec:	2b28      	cmp	r3, #40	; 0x28
 8001bee:	d003      	beq.n	8001bf8 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bf4:	2b2e      	cmp	r3, #46	; 0x2e
 8001bf6:	d109      	bne.n	8001c0c <bno055_getVector+0x90>
    scale = accelScale;
 8001bf8:	4b7e      	ldr	r3, [pc, #504]	; (8001df4 <bno055_getVector+0x278>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fc99 	bl	8000534 <__aeabi_ui2d>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001c0a:	e028      	b.n	8001c5e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c10:	2b14      	cmp	r3, #20
 8001c12:	d109      	bne.n	8001c28 <bno055_getVector+0xac>
    scale = angularRateScale;
 8001c14:	4b78      	ldr	r3, [pc, #480]	; (8001df8 <bno055_getVector+0x27c>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc8b 	bl	8000534 <__aeabi_ui2d>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001c26:	e01a      	b.n	8001c5e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c2c:	2b1a      	cmp	r3, #26
 8001c2e:	d109      	bne.n	8001c44 <bno055_getVector+0xc8>
    scale = eulerScale;
 8001c30:	4b72      	ldr	r3, [pc, #456]	; (8001dfc <bno055_getVector+0x280>)
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fc7d 	bl	8000534 <__aeabi_ui2d>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001c42:	e00c      	b.n	8001c5e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c48:	2b20      	cmp	r3, #32
 8001c4a:	d108      	bne.n	8001c5e <bno055_getVector+0xe2>
    scale = quaScale;
 8001c4c:	4b6c      	ldr	r3, [pc, #432]	; (8001e00 <bno055_getVector+0x284>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc6f 	bl	8000534 <__aeabi_ui2d>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c62:	2220      	movs	r2, #32
 8001c64:	2100      	movs	r1, #0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f007 fde3 	bl	8009832 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c70:	2b20      	cmp	r3, #32
 8001c72:	d150      	bne.n	8001d16 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001c74:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	4313      	orrs	r3, r2
 8001c84:	b21b      	sxth	r3, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fc64 	bl	8000554 <__aeabi_i2d>
 8001c8c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001c90:	f7fe fdf4 	bl	800087c <__aeabi_ddiv>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001c9c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001ca8:	b21b      	sxth	r3, r3
 8001caa:	4313      	orrs	r3, r2
 8001cac:	b21b      	sxth	r3, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fc50 	bl	8000554 <__aeabi_i2d>
 8001cb4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001cb8:	f7fe fde0 	bl	800087c <__aeabi_ddiv>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001cc4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	b21a      	sxth	r2, r3
 8001ccc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001cd0:	b21b      	sxth	r3, r3
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fc3c 	bl	8000554 <__aeabi_i2d>
 8001cdc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001ce0:	f7fe fdcc 	bl	800087c <__aeabi_ddiv>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001cec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	b21a      	sxth	r2, r3
 8001cf4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b21b      	sxth	r3, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fc28 	bl	8000554 <__aeabi_i2d>
 8001d04:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001d08:	f7fe fdb8 	bl	800087c <__aeabi_ddiv>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001d14:	e03b      	b.n	8001d8e <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001d16:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001d1a:	021b      	lsls	r3, r3, #8
 8001d1c:	b21a      	sxth	r2, r3
 8001d1e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001d22:	b21b      	sxth	r3, r3
 8001d24:	4313      	orrs	r3, r2
 8001d26:	b21b      	sxth	r3, r3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fc13 	bl	8000554 <__aeabi_i2d>
 8001d2e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001d32:	f7fe fda3 	bl	800087c <__aeabi_ddiv>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001d3e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	b21a      	sxth	r2, r3
 8001d46:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001d4a:	b21b      	sxth	r3, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b21b      	sxth	r3, r3
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fbff 	bl	8000554 <__aeabi_i2d>
 8001d56:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001d5a:	f7fe fd8f 	bl	800087c <__aeabi_ddiv>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001d66:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	b21a      	sxth	r2, r3
 8001d6e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	4313      	orrs	r3, r2
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fbeb 	bl	8000554 <__aeabi_i2d>
 8001d7e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001d82:	f7fe fd7b 	bl	800087c <__aeabi_ddiv>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8001d8e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001d92:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8001d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d9a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001da2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001da6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001daa:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001dae:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001db2:	ec49 8b14 	vmov	d4, r8, r9
 8001db6:	ec45 4b15 	vmov	d5, r4, r5
 8001dba:	ec41 0b16 	vmov	d6, r0, r1
 8001dbe:	ec43 2b17 	vmov	d7, r2, r3
}
 8001dc2:	eeb0 0a44 	vmov.f32	s0, s8
 8001dc6:	eef0 0a64 	vmov.f32	s1, s9
 8001dca:	eeb0 1a45 	vmov.f32	s2, s10
 8001dce:	eef0 1a65 	vmov.f32	s3, s11
 8001dd2:	eeb0 2a46 	vmov.f32	s4, s12
 8001dd6:	eef0 2a66 	vmov.f32	s5, s13
 8001dda:	eeb0 3a47 	vmov.f32	s6, s14
 8001dde:	eef0 3a67 	vmov.f32	s7, s15
 8001de2:	3778      	adds	r7, #120	; 0x78
 8001de4:	46bd      	mov	sp, r7
 8001de6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dea:	bf00      	nop
 8001dec:	3ff00000 	.word	0x3ff00000
 8001df0:	20000026 	.word	0x20000026
 8001df4:	20000020 	.word	0x20000020
 8001df8:	20000022 	.word	0x20000022
 8001dfc:	20000024 	.word	0x20000024
 8001e00:	20000028 	.word	0x20000028

08001e04 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 8001e04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e08:	b090      	sub	sp, #64	; 0x40
 8001e0a:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 8001e0c:	2008      	movs	r0, #8
 8001e0e:	f7ff feb5 	bl	8001b7c <bno055_getVector>
 8001e12:	eeb0 4a40 	vmov.f32	s8, s0
 8001e16:	eef0 4a60 	vmov.f32	s9, s1
 8001e1a:	eeb0 5a41 	vmov.f32	s10, s2
 8001e1e:	eef0 5a61 	vmov.f32	s11, s3
 8001e22:	eeb0 6a42 	vmov.f32	s12, s4
 8001e26:	eef0 6a62 	vmov.f32	s13, s5
 8001e2a:	eeb0 7a43 	vmov.f32	s14, s6
 8001e2e:	eef0 7a63 	vmov.f32	s15, s7
 8001e32:	ed87 4b08 	vstr	d4, [r7, #32]
 8001e36:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001e3a:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001e3e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001e42:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e46:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001e4a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001e4e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e52:	ec49 8b14 	vmov	d4, r8, r9
 8001e56:	ec45 4b15 	vmov	d5, r4, r5
 8001e5a:	ec41 0b16 	vmov	d6, r0, r1
 8001e5e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e62:	eeb0 0a44 	vmov.f32	s0, s8
 8001e66:	eef0 0a64 	vmov.f32	s1, s9
 8001e6a:	eeb0 1a45 	vmov.f32	s2, s10
 8001e6e:	eef0 1a65 	vmov.f32	s3, s11
 8001e72:	eeb0 2a46 	vmov.f32	s4, s12
 8001e76:	eef0 2a66 	vmov.f32	s5, s13
 8001e7a:	eeb0 3a47 	vmov.f32	s6, s14
 8001e7e:	eef0 3a67 	vmov.f32	s7, s15
 8001e82:	3740      	adds	r7, #64	; 0x40
 8001e84:	46bd      	mov	sp, r7
 8001e86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001e8a <bno055_getVectorMagnetometer>:
bno055_vector_t bno055_getVectorMagnetometer() {
 8001e8a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e8e:	b090      	sub	sp, #64	; 0x40
 8001e90:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
 8001e92:	200e      	movs	r0, #14
 8001e94:	f7ff fe72 	bl	8001b7c <bno055_getVector>
 8001e98:	eeb0 4a40 	vmov.f32	s8, s0
 8001e9c:	eef0 4a60 	vmov.f32	s9, s1
 8001ea0:	eeb0 5a41 	vmov.f32	s10, s2
 8001ea4:	eef0 5a61 	vmov.f32	s11, s3
 8001ea8:	eeb0 6a42 	vmov.f32	s12, s4
 8001eac:	eef0 6a62 	vmov.f32	s13, s5
 8001eb0:	eeb0 7a43 	vmov.f32	s14, s6
 8001eb4:	eef0 7a63 	vmov.f32	s15, s7
 8001eb8:	ed87 4b08 	vstr	d4, [r7, #32]
 8001ebc:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001ec0:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001ec4:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001ec8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ecc:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001ed0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001ed4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001ed8:	ec49 8b14 	vmov	d4, r8, r9
 8001edc:	ec45 4b15 	vmov	d5, r4, r5
 8001ee0:	ec41 0b16 	vmov	d6, r0, r1
 8001ee4:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ee8:	eeb0 0a44 	vmov.f32	s0, s8
 8001eec:	eef0 0a64 	vmov.f32	s1, s9
 8001ef0:	eeb0 1a45 	vmov.f32	s2, s10
 8001ef4:	eef0 1a65 	vmov.f32	s3, s11
 8001ef8:	eeb0 2a46 	vmov.f32	s4, s12
 8001efc:	eef0 2a66 	vmov.f32	s5, s13
 8001f00:	eeb0 3a47 	vmov.f32	s6, s14
 8001f04:	eef0 3a67 	vmov.f32	s7, s15
 8001f08:	3740      	adds	r7, #64	; 0x40
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001f10 <bno055_getVectorGyroscope>:
bno055_vector_t bno055_getVectorGyroscope() {
 8001f10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f14:	b090      	sub	sp, #64	; 0x40
 8001f16:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 8001f18:	2014      	movs	r0, #20
 8001f1a:	f7ff fe2f 	bl	8001b7c <bno055_getVector>
 8001f1e:	eeb0 4a40 	vmov.f32	s8, s0
 8001f22:	eef0 4a60 	vmov.f32	s9, s1
 8001f26:	eeb0 5a41 	vmov.f32	s10, s2
 8001f2a:	eef0 5a61 	vmov.f32	s11, s3
 8001f2e:	eeb0 6a42 	vmov.f32	s12, s4
 8001f32:	eef0 6a62 	vmov.f32	s13, s5
 8001f36:	eeb0 7a43 	vmov.f32	s14, s6
 8001f3a:	eef0 7a63 	vmov.f32	s15, s7
 8001f3e:	ed87 4b08 	vstr	d4, [r7, #32]
 8001f42:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001f46:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001f4a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001f4e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f52:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001f56:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001f5a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f5e:	ec49 8b14 	vmov	d4, r8, r9
 8001f62:	ec45 4b15 	vmov	d5, r4, r5
 8001f66:	ec41 0b16 	vmov	d6, r0, r1
 8001f6a:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f6e:	eeb0 0a44 	vmov.f32	s0, s8
 8001f72:	eef0 0a64 	vmov.f32	s1, s9
 8001f76:	eeb0 1a45 	vmov.f32	s2, s10
 8001f7a:	eef0 1a65 	vmov.f32	s3, s11
 8001f7e:	eeb0 2a46 	vmov.f32	s4, s12
 8001f82:	eef0 2a66 	vmov.f32	s5, s13
 8001f86:	eeb0 3a47 	vmov.f32	s6, s14
 8001f8a:	eef0 3a67 	vmov.f32	s7, s15
 8001f8e:	3740      	adds	r7, #64	; 0x40
 8001f90:	46bd      	mov	sp, r7
 8001f92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001f96 <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 8001f96:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f9a:	b090      	sub	sp, #64	; 0x40
 8001f9c:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8001f9e:	201a      	movs	r0, #26
 8001fa0:	f7ff fdec 	bl	8001b7c <bno055_getVector>
 8001fa4:	eeb0 4a40 	vmov.f32	s8, s0
 8001fa8:	eef0 4a60 	vmov.f32	s9, s1
 8001fac:	eeb0 5a41 	vmov.f32	s10, s2
 8001fb0:	eef0 5a61 	vmov.f32	s11, s3
 8001fb4:	eeb0 6a42 	vmov.f32	s12, s4
 8001fb8:	eef0 6a62 	vmov.f32	s13, s5
 8001fbc:	eeb0 7a43 	vmov.f32	s14, s6
 8001fc0:	eef0 7a63 	vmov.f32	s15, s7
 8001fc4:	ed87 4b08 	vstr	d4, [r7, #32]
 8001fc8:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001fcc:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001fd0:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001fd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fd8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001fdc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001fe0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fe4:	ec49 8b14 	vmov	d4, r8, r9
 8001fe8:	ec45 4b15 	vmov	d5, r4, r5
 8001fec:	ec41 0b16 	vmov	d6, r0, r1
 8001ff0:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ff4:	eeb0 0a44 	vmov.f32	s0, s8
 8001ff8:	eef0 0a64 	vmov.f32	s1, s9
 8001ffc:	eeb0 1a45 	vmov.f32	s2, s10
 8002000:	eef0 1a65 	vmov.f32	s3, s11
 8002004:	eeb0 2a46 	vmov.f32	s4, s12
 8002008:	eef0 2a66 	vmov.f32	s5, s13
 800200c:	eeb0 3a47 	vmov.f32	s6, s14
 8002010:	eef0 3a67 	vmov.f32	s7, s15
 8002014:	3740      	adds	r7, #64	; 0x40
 8002016:	46bd      	mov	sp, r7
 8002018:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800201c <bno055_getVectorLinearAccel>:
bno055_vector_t bno055_getVectorLinearAccel() {
 800201c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002020:	b090      	sub	sp, #64	; 0x40
 8002022:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
 8002024:	2028      	movs	r0, #40	; 0x28
 8002026:	f7ff fda9 	bl	8001b7c <bno055_getVector>
 800202a:	eeb0 4a40 	vmov.f32	s8, s0
 800202e:	eef0 4a60 	vmov.f32	s9, s1
 8002032:	eeb0 5a41 	vmov.f32	s10, s2
 8002036:	eef0 5a61 	vmov.f32	s11, s3
 800203a:	eeb0 6a42 	vmov.f32	s12, s4
 800203e:	eef0 6a62 	vmov.f32	s13, s5
 8002042:	eeb0 7a43 	vmov.f32	s14, s6
 8002046:	eef0 7a63 	vmov.f32	s15, s7
 800204a:	ed87 4b08 	vstr	d4, [r7, #32]
 800204e:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8002052:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8002056:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800205a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800205e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002062:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002066:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800206a:	ec49 8b14 	vmov	d4, r8, r9
 800206e:	ec45 4b15 	vmov	d5, r4, r5
 8002072:	ec41 0b16 	vmov	d6, r0, r1
 8002076:	ec43 2b17 	vmov	d7, r2, r3
}
 800207a:	eeb0 0a44 	vmov.f32	s0, s8
 800207e:	eef0 0a64 	vmov.f32	s1, s9
 8002082:	eeb0 1a45 	vmov.f32	s2, s10
 8002086:	eef0 1a65 	vmov.f32	s3, s11
 800208a:	eeb0 2a46 	vmov.f32	s4, s12
 800208e:	eef0 2a66 	vmov.f32	s5, s13
 8002092:	eeb0 3a47 	vmov.f32	s6, s14
 8002096:	eef0 3a67 	vmov.f32	s7, s15
 800209a:	3740      	adds	r7, #64	; 0x40
 800209c:	46bd      	mov	sp, r7
 800209e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080020a2 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4a07      	ldr	r2, [pc, #28]	; (80020e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80020c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	4a06      	ldr	r2, [pc, #24]	; (80020e8 <vApplicationGetIdleTaskMemory+0x30>)
 80020ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2280      	movs	r2, #128	; 0x80
 80020d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	200001d4 	.word	0x200001d4
 80020e8:	20000288 	.word	0x20000288

080020ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80020ec:	b5b0      	push	{r4, r5, r7, lr}
 80020ee:	b08e      	sub	sp, #56	; 0x38
 80020f0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Read_SensorData */
  osThreadDef(Read_SensorData, Read_Sensor_Data_Task, osPriorityHigh, 0, 1024);
 80020f2:	4b14      	ldr	r3, [pc, #80]	; (8002144 <MX_FREERTOS_Init+0x58>)
 80020f4:	f107 041c 	add.w	r4, r7, #28
 80020f8:	461d      	mov	r5, r3
 80020fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002102:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Read_SensorDataHandle = osThreadCreate(osThread(Read_SensorData), NULL);
 8002106:	f107 031c 	add.w	r3, r7, #28
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f006 f806 	bl	800811e <osThreadCreate>
 8002112:	4603      	mov	r3, r0
 8002114:	4a0c      	ldr	r2, [pc, #48]	; (8002148 <MX_FREERTOS_Init+0x5c>)
 8002116:	6013      	str	r3, [r2, #0]

  /* definition and creation of Flight_States */
  osThreadDef(Flight_States, Flight_States_Task, osPriorityHigh, 0, 1024);
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <MX_FREERTOS_Init+0x60>)
 800211a:	463c      	mov	r4, r7
 800211c:	461d      	mov	r5, r3
 800211e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002122:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002126:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Flight_StatesHandle = osThreadCreate(osThread(Flight_States), NULL);
 800212a:	463b      	mov	r3, r7
 800212c:	2100      	movs	r1, #0
 800212e:	4618      	mov	r0, r3
 8002130:	f005 fff5 	bl	800811e <osThreadCreate>
 8002134:	4603      	mov	r3, r0
 8002136:	4a06      	ldr	r2, [pc, #24]	; (8002150 <MX_FREERTOS_Init+0x64>)
 8002138:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800213a:	bf00      	nop
 800213c:	3738      	adds	r7, #56	; 0x38
 800213e:	46bd      	mov	sp, r7
 8002140:	bdb0      	pop	{r4, r5, r7, pc}
 8002142:	bf00      	nop
 8002144:	0800b7f8 	.word	0x0800b7f8
 8002148:	200001cc 	.word	0x200001cc
 800214c:	0800b814 	.word	0x0800b814
 8002150:	200001d0 	.word	0x200001d0

08002154 <Read_Sensor_Data_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Read_Sensor_Data_Task */
void Read_Sensor_Data_Task(void const * argument)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Read_Sensor_Data_Task */
	timer_init();
 800215c:	f7ff fca8 	bl	8001ab0 <timer_init>
	init_IMU();
 8002160:	f7ff fa60 	bl	8001624 <init_IMU>
	init_Barometer();
 8002164:	f7fe ff62 	bl	800102c <init_Barometer>

  /* Infinite loop */
  for(;;)
  {
		altitude_ptr = read_Barometer();
 8002168:	f7fe ffc2 	bl	80010f0 <read_Barometer>
 800216c:	4603      	mov	r3, r0
 800216e:	4a05      	ldr	r2, [pc, #20]	; (8002184 <Read_Sensor_Data_Task+0x30>)
 8002170:	6013      	str	r3, [r2, #0]
		imu_ptr = read_IMU();
 8002172:	f7ff fa6d 	bl	8001650 <read_IMU>
 8002176:	4603      	mov	r3, r0
 8002178:	4a03      	ldr	r2, [pc, #12]	; (8002188 <Read_Sensor_Data_Task+0x34>)
 800217a:	6013      	str	r3, [r2, #0]
    osDelay(1);
 800217c:	2001      	movs	r0, #1
 800217e:	f006 f81a 	bl	80081b6 <osDelay>
		altitude_ptr = read_Barometer();
 8002182:	e7f1      	b.n	8002168 <Read_Sensor_Data_Task+0x14>
 8002184:	200001c8 	.word	0x200001c8
 8002188:	200001c4 	.word	0x200001c4

0800218c <Flight_States_Task>:
*/
int a;
uint32_t tick;
/* USER CODE END Header_Flight_States_Task */
void Flight_States_Task(void const * argument)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8002194:	2001      	movs	r0, #1
 8002196:	f006 f80e 	bl	80081b6 <osDelay>
 800219a:	e7fb      	b.n	8002194 <Flight_States_Task+0x8>

0800219c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	; 0x28
 80021a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a2:	f107 0314 	add.w	r3, r7, #20
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	60da      	str	r2, [r3, #12]
 80021b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	4b3e      	ldr	r3, [pc, #248]	; (80022b0 <MX_GPIO_Init+0x114>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a3d      	ldr	r2, [pc, #244]	; (80022b0 <MX_GPIO_Init+0x114>)
 80021bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b3b      	ldr	r3, [pc, #236]	; (80022b0 <MX_GPIO_Init+0x114>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	4b37      	ldr	r3, [pc, #220]	; (80022b0 <MX_GPIO_Init+0x114>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a36      	ldr	r2, [pc, #216]	; (80022b0 <MX_GPIO_Init+0x114>)
 80021d8:	f043 0304 	orr.w	r3, r3, #4
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <MX_GPIO_Init+0x114>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	4b30      	ldr	r3, [pc, #192]	; (80022b0 <MX_GPIO_Init+0x114>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a2f      	ldr	r2, [pc, #188]	; (80022b0 <MX_GPIO_Init+0x114>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <MX_GPIO_Init+0x114>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <MX_GPIO_Init+0x114>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a28      	ldr	r2, [pc, #160]	; (80022b0 <MX_GPIO_Init+0x114>)
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <MX_GPIO_Init+0x114>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	607b      	str	r3, [r7, #4]
 8002220:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|BNO_RST_Pin, GPIO_PIN_RESET);
 8002222:	2200      	movs	r2, #0
 8002224:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8002228:	4822      	ldr	r0, [pc, #136]	; (80022b4 <MX_GPIO_Init+0x118>)
 800222a:	f001 fd9b 	bl	8003d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CSS_GPIO_Port, SD_CSS_Pin, GPIO_PIN_RESET);
 800222e:	2200      	movs	r2, #0
 8002230:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002234:	4820      	ldr	r0, [pc, #128]	; (80022b8 <MX_GPIO_Init+0x11c>)
 8002236:	f001 fd95 	bl	8003d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|BNO_RST_Pin;
 800223a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800223e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002240:	2301      	movs	r3, #1
 8002242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	4619      	mov	r1, r3
 8002252:	4818      	ldr	r0, [pc, #96]	; (80022b4 <MX_GPIO_Init+0x118>)
 8002254:	f001 fbf2 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002258:	2340      	movs	r3, #64	; 0x40
 800225a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	4619      	mov	r1, r3
 800226a:	4814      	ldr	r0, [pc, #80]	; (80022bc <MX_GPIO_Init+0x120>)
 800226c:	f001 fbe6 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CSS_Pin;
 8002270:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002276:	2301      	movs	r3, #1
 8002278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	2300      	movs	r3, #0
 8002280:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CSS_GPIO_Port, &GPIO_InitStruct);
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4619      	mov	r1, r3
 8002288:	480b      	ldr	r0, [pc, #44]	; (80022b8 <MX_GPIO_Init+0x11c>)
 800228a:	f001 fbd7 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 800228e:	2310      	movs	r3, #16
 8002290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	4619      	mov	r1, r3
 80022a0:	4804      	ldr	r0, [pc, #16]	; (80022b4 <MX_GPIO_Init+0x118>)
 80022a2:	f001 fbcb 	bl	8003a3c <HAL_GPIO_Init>

}
 80022a6:	bf00      	nop
 80022a8:	3728      	adds	r7, #40	; 0x28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020000 	.word	0x40020000
 80022bc:	40020800 	.word	0x40020800

080022c0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <MX_I2C1_Init+0x50>)
 80022c6:	4a13      	ldr	r2, [pc, #76]	; (8002314 <MX_I2C1_Init+0x54>)
 80022c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80022ca:	4b11      	ldr	r3, [pc, #68]	; (8002310 <MX_I2C1_Init+0x50>)
 80022cc:	4a12      	ldr	r2, [pc, #72]	; (8002318 <MX_I2C1_Init+0x58>)
 80022ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <MX_I2C1_Init+0x50>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022d6:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <MX_I2C1_Init+0x50>)
 80022d8:	2200      	movs	r2, #0
 80022da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <MX_I2C1_Init+0x50>)
 80022de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022e4:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <MX_I2C1_Init+0x50>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <MX_I2C1_Init+0x50>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022f0:	4b07      	ldr	r3, [pc, #28]	; (8002310 <MX_I2C1_Init+0x50>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <MX_I2C1_Init+0x50>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022fc:	4804      	ldr	r0, [pc, #16]	; (8002310 <MX_I2C1_Init+0x50>)
 80022fe:	f001 fd4b 	bl	8003d98 <HAL_I2C_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002308:	f000 f974 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000488 	.word	0x20000488
 8002314:	40005400 	.word	0x40005400
 8002318:	000186a0 	.word	0x000186a0

0800231c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002320:	4b12      	ldr	r3, [pc, #72]	; (800236c <MX_I2C2_Init+0x50>)
 8002322:	4a13      	ldr	r2, [pc, #76]	; (8002370 <MX_I2C2_Init+0x54>)
 8002324:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <MX_I2C2_Init+0x50>)
 8002328:	4a12      	ldr	r2, [pc, #72]	; (8002374 <MX_I2C2_Init+0x58>)
 800232a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800232c:	4b0f      	ldr	r3, [pc, #60]	; (800236c <MX_I2C2_Init+0x50>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <MX_I2C2_Init+0x50>)
 8002334:	2200      	movs	r2, #0
 8002336:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <MX_I2C2_Init+0x50>)
 800233a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800233e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002340:	4b0a      	ldr	r3, [pc, #40]	; (800236c <MX_I2C2_Init+0x50>)
 8002342:	2200      	movs	r2, #0
 8002344:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <MX_I2C2_Init+0x50>)
 8002348:	2200      	movs	r2, #0
 800234a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800234c:	4b07      	ldr	r3, [pc, #28]	; (800236c <MX_I2C2_Init+0x50>)
 800234e:	2200      	movs	r2, #0
 8002350:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <MX_I2C2_Init+0x50>)
 8002354:	2200      	movs	r2, #0
 8002356:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002358:	4804      	ldr	r0, [pc, #16]	; (800236c <MX_I2C2_Init+0x50>)
 800235a:	f001 fd1d 	bl	8003d98 <HAL_I2C_Init>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002364:	f000 f946 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}
 800236c:	200004dc 	.word	0x200004dc
 8002370:	40005800 	.word	0x40005800
 8002374:	000186a0 	.word	0x000186a0

08002378 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08c      	sub	sp, #48	; 0x30
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 031c 	add.w	r3, r7, #28
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a42      	ldr	r2, [pc, #264]	; (80024a0 <HAL_I2C_MspInit+0x128>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d12c      	bne.n	80023f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	4b41      	ldr	r3, [pc, #260]	; (80024a4 <HAL_I2C_MspInit+0x12c>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a40      	ldr	r2, [pc, #256]	; (80024a4 <HAL_I2C_MspInit+0x12c>)
 80023a4:	f043 0302 	orr.w	r3, r3, #2
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b3e      	ldr	r3, [pc, #248]	; (80024a4 <HAL_I2C_MspInit+0x12c>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	61bb      	str	r3, [r7, #24]
 80023b4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023b6:	23c0      	movs	r3, #192	; 0xc0
 80023b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ba:	2312      	movs	r3, #18
 80023bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c2:	2303      	movs	r3, #3
 80023c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023c6:	2304      	movs	r3, #4
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ca:	f107 031c 	add.w	r3, r7, #28
 80023ce:	4619      	mov	r1, r3
 80023d0:	4835      	ldr	r0, [pc, #212]	; (80024a8 <HAL_I2C_MspInit+0x130>)
 80023d2:	f001 fb33 	bl	8003a3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	4b32      	ldr	r3, [pc, #200]	; (80024a4 <HAL_I2C_MspInit+0x12c>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	4a31      	ldr	r2, [pc, #196]	; (80024a4 <HAL_I2C_MspInit+0x12c>)
 80023e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023e4:	6413      	str	r3, [r2, #64]	; 0x40
 80023e6:	4b2f      	ldr	r3, [pc, #188]	; (80024a4 <HAL_I2C_MspInit+0x12c>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80023f2:	e050      	b.n	8002496 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C2)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a2c      	ldr	r2, [pc, #176]	; (80024ac <HAL_I2C_MspInit+0x134>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d14b      	bne.n	8002496 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	4b28      	ldr	r3, [pc, #160]	; (80024a4 <HAL_I2C_MspInit+0x12c>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a27      	ldr	r2, [pc, #156]	; (80024a4 <HAL_I2C_MspInit+0x12c>)
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b25      	ldr	r3, [pc, #148]	; (80024a4 <HAL_I2C_MspInit+0x12c>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <HAL_I2C_MspInit+0x12c>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a20      	ldr	r2, [pc, #128]	; (80024a4 <HAL_I2C_MspInit+0x12c>)
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <HAL_I2C_MspInit+0x12c>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800243a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800243c:	2312      	movs	r3, #18
 800243e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002444:	2303      	movs	r3, #3
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002448:	2304      	movs	r3, #4
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244c:	f107 031c 	add.w	r3, r7, #28
 8002450:	4619      	mov	r1, r3
 8002452:	4815      	ldr	r0, [pc, #84]	; (80024a8 <HAL_I2C_MspInit+0x130>)
 8002454:	f001 faf2 	bl	8003a3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800245c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800245e:	2312      	movs	r3, #18
 8002460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002466:	2303      	movs	r3, #3
 8002468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800246a:	2304      	movs	r3, #4
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800246e:	f107 031c 	add.w	r3, r7, #28
 8002472:	4619      	mov	r1, r3
 8002474:	480e      	ldr	r0, [pc, #56]	; (80024b0 <HAL_I2C_MspInit+0x138>)
 8002476:	f001 fae1 	bl	8003a3c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_I2C_MspInit+0x12c>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a08      	ldr	r2, [pc, #32]	; (80024a4 <HAL_I2C_MspInit+0x12c>)
 8002484:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_I2C_MspInit+0x12c>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	68bb      	ldr	r3, [r7, #8]
}
 8002496:	bf00      	nop
 8002498:	3730      	adds	r7, #48	; 0x30
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40005400 	.word	0x40005400
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40020400 	.word	0x40020400
 80024ac:	40005800 	.word	0x40005800
 80024b0:	40020800 	.word	0x40020800

080024b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024b8:	f001 f8e6 	bl	8003688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024bc:	f000 f816 	bl	80024ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024c0:	f7ff fe6c 	bl	800219c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80024c4:	f000 fc16 	bl	8002cf4 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80024c8:	f7ff ff28 	bl	800231c <MX_I2C2_Init>
  MX_TIM2_Init();
 80024cc:	f000 fac6 	bl	8002a5c <MX_TIM2_Init>
  MX_I2C1_Init();
 80024d0:	f7ff fef6 	bl	80022c0 <MX_I2C1_Init>
  MX_TIM3_Init();
 80024d4:	f000 fb0e 	bl	8002af4 <MX_TIM3_Init>
  MX_TIM6_Init();
 80024d8:	f000 fb8a 	bl	8002bf0 <MX_TIM6_Init>
  MX_SPI2_Init();
 80024dc:	f000 f890 	bl	8002600 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80024e0:	f7ff fe04 	bl	80020ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80024e4:	f005 fe14 	bl	8008110 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024e8:	e7fe      	b.n	80024e8 <main+0x34>
	...

080024ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b094      	sub	sp, #80	; 0x50
 80024f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024f2:	f107 031c 	add.w	r3, r7, #28
 80024f6:	2234      	movs	r2, #52	; 0x34
 80024f8:	2100      	movs	r1, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f007 f999 	bl	8009832 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002500:	f107 0308 	add.w	r3, r7, #8
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002510:	2300      	movs	r3, #0
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <SystemClock_Config+0xdc>)
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	4a2b      	ldr	r2, [pc, #172]	; (80025c8 <SystemClock_Config+0xdc>)
 800251a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251e:	6413      	str	r3, [r2, #64]	; 0x40
 8002520:	4b29      	ldr	r3, [pc, #164]	; (80025c8 <SystemClock_Config+0xdc>)
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800252c:	2300      	movs	r3, #0
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	4b26      	ldr	r3, [pc, #152]	; (80025cc <SystemClock_Config+0xe0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a25      	ldr	r2, [pc, #148]	; (80025cc <SystemClock_Config+0xe0>)
 8002536:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	4b23      	ldr	r3, [pc, #140]	; (80025cc <SystemClock_Config+0xe0>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002544:	603b      	str	r3, [r7, #0]
 8002546:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002548:	2302      	movs	r3, #2
 800254a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800254c:	2301      	movs	r3, #1
 800254e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002550:	2310      	movs	r3, #16
 8002552:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002554:	2302      	movs	r3, #2
 8002556:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002558:	2300      	movs	r3, #0
 800255a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800255c:	2308      	movs	r3, #8
 800255e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002560:	23b4      	movs	r3, #180	; 0xb4
 8002562:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002564:	2302      	movs	r3, #2
 8002566:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002568:	2303      	movs	r3, #3
 800256a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800256c:	2302      	movs	r3, #2
 800256e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002570:	f107 031c 	add.w	r3, r7, #28
 8002574:	4618      	mov	r0, r3
 8002576:	f003 fc29 	bl	8005dcc <HAL_RCC_OscConfig>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002580:	f000 f838 	bl	80025f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002584:	f003 f856 	bl	8005634 <HAL_PWREx_EnableOverDrive>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800258e:	f000 f831 	bl	80025f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002592:	230f      	movs	r3, #15
 8002594:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002596:	2302      	movs	r3, #2
 8002598:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800259e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025aa:	f107 0308 	add.w	r3, r7, #8
 80025ae:	2105      	movs	r1, #5
 80025b0:	4618      	mov	r0, r3
 80025b2:	f003 f88f 	bl	80056d4 <HAL_RCC_ClockConfig>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80025bc:	f000 f81a 	bl	80025f4 <Error_Handler>
  }
}
 80025c0:	bf00      	nop
 80025c2:	3750      	adds	r7, #80	; 0x50
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40007000 	.word	0x40007000

080025d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d101      	bne.n	80025e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80025e2:	f001 f873 	bl	80036cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40010000 	.word	0x40010000

080025f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025f8:	b672      	cpsid	i
}
 80025fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025fc:	e7fe      	b.n	80025fc <Error_Handler+0x8>
	...

08002600 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002604:	4b17      	ldr	r3, [pc, #92]	; (8002664 <MX_SPI2_Init+0x64>)
 8002606:	4a18      	ldr	r2, [pc, #96]	; (8002668 <MX_SPI2_Init+0x68>)
 8002608:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800260a:	4b16      	ldr	r3, [pc, #88]	; (8002664 <MX_SPI2_Init+0x64>)
 800260c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002610:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002612:	4b14      	ldr	r3, [pc, #80]	; (8002664 <MX_SPI2_Init+0x64>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002618:	4b12      	ldr	r3, [pc, #72]	; (8002664 <MX_SPI2_Init+0x64>)
 800261a:	2200      	movs	r2, #0
 800261c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800261e:	4b11      	ldr	r3, [pc, #68]	; (8002664 <MX_SPI2_Init+0x64>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002624:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <MX_SPI2_Init+0x64>)
 8002626:	2200      	movs	r2, #0
 8002628:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800262a:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <MX_SPI2_Init+0x64>)
 800262c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002630:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002632:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <MX_SPI2_Init+0x64>)
 8002634:	2220      	movs	r2, #32
 8002636:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002638:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <MX_SPI2_Init+0x64>)
 800263a:	2200      	movs	r2, #0
 800263c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <MX_SPI2_Init+0x64>)
 8002640:	2200      	movs	r2, #0
 8002642:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002644:	4b07      	ldr	r3, [pc, #28]	; (8002664 <MX_SPI2_Init+0x64>)
 8002646:	2200      	movs	r2, #0
 8002648:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <MX_SPI2_Init+0x64>)
 800264c:	220a      	movs	r2, #10
 800264e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002650:	4804      	ldr	r0, [pc, #16]	; (8002664 <MX_SPI2_Init+0x64>)
 8002652:	f003 fe59 	bl	8006308 <HAL_SPI_Init>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800265c:	f7ff ffca 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000530 	.word	0x20000530
 8002668:	40003800 	.word	0x40003800

0800266c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08a      	sub	sp, #40	; 0x28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a30      	ldr	r2, [pc, #192]	; (800274c <HAL_SPI_MspInit+0xe0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d15a      	bne.n	8002744 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	4b2f      	ldr	r3, [pc, #188]	; (8002750 <HAL_SPI_MspInit+0xe4>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	4a2e      	ldr	r2, [pc, #184]	; (8002750 <HAL_SPI_MspInit+0xe4>)
 8002698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800269c:	6413      	str	r3, [r2, #64]	; 0x40
 800269e:	4b2c      	ldr	r3, [pc, #176]	; (8002750 <HAL_SPI_MspInit+0xe4>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	4b28      	ldr	r3, [pc, #160]	; (8002750 <HAL_SPI_MspInit+0xe4>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	4a27      	ldr	r2, [pc, #156]	; (8002750 <HAL_SPI_MspInit+0xe4>)
 80026b4:	f043 0304 	orr.w	r3, r3, #4
 80026b8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ba:	4b25      	ldr	r3, [pc, #148]	; (8002750 <HAL_SPI_MspInit+0xe4>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	4b21      	ldr	r3, [pc, #132]	; (8002750 <HAL_SPI_MspInit+0xe4>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	4a20      	ldr	r2, [pc, #128]	; (8002750 <HAL_SPI_MspInit+0xe4>)
 80026d0:	f043 0302 	orr.w	r3, r3, #2
 80026d4:	6313      	str	r3, [r2, #48]	; 0x30
 80026d6:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <HAL_SPI_MspInit+0xe4>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80026e2:	2302      	movs	r3, #2
 80026e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e6:	2302      	movs	r3, #2
 80026e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ee:	2303      	movs	r3, #3
 80026f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80026f2:	2307      	movs	r3, #7
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026f6:	f107 0314 	add.w	r3, r7, #20
 80026fa:	4619      	mov	r1, r3
 80026fc:	4815      	ldr	r0, [pc, #84]	; (8002754 <HAL_SPI_MspInit+0xe8>)
 80026fe:	f001 f99d 	bl	8003a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002702:	2304      	movs	r3, #4
 8002704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	2302      	movs	r3, #2
 8002708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270e:	2303      	movs	r3, #3
 8002710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002712:	2305      	movs	r3, #5
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002716:	f107 0314 	add.w	r3, r7, #20
 800271a:	4619      	mov	r1, r3
 800271c:	480d      	ldr	r0, [pc, #52]	; (8002754 <HAL_SPI_MspInit+0xe8>)
 800271e:	f001 f98d 	bl	8003a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002730:	2303      	movs	r3, #3
 8002732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002734:	2305      	movs	r3, #5
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002738:	f107 0314 	add.w	r3, r7, #20
 800273c:	4619      	mov	r1, r3
 800273e:	4806      	ldr	r0, [pc, #24]	; (8002758 <HAL_SPI_MspInit+0xec>)
 8002740:	f001 f97c 	bl	8003a3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002744:	bf00      	nop
 8002746:	3728      	adds	r7, #40	; 0x28
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40003800 	.word	0x40003800
 8002750:	40023800 	.word	0x40023800
 8002754:	40020800 	.word	0x40020800
 8002758:	40020400 	.word	0x40020400

0800275c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	607b      	str	r3, [r7, #4]
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_MspInit+0x54>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	4a11      	ldr	r2, [pc, #68]	; (80027b0 <HAL_MspInit+0x54>)
 800276c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002770:	6453      	str	r3, [r2, #68]	; 0x44
 8002772:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <HAL_MspInit+0x54>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	603b      	str	r3, [r7, #0]
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_MspInit+0x54>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <HAL_MspInit+0x54>)
 8002788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800278c:	6413      	str	r3, [r2, #64]	; 0x40
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <HAL_MspInit+0x54>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	210f      	movs	r1, #15
 800279e:	f06f 0001 	mvn.w	r0, #1
 80027a2:	f001 f88f 	bl	80038c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800

080027b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08c      	sub	sp, #48	; 0x30
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80027c4:	2300      	movs	r3, #0
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	4b2f      	ldr	r3, [pc, #188]	; (8002888 <HAL_InitTick+0xd4>)
 80027ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027cc:	4a2e      	ldr	r2, [pc, #184]	; (8002888 <HAL_InitTick+0xd4>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6453      	str	r3, [r2, #68]	; 0x44
 80027d4:	4b2c      	ldr	r3, [pc, #176]	; (8002888 <HAL_InitTick+0xd4>)
 80027d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027e0:	f107 020c 	add.w	r2, r7, #12
 80027e4:	f107 0310 	add.w	r3, r7, #16
 80027e8:	4611      	mov	r1, r2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f003 f88c 	bl	8005908 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80027f0:	f003 f876 	bl	80058e0 <HAL_RCC_GetPCLK2Freq>
 80027f4:	4603      	mov	r3, r0
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fc:	4a23      	ldr	r2, [pc, #140]	; (800288c <HAL_InitTick+0xd8>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	0c9b      	lsrs	r3, r3, #18
 8002804:	3b01      	subs	r3, #1
 8002806:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002808:	4b21      	ldr	r3, [pc, #132]	; (8002890 <HAL_InitTick+0xdc>)
 800280a:	4a22      	ldr	r2, [pc, #136]	; (8002894 <HAL_InitTick+0xe0>)
 800280c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800280e:	4b20      	ldr	r3, [pc, #128]	; (8002890 <HAL_InitTick+0xdc>)
 8002810:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002814:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002816:	4a1e      	ldr	r2, [pc, #120]	; (8002890 <HAL_InitTick+0xdc>)
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800281c:	4b1c      	ldr	r3, [pc, #112]	; (8002890 <HAL_InitTick+0xdc>)
 800281e:	2200      	movs	r2, #0
 8002820:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002822:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <HAL_InitTick+0xdc>)
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002828:	4b19      	ldr	r3, [pc, #100]	; (8002890 <HAL_InitTick+0xdc>)
 800282a:	2200      	movs	r2, #0
 800282c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800282e:	4818      	ldr	r0, [pc, #96]	; (8002890 <HAL_InitTick+0xdc>)
 8002830:	f003 fdf3 	bl	800641a <HAL_TIM_Base_Init>
 8002834:	4603      	mov	r3, r0
 8002836:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800283a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800283e:	2b00      	cmp	r3, #0
 8002840:	d11b      	bne.n	800287a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002842:	4813      	ldr	r0, [pc, #76]	; (8002890 <HAL_InitTick+0xdc>)
 8002844:	f003 fea0 	bl	8006588 <HAL_TIM_Base_Start_IT>
 8002848:	4603      	mov	r3, r0
 800284a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800284e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002852:	2b00      	cmp	r3, #0
 8002854:	d111      	bne.n	800287a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002856:	2019      	movs	r0, #25
 8002858:	f001 f850 	bl	80038fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b0f      	cmp	r3, #15
 8002860:	d808      	bhi.n	8002874 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002862:	2200      	movs	r2, #0
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	2019      	movs	r0, #25
 8002868:	f001 f82c 	bl	80038c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800286c:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <HAL_InitTick+0xe4>)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e002      	b.n	800287a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800287a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800287e:	4618      	mov	r0, r3
 8002880:	3730      	adds	r7, #48	; 0x30
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800
 800288c:	431bde83 	.word	0x431bde83
 8002890:	20000588 	.word	0x20000588
 8002894:	40010000 	.word	0x40010000
 8002898:	20000034 	.word	0x20000034

0800289c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028a0:	e7fe      	b.n	80028a0 <NMI_Handler+0x4>

080028a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028a6:	e7fe      	b.n	80028a6 <HardFault_Handler+0x4>

080028a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028ac:	e7fe      	b.n	80028ac <MemManage_Handler+0x4>

080028ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ae:	b480      	push	{r7}
 80028b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028b2:	e7fe      	b.n	80028b2 <BusFault_Handler+0x4>

080028b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028b8:	e7fe      	b.n	80028b8 <UsageFault_Handler+0x4>

080028ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028cc:	4802      	ldr	r0, [pc, #8]	; (80028d8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80028ce:	f003 ff24 	bl	800671a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000588 	.word	0x20000588

080028dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028e0:	4802      	ldr	r0, [pc, #8]	; (80028ec <USART2_IRQHandler+0x10>)
 80028e2:	f004 fd37 	bl	8007354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	200006ac 	.word	0x200006ac

080028f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	e00a      	b.n	8002918 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002902:	f3af 8000 	nop.w
 8002906:	4601      	mov	r1, r0
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	60ba      	str	r2, [r7, #8]
 800290e:	b2ca      	uxtb	r2, r1
 8002910:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	3301      	adds	r3, #1
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	429a      	cmp	r2, r3
 800291e:	dbf0      	blt.n	8002902 <_read+0x12>
  }

  return len;
 8002920:	687b      	ldr	r3, [r7, #4]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	e009      	b.n	8002950 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	60ba      	str	r2, [r7, #8]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	3301      	adds	r3, #1
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	429a      	cmp	r2, r3
 8002956:	dbf1      	blt.n	800293c <_write+0x12>
  }
  return len;
 8002958:	687b      	ldr	r3, [r7, #4]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <_close>:

int _close(int file)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800296a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800298a:	605a      	str	r2, [r3, #4]
  return 0;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <_isatty>:

int _isatty(int file)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029a2:	2301      	movs	r3, #1
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029d4:	4a14      	ldr	r2, [pc, #80]	; (8002a28 <_sbrk+0x5c>)
 80029d6:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <_sbrk+0x60>)
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029e0:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <_sbrk+0x64>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d102      	bne.n	80029ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029e8:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <_sbrk+0x64>)
 80029ea:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <_sbrk+0x68>)
 80029ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <_sbrk+0x64>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4413      	add	r3, r2
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d207      	bcs.n	8002a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029fc:	f006 fdf6 	bl	80095ec <__errno>
 8002a00:	4603      	mov	r3, r0
 8002a02:	220c      	movs	r2, #12
 8002a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a06:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0a:	e009      	b.n	8002a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a0c:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <_sbrk+0x64>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a12:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <_sbrk+0x64>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4413      	add	r3, r2
 8002a1a:	4a05      	ldr	r2, [pc, #20]	; (8002a30 <_sbrk+0x64>)
 8002a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20020000 	.word	0x20020000
 8002a2c:	00000400 	.word	0x00000400
 8002a30:	200005d0 	.word	0x200005d0
 8002a34:	2000b9b0 	.word	0x2000b9b0

08002a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <SystemInit+0x20>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a42:	4a05      	ldr	r2, [pc, #20]	; (8002a58 <SystemInit+0x20>)
 8002a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a62:	f107 0308 	add.w	r3, r7, #8
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	605a      	str	r2, [r3, #4]
 8002a6c:	609a      	str	r2, [r3, #8]
 8002a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a70:	463b      	mov	r3, r7
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a78:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <MX_TIM2_Init+0x94>)
 8002a7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8002a80:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <MX_TIM2_Init+0x94>)
 8002a82:	22b3      	movs	r2, #179	; 0xb3
 8002a84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a86:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <MX_TIM2_Init+0x94>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8002a8c:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <MX_TIM2_Init+0x94>)
 8002a8e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a94:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <MX_TIM2_Init+0x94>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <MX_TIM2_Init+0x94>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002aa0:	4813      	ldr	r0, [pc, #76]	; (8002af0 <MX_TIM2_Init+0x94>)
 8002aa2:	f003 fcba 	bl	800641a <HAL_TIM_Base_Init>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002aac:	f7ff fda2 	bl	80025f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ab6:	f107 0308 	add.w	r3, r7, #8
 8002aba:	4619      	mov	r1, r3
 8002abc:	480c      	ldr	r0, [pc, #48]	; (8002af0 <MX_TIM2_Init+0x94>)
 8002abe:	f003 ff91 	bl	80069e4 <HAL_TIM_ConfigClockSource>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002ac8:	f7ff fd94 	bl	80025f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002acc:	2300      	movs	r3, #0
 8002ace:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ad4:	463b      	mov	r3, r7
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4805      	ldr	r0, [pc, #20]	; (8002af0 <MX_TIM2_Init+0x94>)
 8002ada:	f004 fb5d 	bl	8007198 <HAL_TIMEx_MasterConfigSynchronization>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002ae4:	f7ff fd86 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ae8:	bf00      	nop
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	200005d4 	.word	0x200005d4

08002af4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08e      	sub	sp, #56	; 0x38
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002afa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	609a      	str	r2, [r3, #8]
 8002b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b08:	f107 0320 	add.w	r3, r7, #32
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b12:	1d3b      	adds	r3, r7, #4
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	611a      	str	r2, [r3, #16]
 8002b20:	615a      	str	r2, [r3, #20]
 8002b22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b24:	4b30      	ldr	r3, [pc, #192]	; (8002be8 <MX_TIM3_Init+0xf4>)
 8002b26:	4a31      	ldr	r2, [pc, #196]	; (8002bec <MX_TIM3_Init+0xf8>)
 8002b28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 180-1;
 8002b2a:	4b2f      	ldr	r3, [pc, #188]	; (8002be8 <MX_TIM3_Init+0xf4>)
 8002b2c:	22b3      	movs	r2, #179	; 0xb3
 8002b2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b30:	4b2d      	ldr	r3, [pc, #180]	; (8002be8 <MX_TIM3_Init+0xf4>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002b36:	4b2c      	ldr	r3, [pc, #176]	; (8002be8 <MX_TIM3_Init+0xf4>)
 8002b38:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b3e:	4b2a      	ldr	r3, [pc, #168]	; (8002be8 <MX_TIM3_Init+0xf4>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b44:	4b28      	ldr	r3, [pc, #160]	; (8002be8 <MX_TIM3_Init+0xf4>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b4a:	4827      	ldr	r0, [pc, #156]	; (8002be8 <MX_TIM3_Init+0xf4>)
 8002b4c:	f003 fc65 	bl	800641a <HAL_TIM_Base_Init>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002b56:	f7ff fd4d 	bl	80025f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b64:	4619      	mov	r1, r3
 8002b66:	4820      	ldr	r0, [pc, #128]	; (8002be8 <MX_TIM3_Init+0xf4>)
 8002b68:	f003 ff3c 	bl	80069e4 <HAL_TIM_ConfigClockSource>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002b72:	f7ff fd3f 	bl	80025f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002b76:	481c      	ldr	r0, [pc, #112]	; (8002be8 <MX_TIM3_Init+0xf4>)
 8002b78:	f003 fd76 	bl	8006668 <HAL_TIM_OC_Init>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002b82:	f7ff fd37 	bl	80025f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b86:	2300      	movs	r3, #0
 8002b88:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b8e:	f107 0320 	add.w	r3, r7, #32
 8002b92:	4619      	mov	r1, r3
 8002b94:	4814      	ldr	r0, [pc, #80]	; (8002be8 <MX_TIM3_Init+0xf4>)
 8002b96:	f004 faff 	bl	8007198 <HAL_TIMEx_MasterConfigSynchronization>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002ba0:	f7ff fd28 	bl	80025f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	4619      	mov	r1, r3
 8002bba:	480b      	ldr	r0, [pc, #44]	; (8002be8 <MX_TIM3_Init+0xf4>)
 8002bbc:	f003 feb6 	bl	800692c <HAL_TIM_OC_ConfigChannel>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002bc6:	f7ff fd15 	bl	80025f4 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bca:	1d3b      	adds	r3, r7, #4
 8002bcc:	2204      	movs	r2, #4
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4805      	ldr	r0, [pc, #20]	; (8002be8 <MX_TIM3_Init+0xf4>)
 8002bd2:	f003 feab 	bl	800692c <HAL_TIM_OC_ConfigChannel>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002bdc:	f7ff fd0a 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002be0:	bf00      	nop
 8002be2:	3738      	adds	r7, #56	; 0x38
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	2000061c 	.word	0x2000061c
 8002bec:	40000400 	.word	0x40000400

08002bf0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bf6:	463b      	mov	r3, r7
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002bfe:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <MX_TIM6_Init+0x64>)
 8002c00:	4a15      	ldr	r2, [pc, #84]	; (8002c58 <MX_TIM6_Init+0x68>)
 8002c02:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9000-1;
 8002c04:	4b13      	ldr	r3, [pc, #76]	; (8002c54 <MX_TIM6_Init+0x64>)
 8002c06:	f242 3227 	movw	r2, #8999	; 0x2327
 8002c0a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c0c:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <MX_TIM6_Init+0x64>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002c12:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <MX_TIM6_Init+0x64>)
 8002c14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c18:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c1a:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <MX_TIM6_Init+0x64>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c20:	480c      	ldr	r0, [pc, #48]	; (8002c54 <MX_TIM6_Init+0x64>)
 8002c22:	f003 fbfa 	bl	800641a <HAL_TIM_Base_Init>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002c2c:	f7ff fce2 	bl	80025f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c30:	2300      	movs	r3, #0
 8002c32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c34:	2300      	movs	r3, #0
 8002c36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c38:	463b      	mov	r3, r7
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4805      	ldr	r0, [pc, #20]	; (8002c54 <MX_TIM6_Init+0x64>)
 8002c3e:	f004 faab 	bl	8007198 <HAL_TIMEx_MasterConfigSynchronization>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002c48:	f7ff fcd4 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20000664 	.word	0x20000664
 8002c58:	40001000 	.word	0x40001000

08002c5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c6c:	d10e      	bne.n	8002c8c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <HAL_TIM_Base_MspInit+0x8c>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	4a1c      	ldr	r2, [pc, #112]	; (8002ce8 <HAL_TIM_Base_MspInit+0x8c>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <HAL_TIM_Base_MspInit+0x8c>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002c8a:	e026      	b.n	8002cda <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a16      	ldr	r2, [pc, #88]	; (8002cec <HAL_TIM_Base_MspInit+0x90>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d10e      	bne.n	8002cb4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <HAL_TIM_Base_MspInit+0x8c>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4a12      	ldr	r2, [pc, #72]	; (8002ce8 <HAL_TIM_Base_MspInit+0x8c>)
 8002ca0:	f043 0302 	orr.w	r3, r3, #2
 8002ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca6:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <HAL_TIM_Base_MspInit+0x8c>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	693b      	ldr	r3, [r7, #16]
}
 8002cb2:	e012      	b.n	8002cda <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM6)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a0d      	ldr	r2, [pc, #52]	; (8002cf0 <HAL_TIM_Base_MspInit+0x94>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d10d      	bne.n	8002cda <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <HAL_TIM_Base_MspInit+0x8c>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	4a08      	ldr	r2, [pc, #32]	; (8002ce8 <HAL_TIM_Base_MspInit+0x8c>)
 8002cc8:	f043 0310 	orr.w	r3, r3, #16
 8002ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_TIM_Base_MspInit+0x8c>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
}
 8002cda:	bf00      	nop
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40000400 	.word	0x40000400
 8002cf0:	40001000 	.word	0x40001000

08002cf4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cf8:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <MX_USART2_UART_Init+0x4c>)
 8002cfa:	4a12      	ldr	r2, [pc, #72]	; (8002d44 <MX_USART2_UART_Init+0x50>)
 8002cfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cfe:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <MX_USART2_UART_Init+0x4c>)
 8002d00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d06:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <MX_USART2_UART_Init+0x4c>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <MX_USART2_UART_Init+0x4c>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d12:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <MX_USART2_UART_Init+0x4c>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d18:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <MX_USART2_UART_Init+0x4c>)
 8002d1a:	220c      	movs	r2, #12
 8002d1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d1e:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <MX_USART2_UART_Init+0x4c>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <MX_USART2_UART_Init+0x4c>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d2a:	4805      	ldr	r0, [pc, #20]	; (8002d40 <MX_USART2_UART_Init+0x4c>)
 8002d2c:	f004 fac4 	bl	80072b8 <HAL_UART_Init>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d36:	f7ff fc5d 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	200006ac 	.word	0x200006ac
 8002d44:	40004400 	.word	0x40004400

08002d48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08a      	sub	sp, #40	; 0x28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a1d      	ldr	r2, [pc, #116]	; (8002ddc <HAL_UART_MspInit+0x94>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d133      	bne.n	8002dd2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	4b1c      	ldr	r3, [pc, #112]	; (8002de0 <HAL_UART_MspInit+0x98>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	4a1b      	ldr	r2, [pc, #108]	; (8002de0 <HAL_UART_MspInit+0x98>)
 8002d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d78:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7a:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <HAL_UART_MspInit+0x98>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <HAL_UART_MspInit+0x98>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <HAL_UART_MspInit+0x98>)
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	6313      	str	r3, [r2, #48]	; 0x30
 8002d96:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <HAL_UART_MspInit+0x98>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002da2:	230c      	movs	r3, #12
 8002da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da6:	2302      	movs	r3, #2
 8002da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dae:	2303      	movs	r3, #3
 8002db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002db2:	2307      	movs	r3, #7
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db6:	f107 0314 	add.w	r3, r7, #20
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4809      	ldr	r0, [pc, #36]	; (8002de4 <HAL_UART_MspInit+0x9c>)
 8002dbe:	f000 fe3d 	bl	8003a3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2105      	movs	r1, #5
 8002dc6:	2026      	movs	r0, #38	; 0x26
 8002dc8:	f000 fd7c 	bl	80038c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002dcc:	2026      	movs	r0, #38	; 0x26
 8002dce:	f000 fd95 	bl	80038fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	3728      	adds	r7, #40	; 0x28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40004400 	.word	0x40004400
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40020000 	.word	0x40020000

08002de8 <ms5611_config>:
static int32_t pressure;
static float altitude_m;

void (*ms5611_delay)(int ms);

void ms5611_config(I2C_HandleTypeDef *i2c,uint8_t addr, uint8_t osr, void(*delay_func)(int ms)){
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	607b      	str	r3, [r7, #4]
 8002df2:	460b      	mov	r3, r1
 8002df4:	72fb      	strb	r3, [r7, #11]
 8002df6:	4613      	mov	r3, r2
 8002df8:	72bb      	strb	r3, [r7, #10]

	ms5611_i2c = i2c;
 8002dfa:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <ms5611_config+0x34>)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6013      	str	r3, [r2, #0]
	ms5611_addr = addr;
 8002e00:	4a07      	ldr	r2, [pc, #28]	; (8002e20 <ms5611_config+0x38>)
 8002e02:	7afb      	ldrb	r3, [r7, #11]
 8002e04:	7013      	strb	r3, [r2, #0]
	ms5611_setOSR(osr);
 8002e06:	7abb      	ldrb	r3, [r7, #10]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 fbc1 	bl	8003590 <ms5611_setOSR>
	(ms5611_delay) = (delay_func);
 8002e0e:	4a05      	ldr	r2, [pc, #20]	; (8002e24 <ms5611_config+0x3c>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6013      	str	r3, [r2, #0]
}
 8002e14:	bf00      	nop
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	200006f0 	.word	0x200006f0
 8002e20:	200006f4 	.word	0x200006f4
 8002e24:	20000710 	.word	0x20000710

08002e28 <ms5611_i2c_write_byte>:

void ms5611_i2c_write_byte(uint8_t reg, uint8_t data) {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af04      	add	r7, sp, #16
 8002e2e:	4603      	mov	r3, r0
 8002e30:	460a      	mov	r2, r1
 8002e32:	71fb      	strb	r3, [r7, #7]
 8002e34:	4613      	mov	r3, r2
 8002e36:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Write(ms5611_i2c, ms5611_addr << 1, reg,
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <ms5611_i2c_write_byte+0x40>)
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <ms5611_i2c_write_byte+0x44>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	b299      	uxth	r1, r3
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	2364      	movs	r3, #100	; 0x64
 8002e4c:	9302      	str	r3, [sp, #8]
 8002e4e:	2301      	movs	r3, #1
 8002e50:	9301      	str	r3, [sp, #4]
 8002e52:	1dbb      	adds	r3, r7, #6
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	2301      	movs	r3, #1
 8002e58:	f001 fc06 	bl	8004668 <HAL_I2C_Mem_Write>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	73fb      	strb	r3, [r7, #15]
                      I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
}
 8002e60:	bf00      	nop
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	200006f0 	.word	0x200006f0
 8002e6c:	200006f4 	.word	0x200006f4

08002e70 <ms5611_i2c_read_word>:
    HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Read(ms5611_i2c, ms5611_addr << 1, reg, I2C_MEMADD_SIZE_8BIT,
                     data, 1, 100);
}

uint16_t ms5611_i2c_read_word(uint8_t reg) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af04      	add	r7, sp, #16
 8002e76:	4603      	mov	r3, r0
 8002e78:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Read(ms5611_i2c, ms5611_addr << 1, reg, I2C_MEMADD_SIZE_8BIT,
 8002e7a:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <ms5611_i2c_read_word+0x4c>)
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <ms5611_i2c_read_word+0x50>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	b299      	uxth	r1, r3
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	2364      	movs	r3, #100	; 0x64
 8002e8e:	9302      	str	r3, [sp, #8]
 8002e90:	2302      	movs	r3, #2
 8002e92:	9301      	str	r3, [sp, #4]
 8002e94:	f107 030c 	add.w	r3, r7, #12
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	f001 fcde 	bl	800485c <HAL_I2C_Mem_Read>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	73fb      	strb	r3, [r7, #15]
                     data, 2, 100);
    return (data[0] << 8) | data[1];
 8002ea4:	7b3b      	ldrb	r3, [r7, #12]
 8002ea6:	021b      	lsls	r3, r3, #8
 8002ea8:	b21a      	sxth	r2, r3
 8002eaa:	7b7b      	ldrb	r3, [r7, #13]
 8002eac:	b21b      	sxth	r3, r3
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	b21b      	sxth	r3, r3
 8002eb2:	b29b      	uxth	r3, r3
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	200006f0 	.word	0x200006f0
 8002ec0:	200006f4 	.word	0x200006f4

08002ec4 <ms5611_i2c_read_24bits>:

uint32_t ms5611_i2c_read_24bits(uint8_t reg) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af04      	add	r7, sp, #16
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
    uint8_t data[3];
    HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Read(ms5611_i2c, ms5611_addr << 1, reg, I2C_MEMADD_SIZE_8BIT,
 8002ece:	4b10      	ldr	r3, [pc, #64]	; (8002f10 <ms5611_i2c_read_24bits+0x4c>)
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <ms5611_i2c_read_24bits+0x50>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	b299      	uxth	r1, r3
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	2364      	movs	r3, #100	; 0x64
 8002ee2:	9302      	str	r3, [sp, #8]
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	9301      	str	r3, [sp, #4]
 8002ee8:	f107 030c 	add.w	r3, r7, #12
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	2301      	movs	r3, #1
 8002ef0:	f001 fcb4 	bl	800485c <HAL_I2C_Mem_Read>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	73fb      	strb	r3, [r7, #15]
                     data, 3, 100);
    return (data[0] << 16) | (data[1] << 8) | data[2];
 8002ef8:	7b3b      	ldrb	r3, [r7, #12]
 8002efa:	041a      	lsls	r2, r3, #16
 8002efc:	7b7b      	ldrb	r3, [r7, #13]
 8002efe:	021b      	lsls	r3, r3, #8
 8002f00:	4313      	orrs	r3, r2
 8002f02:	7bba      	ldrb	r2, [r7, #14]
 8002f04:	4313      	orrs	r3, r2
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	200006f0 	.word	0x200006f0
 8002f14:	200006f4 	.word	0x200006f4

08002f18 <ms5611_init>:
//#ifdef USE_OS_DELAY
//    HAL_Delay(time);
//#endif
//}

int ms5611_init() {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
    ms5611_i2c_write_byte(CMD_RESET, CMD_RESET);
 8002f1e:	211e      	movs	r1, #30
 8002f20:	201e      	movs	r0, #30
 8002f22:	f7ff ff81 	bl	8002e28 <ms5611_i2c_write_byte>
    ms5611_delay(3);
 8002f26:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <ms5611_init+0x50>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2003      	movs	r0, #3
 8002f2c:	4798      	blx	r3
    // prom[2] = ms5611_read16bits(CMD_PROM_C3);
    // prom[3] = ms5611_read16bits(CMD_PROM_C4);
    // prom[4] = ms5611_read16bits(CMD_PROM_C5);
    // prom[5] = ms5611_read16bits(CMD_PROM_C6);

    for (int i = 0; i < 6; i++) {
 8002f2e:	2300      	movs	r3, #0
 8002f30:	607b      	str	r3, [r7, #4]
 8002f32:	e010      	b.n	8002f56 <ms5611_init+0x3e>
        prom[i] = ms5611_i2c_read_word(CMD_PROM_C1 + i * 2);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3351      	adds	r3, #81	; 0x51
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff ff96 	bl	8002e70 <ms5611_i2c_read_word>
 8002f44:	4603      	mov	r3, r0
 8002f46:	4619      	mov	r1, r3
 8002f48:	4a08      	ldr	r2, [pc, #32]	; (8002f6c <ms5611_init+0x54>)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 6; i++) {
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3301      	adds	r3, #1
 8002f54:	607b      	str	r3, [r7, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	ddeb      	ble.n	8002f34 <ms5611_init+0x1c>
    }


    return 1;
 8002f5c:	2301      	movs	r3, #1
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000710 	.word	0x20000710
 8002f6c:	200006f8 	.word	0x200006f8

08002f70 <ms5611_read_rawTemp>:

uint32_t ms5611_read_rawTemp() {
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
    ms5611_i2c_write_byte(tempAddr, tempAddr);
 8002f74:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <ms5611_read_rawTemp+0x2c>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	4a08      	ldr	r2, [pc, #32]	; (8002f9c <ms5611_read_rawTemp+0x2c>)
 8002f7a:	7812      	ldrb	r2, [r2, #0]
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff ff52 	bl	8002e28 <ms5611_i2c_write_byte>
    ms5611_delay(convDelay);
 8002f84:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <ms5611_read_rawTemp+0x30>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a06      	ldr	r2, [pc, #24]	; (8002fa4 <ms5611_read_rawTemp+0x34>)
 8002f8a:	7812      	ldrb	r2, [r2, #0]
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4798      	blx	r3
    return ms5611_i2c_read_24bits(0x00);
 8002f90:	2000      	movs	r0, #0
 8002f92:	f7ff ff97 	bl	8002ec4 <ms5611_i2c_read_24bits>
 8002f96:	4603      	mov	r3, r0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20000031 	.word	0x20000031
 8002fa0:	20000710 	.word	0x20000710
 8002fa4:	20000032 	.word	0x20000032

08002fa8 <ms5611_read_rawPress>:

uint32_t ms5611_read_rawPress() {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
    ms5611_i2c_write_byte(pressAddr, pressAddr);
 8002fac:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <ms5611_read_rawPress+0x2c>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	4a08      	ldr	r2, [pc, #32]	; (8002fd4 <ms5611_read_rawPress+0x2c>)
 8002fb2:	7812      	ldrb	r2, [r2, #0]
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff ff36 	bl	8002e28 <ms5611_i2c_write_byte>
    ms5611_delay(convDelay);
 8002fbc:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <ms5611_read_rawPress+0x30>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a06      	ldr	r2, [pc, #24]	; (8002fdc <ms5611_read_rawPress+0x34>)
 8002fc2:	7812      	ldrb	r2, [r2, #0]
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4798      	blx	r3
    return ms5611_i2c_read_24bits(0x00);
 8002fc8:	2000      	movs	r0, #0
 8002fca:	f7ff ff7b 	bl	8002ec4 <ms5611_i2c_read_24bits>
 8002fce:	4603      	mov	r3, r0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000030 	.word	0x20000030
 8002fd8:	20000710 	.word	0x20000710
 8002fdc:	20000032 	.word	0x20000032

08002fe0 <ms5611_calculate>:

void ms5611_calculate() {
 8002fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe4:	b0d4      	sub	sp, #336	; 0x150
 8002fe6:	af00      	add	r7, sp, #0
    float press, r, c;

    // D1 = ms5611_readRawPressure();
    // D2 = ms5611_readRawTemp();

    D1 = ms5611_read_rawPress();
 8002fe8:	f7ff ffde 	bl	8002fa8 <ms5611_read_rawPress>
 8002fec:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
    D2 = ms5611_read_rawTemp();
 8002ff0:	f7ff ffbe 	bl	8002f70 <ms5611_read_rawTemp>
 8002ff4:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130


    dT = D2 - ((long)prom[4] * 256);
 8002ff8:	4b73      	ldr	r3, [pc, #460]	; (80031c8 <ms5611_calculate+0x1e8>)
 8002ffa:	891b      	ldrh	r3, [r3, #8]
 8002ffc:	021b      	lsls	r3, r3, #8
 8002ffe:	461a      	mov	r2, r3
 8003000:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    TEMP = 2000 + ((int64_t)dT * prom[5]) / 8388608;
 800300a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800300e:	17da      	asrs	r2, r3, #31
 8003010:	469a      	mov	sl, r3
 8003012:	4693      	mov	fp, r2
 8003014:	4b6c      	ldr	r3, [pc, #432]	; (80031c8 <ms5611_calculate+0x1e8>)
 8003016:	895b      	ldrh	r3, [r3, #10]
 8003018:	b29b      	uxth	r3, r3
 800301a:	2200      	movs	r2, #0
 800301c:	461c      	mov	r4, r3
 800301e:	4615      	mov	r5, r2
 8003020:	fb04 f20b 	mul.w	r2, r4, fp
 8003024:	fb0a f305 	mul.w	r3, sl, r5
 8003028:	4413      	add	r3, r2
 800302a:	fbaa 8904 	umull	r8, r9, sl, r4
 800302e:	444b      	add	r3, r9
 8003030:	4699      	mov	r9, r3
 8003032:	4642      	mov	r2, r8
 8003034:	464b      	mov	r3, r9
 8003036:	2b00      	cmp	r3, #0
 8003038:	da07      	bge.n	800304a <ms5611_calculate+0x6a>
 800303a:	4964      	ldr	r1, [pc, #400]	; (80031cc <ms5611_calculate+0x1ec>)
 800303c:	1851      	adds	r1, r2, r1
 800303e:	6539      	str	r1, [r7, #80]	; 0x50
 8003040:	f143 0300 	adc.w	r3, r3, #0
 8003044:	657b      	str	r3, [r7, #84]	; 0x54
 8003046:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800304a:	f04f 0000 	mov.w	r0, #0
 800304e:	f04f 0100 	mov.w	r1, #0
 8003052:	0dd0      	lsrs	r0, r2, #23
 8003054:	ea40 2043 	orr.w	r0, r0, r3, lsl #9
 8003058:	15d9      	asrs	r1, r3, #23
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	f512 61fa 	adds.w	r1, r2, #2000	; 0x7d0
 8003062:	64b9      	str	r1, [r7, #72]	; 0x48
 8003064:	f143 0300 	adc.w	r3, r3, #0
 8003068:	64fb      	str	r3, [r7, #76]	; 0x4c
 800306a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800306e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    OFF = (int64_t)prom[1] * 65536 + ((int64_t)prom[3] * dT) / 128;
 8003072:	4b55      	ldr	r3, [pc, #340]	; (80031c8 <ms5611_calculate+0x1e8>)
 8003074:	885b      	ldrh	r3, [r3, #2]
 8003076:	b29b      	uxth	r3, r3
 8003078:	2200      	movs	r2, #0
 800307a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800307e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003082:	f04f 0400 	mov.w	r4, #0
 8003086:	f04f 0500 	mov.w	r5, #0
 800308a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800308e:	4613      	mov	r3, r2
 8003090:	041d      	lsls	r5, r3, #16
 8003092:	460b      	mov	r3, r1
 8003094:	ea45 4513 	orr.w	r5, r5, r3, lsr #16
 8003098:	460b      	mov	r3, r1
 800309a:	041c      	lsls	r4, r3, #16
 800309c:	4b4a      	ldr	r3, [pc, #296]	; (80031c8 <ms5611_calculate+0x1e8>)
 800309e:	88db      	ldrh	r3, [r3, #6]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2200      	movs	r2, #0
 80030a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80030b0:	17da      	asrs	r2, r3, #31
 80030b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030b6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80030ba:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030be:	464b      	mov	r3, r9
 80030c0:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 80030c4:	4652      	mov	r2, sl
 80030c6:	fb02 f203 	mul.w	r2, r2, r3
 80030ca:	465b      	mov	r3, fp
 80030cc:	4641      	mov	r1, r8
 80030ce:	fb01 f303 	mul.w	r3, r1, r3
 80030d2:	4413      	add	r3, r2
 80030d4:	4642      	mov	r2, r8
 80030d6:	4651      	mov	r1, sl
 80030d8:	fba2 1201 	umull	r1, r2, r2, r1
 80030dc:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030e0:	460a      	mov	r2, r1
 80030e2:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80030e6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80030ea:	4413      	add	r3, r2
 80030ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80030f0:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	da07      	bge.n	8003108 <ms5611_calculate+0x128>
 80030f8:	f112 017f 	adds.w	r1, r2, #127	; 0x7f
 80030fc:	6439      	str	r1, [r7, #64]	; 0x40
 80030fe:	f143 0300 	adc.w	r3, r3, #0
 8003102:	647b      	str	r3, [r7, #68]	; 0x44
 8003104:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003108:	f04f 0000 	mov.w	r0, #0
 800310c:	f04f 0100 	mov.w	r1, #0
 8003110:	09d0      	lsrs	r0, r2, #7
 8003112:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8003116:	11d9      	asrs	r1, r3, #7
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	18a1      	adds	r1, r4, r2
 800311e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003120:	eb45 0303 	adc.w	r3, r5, r3
 8003124:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003126:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800312a:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    SENS = (int64_t)prom[0] * 32768 + ((int64_t)prom[2] * dT) / 256;
 800312e:	4b26      	ldr	r3, [pc, #152]	; (80031c8 <ms5611_calculate+0x1e8>)
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	b29b      	uxth	r3, r3
 8003134:	2200      	movs	r2, #0
 8003136:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800313a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800313e:	f04f 0400 	mov.w	r4, #0
 8003142:	f04f 0500 	mov.w	r5, #0
 8003146:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800314a:	4613      	mov	r3, r2
 800314c:	03dd      	lsls	r5, r3, #15
 800314e:	460b      	mov	r3, r1
 8003150:	ea45 4553 	orr.w	r5, r5, r3, lsr #17
 8003154:	460b      	mov	r3, r1
 8003156:	03dc      	lsls	r4, r3, #15
 8003158:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <ms5611_calculate+0x1e8>)
 800315a:	889b      	ldrh	r3, [r3, #4]
 800315c:	b29b      	uxth	r3, r3
 800315e:	2200      	movs	r2, #0
 8003160:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003164:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800316c:	17da      	asrs	r2, r3, #31
 800316e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003172:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003176:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800317a:	464b      	mov	r3, r9
 800317c:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8003180:	4652      	mov	r2, sl
 8003182:	fb02 f203 	mul.w	r2, r2, r3
 8003186:	465b      	mov	r3, fp
 8003188:	4641      	mov	r1, r8
 800318a:	fb01 f303 	mul.w	r3, r1, r3
 800318e:	4413      	add	r3, r2
 8003190:	4642      	mov	r2, r8
 8003192:	4651      	mov	r1, sl
 8003194:	fba2 1201 	umull	r1, r2, r2, r1
 8003198:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800319c:	460a      	mov	r2, r1
 800319e:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80031a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80031a6:	4413      	add	r3, r2
 80031a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031ac:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	da0d      	bge.n	80031d0 <ms5611_calculate+0x1f0>
 80031b4:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 80031b8:	6339      	str	r1, [r7, #48]	; 0x30
 80031ba:	f143 0300 	adc.w	r3, r3, #0
 80031be:	637b      	str	r3, [r7, #52]	; 0x34
 80031c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80031c4:	e004      	b.n	80031d0 <ms5611_calculate+0x1f0>
 80031c6:	bf00      	nop
 80031c8:	200006f8 	.word	0x200006f8
 80031cc:	007fffff 	.word	0x007fffff
 80031d0:	f04f 0000 	mov.w	r0, #0
 80031d4:	f04f 0100 	mov.w	r1, #0
 80031d8:	0a10      	lsrs	r0, r2, #8
 80031da:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80031de:	1219      	asrs	r1, r3, #8
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	18a1      	adds	r1, r4, r2
 80031e6:	62b9      	str	r1, [r7, #40]	; 0x28
 80031e8:	eb45 0303 	adc.w	r3, r5, r3
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ee:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80031f2:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138

    if (TEMP < 2000) {  // second order temperature compensation
 80031f6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80031fa:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 80031fe:	f173 0300 	sbcs.w	r3, r3, #0
 8003202:	f280 80d4 	bge.w	80033ae <ms5611_calculate+0x3ce>
        int64_t T2 = (((int64_t)dT) * dT) >> 31;
 8003206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800320a:	17da      	asrs	r2, r3, #31
 800320c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003210:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003218:	17da      	asrs	r2, r3, #31
 800321a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800321e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003222:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003226:	462b      	mov	r3, r5
 8003228:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800322c:	4642      	mov	r2, r8
 800322e:	fb02 f203 	mul.w	r2, r2, r3
 8003232:	464b      	mov	r3, r9
 8003234:	4621      	mov	r1, r4
 8003236:	fb01 f303 	mul.w	r3, r1, r3
 800323a:	4413      	add	r3, r2
 800323c:	4622      	mov	r2, r4
 800323e:	4641      	mov	r1, r8
 8003240:	fba2 1201 	umull	r1, r2, r2, r1
 8003244:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003248:	460a      	mov	r2, r1
 800324a:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800324e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003252:	4413      	add	r3, r2
 8003254:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003264:	4621      	mov	r1, r4
 8003266:	0fca      	lsrs	r2, r1, #31
 8003268:	4629      	mov	r1, r5
 800326a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800326e:	4629      	mov	r1, r5
 8003270:	17cb      	asrs	r3, r1, #31
 8003272:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
        int64_t Aux_64 = (TEMP - 2000) * (TEMP - 2000);
 8003276:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800327a:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 800327e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8003282:	f143 33ff 	adc.w	r3, r3, #4294967295
 8003286:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800328a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800328e:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 8003292:	67b9      	str	r1, [r7, #120]	; 0x78
 8003294:	f143 33ff 	adc.w	r3, r3, #4294967295
 8003298:	67fb      	str	r3, [r7, #124]	; 0x7c
 800329a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800329e:	462b      	mov	r3, r5
 80032a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032a4:	4642      	mov	r2, r8
 80032a6:	fb02 f203 	mul.w	r2, r2, r3
 80032aa:	464b      	mov	r3, r9
 80032ac:	4621      	mov	r1, r4
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	4622      	mov	r2, r4
 80032b6:	4641      	mov	r1, r8
 80032b8:	fba2 1201 	umull	r1, r2, r2, r1
 80032bc:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80032c0:	460a      	mov	r2, r1
 80032c2:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80032c6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80032ca:	4413      	add	r3, r2
 80032cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032d0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80032d4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80032d8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
        int64_t OFF2 = (5 * Aux_64) >> 1;
 80032dc:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 80032e0:	4622      	mov	r2, r4
 80032e2:	462b      	mov	r3, r5
 80032e4:	f04f 0000 	mov.w	r0, #0
 80032e8:	f04f 0100 	mov.w	r1, #0
 80032ec:	0099      	lsls	r1, r3, #2
 80032ee:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80032f2:	0090      	lsls	r0, r2, #2
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	1911      	adds	r1, r2, r4
 80032fa:	6739      	str	r1, [r7, #112]	; 0x70
 80032fc:	416b      	adcs	r3, r5
 80032fe:	677b      	str	r3, [r7, #116]	; 0x74
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800330c:	4621      	mov	r1, r4
 800330e:	084a      	lsrs	r2, r1, #1
 8003310:	4629      	mov	r1, r5
 8003312:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8003316:	4629      	mov	r1, r5
 8003318:	104b      	asrs	r3, r1, #1
 800331a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
        int64_t SENS2 = (5 * Aux_64) >> 2;
 800331e:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003322:	4622      	mov	r2, r4
 8003324:	462b      	mov	r3, r5
 8003326:	f04f 0000 	mov.w	r0, #0
 800332a:	f04f 0100 	mov.w	r1, #0
 800332e:	0099      	lsls	r1, r3, #2
 8003330:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003334:	0090      	lsls	r0, r2, #2
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	1911      	adds	r1, r2, r4
 800333c:	66b9      	str	r1, [r7, #104]	; 0x68
 800333e:	416b      	adcs	r3, r5
 8003340:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800334e:	4621      	mov	r1, r4
 8003350:	088a      	lsrs	r2, r1, #2
 8003352:	4629      	mov	r1, r5
 8003354:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8003358:	4629      	mov	r1, r5
 800335a:	108b      	asrs	r3, r1, #2
 800335c:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
        TEMP = TEMP - T2;
 8003360:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8003364:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8003368:	1a84      	subs	r4, r0, r2
 800336a:	623c      	str	r4, [r7, #32]
 800336c:	eb61 0303 	sbc.w	r3, r1, r3
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
 8003372:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003376:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
        OFF = OFF - OFF2;
 800337a:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800337e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003382:	1a84      	subs	r4, r0, r2
 8003384:	61bc      	str	r4, [r7, #24]
 8003386:	eb61 0303 	sbc.w	r3, r1, r3
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003390:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
        SENS = SENS - SENS2;
 8003394:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8003398:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800339c:	1a84      	subs	r4, r0, r2
 800339e:	613c      	str	r4, [r7, #16]
 80033a0:	eb61 0303 	sbc.w	r3, r1, r3
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80033aa:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
    }

    P = (D1 * SENS / 2097152 - OFF) / 32768;
 80033ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80033b2:	2200      	movs	r2, #0
 80033b4:	663b      	str	r3, [r7, #96]	; 0x60
 80033b6:	667a      	str	r2, [r7, #100]	; 0x64
 80033b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80033bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80033c0:	462a      	mov	r2, r5
 80033c2:	fb02 f203 	mul.w	r2, r2, r3
 80033c6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80033ca:	4621      	mov	r1, r4
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	4413      	add	r3, r2
 80033d2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80033d6:	4621      	mov	r1, r4
 80033d8:	fba2 1201 	umull	r1, r2, r2, r1
 80033dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80033e0:	460a      	mov	r2, r1
 80033e2:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80033e6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80033ea:	4413      	add	r3, r2
 80033ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80033f0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	da07      	bge.n	8003408 <ms5611_calculate+0x428>
 80033f8:	493f      	ldr	r1, [pc, #252]	; (80034f8 <ms5611_calculate+0x518>)
 80033fa:	1851      	adds	r1, r2, r1
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	f143 0300 	adc.w	r3, r3, #0
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003408:	f04f 0000 	mov.w	r0, #0
 800340c:	f04f 0100 	mov.w	r1, #0
 8003410:	0d50      	lsrs	r0, r2, #21
 8003412:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8003416:	1559      	asrs	r1, r3, #21
 8003418:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800341c:	1a84      	subs	r4, r0, r2
 800341e:	65bc      	str	r4, [r7, #88]	; 0x58
 8003420:	eb61 0303 	sbc.w	r3, r1, r3
 8003424:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003426:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800342a:	2b00      	cmp	r3, #0
 800342c:	da08      	bge.n	8003440 <ms5611_calculate+0x460>
 800342e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003432:	1851      	adds	r1, r2, r1
 8003434:	6039      	str	r1, [r7, #0]
 8003436:	f143 0300 	adc.w	r3, r3, #0
 800343a:	607b      	str	r3, [r7, #4]
 800343c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003440:	f04f 0000 	mov.w	r0, #0
 8003444:	f04f 0100 	mov.w	r1, #0
 8003448:	0bd0      	lsrs	r0, r2, #15
 800344a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 800344e:	13d9      	asrs	r1, r3, #15
 8003450:	e9c7 0140 	strd	r0, r1, [r7, #256]	; 0x100
    temperature = TEMP;
 8003454:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003458:	4a28      	ldr	r2, [pc, #160]	; (80034fc <ms5611_calculate+0x51c>)
 800345a:	6013      	str	r3, [r2, #0]
    pressure = P;
 800345c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003460:	4a27      	ldr	r2, [pc, #156]	; (8003500 <ms5611_calculate+0x520>)
 8003462:	6013      	str	r3, [r2, #0]

    press = (float)pressure;
 8003464:	4b26      	ldr	r3, [pc, #152]	; (8003500 <ms5611_calculate+0x520>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	ee07 3a90 	vmov	s15, r3
 800346c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003470:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc
    r = press / 101325.0;
 8003474:	ed97 7a3f 	vldr	s14, [r7, #252]	; 0xfc
 8003478:	eddf 6a22 	vldr	s13, [pc, #136]	; 8003504 <ms5611_calculate+0x524>
 800347c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003480:	edc7 7a3e 	vstr	s15, [r7, #248]	; 0xf8
    c = 1.0 / 5.255;
 8003484:	4b20      	ldr	r3, [pc, #128]	; (8003508 <ms5611_calculate+0x528>)
 8003486:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    altitude_m = (1 - pow(r, c)) * 44330.77;
 800348a:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800348e:	f7fd f873 	bl	8000578 <__aeabi_f2d>
 8003492:	4604      	mov	r4, r0
 8003494:	460d      	mov	r5, r1
 8003496:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800349a:	f7fd f86d 	bl	8000578 <__aeabi_f2d>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	ec43 2b11 	vmov	d1, r2, r3
 80034a6:	ec45 4b10 	vmov	d0, r4, r5
 80034aa:	f007 f941 	bl	800a730 <pow>
 80034ae:	ec53 2b10 	vmov	r2, r3, d0
 80034b2:	f04f 0000 	mov.w	r0, #0
 80034b6:	4915      	ldr	r1, [pc, #84]	; (800350c <ms5611_calculate+0x52c>)
 80034b8:	f7fc fefe 	bl	80002b8 <__aeabi_dsub>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4610      	mov	r0, r2
 80034c2:	4619      	mov	r1, r3
 80034c4:	a30a      	add	r3, pc, #40	; (adr r3, 80034f0 <ms5611_calculate+0x510>)
 80034c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ca:	f7fd f8ad 	bl	8000628 <__aeabi_dmul>
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	4610      	mov	r0, r2
 80034d4:	4619      	mov	r1, r3
 80034d6:	f7fd fb57 	bl	8000b88 <__aeabi_d2f>
 80034da:	4603      	mov	r3, r0
 80034dc:	4a0c      	ldr	r2, [pc, #48]	; (8003510 <ms5611_calculate+0x530>)
 80034de:	6013      	str	r3, [r2, #0]
}
 80034e0:	bf00      	nop
 80034e2:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 80034e6:	46bd      	mov	sp, r7
 80034e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ec:	f3af 8000 	nop.w
 80034f0:	a3d70a3d 	.word	0xa3d70a3d
 80034f4:	40e5a558 	.word	0x40e5a558
 80034f8:	001fffff 	.word	0x001fffff
 80034fc:	20000704 	.word	0x20000704
 8003500:	20000708 	.word	0x20000708
 8003504:	47c5e680 	.word	0x47c5e680
 8003508:	3e42dcae 	.word	0x3e42dcae
 800350c:	3ff00000 	.word	0x3ff00000
 8003510:	2000070c 	.word	0x2000070c

08003514 <ms5611_getTemperatureAndPressure>:

void ms5611_getTemperatureAndPressure(float *temp, float *press,
                                      float *alt) {
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
    ms5611_calculate();
 8003520:	f7ff fd5e 	bl	8002fe0 <ms5611_calculate>
    // *temperature = (float)temperature / 100.0;
    // *pressure = (float)pressure / 100.0;
    *temp = temperature / 100.0;
 8003524:	4b16      	ldr	r3, [pc, #88]	; (8003580 <ms5611_getTemperatureAndPressure+0x6c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f7fd f813 	bl	8000554 <__aeabi_i2d>
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	4b14      	ldr	r3, [pc, #80]	; (8003584 <ms5611_getTemperatureAndPressure+0x70>)
 8003534:	f7fd f9a2 	bl	800087c <__aeabi_ddiv>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4610      	mov	r0, r2
 800353e:	4619      	mov	r1, r3
 8003540:	f7fd fb22 	bl	8000b88 <__aeabi_d2f>
 8003544:	4602      	mov	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	601a      	str	r2, [r3, #0]
    *press = pressure / 100.0;
 800354a:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <ms5611_getTemperatureAndPressure+0x74>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7fd f800 	bl	8000554 <__aeabi_i2d>
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <ms5611_getTemperatureAndPressure+0x70>)
 800355a:	f7fd f98f 	bl	800087c <__aeabi_ddiv>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4610      	mov	r0, r2
 8003564:	4619      	mov	r1, r3
 8003566:	f7fd fb0f 	bl	8000b88 <__aeabi_d2f>
 800356a:	4602      	mov	r2, r0
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	601a      	str	r2, [r3, #0]
    *alt = altitude_m;
 8003570:	4b06      	ldr	r3, [pc, #24]	; (800358c <ms5611_getTemperatureAndPressure+0x78>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	601a      	str	r2, [r3, #0]
}
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20000704 	.word	0x20000704
 8003584:	40590000 	.word	0x40590000
 8003588:	20000708 	.word	0x20000708
 800358c:	2000070c 	.word	0x2000070c

08003590 <ms5611_setOSR>:

void ms5611_setOSR(OSR osr)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	71fb      	strb	r3, [r7, #7]
	switch(osr)
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	3b01      	subs	r3, #1
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d80a      	bhi.n	80035b8 <ms5611_setOSR+0x28>
 80035a2:	a201      	add	r2, pc, #4	; (adr r2, 80035a8 <ms5611_setOSR+0x18>)
 80035a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a8:	080035cd 	.word	0x080035cd
 80035ac:	080035e1 	.word	0x080035e1
 80035b0:	080035f5 	.word	0x080035f5
 80035b4:	08003609 	.word	0x08003609
	{
		default:
		case OSR_256:
			pressAddr = PRESSURE_OSR_256;
 80035b8:	4b1b      	ldr	r3, [pc, #108]	; (8003628 <ms5611_setOSR+0x98>)
 80035ba:	2240      	movs	r2, #64	; 0x40
 80035bc:	701a      	strb	r2, [r3, #0]
			tempAddr = TEMP_OSR_256;
 80035be:	4b1b      	ldr	r3, [pc, #108]	; (800362c <ms5611_setOSR+0x9c>)
 80035c0:	2250      	movs	r2, #80	; 0x50
 80035c2:	701a      	strb	r2, [r3, #0]
			convDelay = CONVERSION_OSR_256;
 80035c4:	4b1a      	ldr	r3, [pc, #104]	; (8003630 <ms5611_setOSR+0xa0>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	701a      	strb	r2, [r3, #0]
			break;
 80035ca:	e027      	b.n	800361c <ms5611_setOSR+0x8c>
		case OSR_512:
			pressAddr = PRESSURE_OSR_512;
 80035cc:	4b16      	ldr	r3, [pc, #88]	; (8003628 <ms5611_setOSR+0x98>)
 80035ce:	2242      	movs	r2, #66	; 0x42
 80035d0:	701a      	strb	r2, [r3, #0]
			tempAddr = TEMP_OSR_512;
 80035d2:	4b16      	ldr	r3, [pc, #88]	; (800362c <ms5611_setOSR+0x9c>)
 80035d4:	2252      	movs	r2, #82	; 0x52
 80035d6:	701a      	strb	r2, [r3, #0]
			convDelay = CONVERSION_OSR_512;
 80035d8:	4b15      	ldr	r3, [pc, #84]	; (8003630 <ms5611_setOSR+0xa0>)
 80035da:	2202      	movs	r2, #2
 80035dc:	701a      	strb	r2, [r3, #0]
			break;
 80035de:	e01d      	b.n	800361c <ms5611_setOSR+0x8c>
		case OSR_1024:
			pressAddr = PRESSURE_OSR_1024;
 80035e0:	4b11      	ldr	r3, [pc, #68]	; (8003628 <ms5611_setOSR+0x98>)
 80035e2:	2244      	movs	r2, #68	; 0x44
 80035e4:	701a      	strb	r2, [r3, #0]
			tempAddr = TEMP_OSR_1024;
 80035e6:	4b11      	ldr	r3, [pc, #68]	; (800362c <ms5611_setOSR+0x9c>)
 80035e8:	2254      	movs	r2, #84	; 0x54
 80035ea:	701a      	strb	r2, [r3, #0]
			convDelay = CONVERSION_OSR_1024;
 80035ec:	4b10      	ldr	r3, [pc, #64]	; (8003630 <ms5611_setOSR+0xa0>)
 80035ee:	2203      	movs	r2, #3
 80035f0:	701a      	strb	r2, [r3, #0]
			break;
 80035f2:	e013      	b.n	800361c <ms5611_setOSR+0x8c>
		case OSR_2048:
			pressAddr = PRESSURE_OSR_2048;
 80035f4:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <ms5611_setOSR+0x98>)
 80035f6:	2246      	movs	r2, #70	; 0x46
 80035f8:	701a      	strb	r2, [r3, #0]
			tempAddr = TEMP_OSR_2048;
 80035fa:	4b0c      	ldr	r3, [pc, #48]	; (800362c <ms5611_setOSR+0x9c>)
 80035fc:	2256      	movs	r2, #86	; 0x56
 80035fe:	701a      	strb	r2, [r3, #0]
			convDelay = CONVERSION_OSR_2048;
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <ms5611_setOSR+0xa0>)
 8003602:	2206      	movs	r2, #6
 8003604:	701a      	strb	r2, [r3, #0]
			break;
 8003606:	e009      	b.n	800361c <ms5611_setOSR+0x8c>
		case OSR_4096:
			pressAddr = PRESSURE_OSR_4096;
 8003608:	4b07      	ldr	r3, [pc, #28]	; (8003628 <ms5611_setOSR+0x98>)
 800360a:	2248      	movs	r2, #72	; 0x48
 800360c:	701a      	strb	r2, [r3, #0]
			tempAddr = TEMP_OSR_4096;
 800360e:	4b07      	ldr	r3, [pc, #28]	; (800362c <ms5611_setOSR+0x9c>)
 8003610:	2258      	movs	r2, #88	; 0x58
 8003612:	701a      	strb	r2, [r3, #0]
			convDelay = CONVERSION_OSR_4096;
 8003614:	4b06      	ldr	r3, [pc, #24]	; (8003630 <ms5611_setOSR+0xa0>)
 8003616:	220a      	movs	r2, #10
 8003618:	701a      	strb	r2, [r3, #0]
			break;
 800361a:	bf00      	nop
	}
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	20000030 	.word	0x20000030
 800362c:	20000031 	.word	0x20000031
 8003630:	20000032 	.word	0x20000032

08003634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800366c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003638:	480d      	ldr	r0, [pc, #52]	; (8003670 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800363a:	490e      	ldr	r1, [pc, #56]	; (8003674 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800363c:	4a0e      	ldr	r2, [pc, #56]	; (8003678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800363e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003640:	e002      	b.n	8003648 <LoopCopyDataInit>

08003642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003646:	3304      	adds	r3, #4

08003648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800364a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800364c:	d3f9      	bcc.n	8003642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800364e:	4a0b      	ldr	r2, [pc, #44]	; (800367c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003650:	4c0b      	ldr	r4, [pc, #44]	; (8003680 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003654:	e001      	b.n	800365a <LoopFillZerobss>

08003656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003658:	3204      	adds	r2, #4

0800365a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800365a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800365c:	d3fb      	bcc.n	8003656 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800365e:	f7ff f9eb 	bl	8002a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003662:	f006 f8bf 	bl	80097e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003666:	f7fe ff25 	bl	80024b4 <main>
  bx  lr    
 800366a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800366c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003674:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8003678:	0800b928 	.word	0x0800b928
  ldr r2, =_sbss
 800367c:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8003680:	2000b9ac 	.word	0x2000b9ac

08003684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003684:	e7fe      	b.n	8003684 <ADC_IRQHandler>
	...

08003688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800368c:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <HAL_Init+0x40>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a0d      	ldr	r2, [pc, #52]	; (80036c8 <HAL_Init+0x40>)
 8003692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003696:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_Init+0x40>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a0a      	ldr	r2, [pc, #40]	; (80036c8 <HAL_Init+0x40>)
 800369e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036a4:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <HAL_Init+0x40>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a07      	ldr	r2, [pc, #28]	; (80036c8 <HAL_Init+0x40>)
 80036aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036b0:	2003      	movs	r0, #3
 80036b2:	f000 f8fc 	bl	80038ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036b6:	200f      	movs	r0, #15
 80036b8:	f7ff f87c 	bl	80027b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036bc:	f7ff f84e 	bl	800275c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40023c00 	.word	0x40023c00

080036cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036d0:	4b06      	ldr	r3, [pc, #24]	; (80036ec <HAL_IncTick+0x20>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_IncTick+0x24>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4413      	add	r3, r2
 80036dc:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <HAL_IncTick+0x24>)
 80036de:	6013      	str	r3, [r2, #0]
}
 80036e0:	bf00      	nop
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	20000038 	.word	0x20000038
 80036f0:	20000714 	.word	0x20000714

080036f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  return uwTick;
 80036f8:	4b03      	ldr	r3, [pc, #12]	; (8003708 <HAL_GetTick+0x14>)
 80036fa:	681b      	ldr	r3, [r3, #0]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	20000714 	.word	0x20000714

0800370c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003714:	f7ff ffee 	bl	80036f4 <HAL_GetTick>
 8003718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003724:	d005      	beq.n	8003732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003726:	4b0a      	ldr	r3, [pc, #40]	; (8003750 <HAL_Delay+0x44>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4413      	add	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003732:	bf00      	nop
 8003734:	f7ff ffde 	bl	80036f4 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	429a      	cmp	r2, r3
 8003742:	d8f7      	bhi.n	8003734 <HAL_Delay+0x28>
  {
  }
}
 8003744:	bf00      	nop
 8003746:	bf00      	nop
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000038 	.word	0x20000038

08003754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003770:	4013      	ands	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800377c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003786:	4a04      	ldr	r2, [pc, #16]	; (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	60d3      	str	r3, [r2, #12]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <__NVIC_GetPriorityGrouping+0x18>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	f003 0307 	and.w	r3, r3, #7
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	db0b      	blt.n	80037e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	f003 021f 	and.w	r2, r3, #31
 80037d0:	4907      	ldr	r1, [pc, #28]	; (80037f0 <__NVIC_EnableIRQ+0x38>)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	2001      	movs	r0, #1
 80037da:	fa00 f202 	lsl.w	r2, r0, r2
 80037de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	e000e100 	.word	0xe000e100

080037f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	6039      	str	r1, [r7, #0]
 80037fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003804:	2b00      	cmp	r3, #0
 8003806:	db0a      	blt.n	800381e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	b2da      	uxtb	r2, r3
 800380c:	490c      	ldr	r1, [pc, #48]	; (8003840 <__NVIC_SetPriority+0x4c>)
 800380e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003812:	0112      	lsls	r2, r2, #4
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	440b      	add	r3, r1
 8003818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800381c:	e00a      	b.n	8003834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	b2da      	uxtb	r2, r3
 8003822:	4908      	ldr	r1, [pc, #32]	; (8003844 <__NVIC_SetPriority+0x50>)
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	3b04      	subs	r3, #4
 800382c:	0112      	lsls	r2, r2, #4
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	440b      	add	r3, r1
 8003832:	761a      	strb	r2, [r3, #24]
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	e000e100 	.word	0xe000e100
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003848:	b480      	push	{r7}
 800384a:	b089      	sub	sp, #36	; 0x24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f1c3 0307 	rsb	r3, r3, #7
 8003862:	2b04      	cmp	r3, #4
 8003864:	bf28      	it	cs
 8003866:	2304      	movcs	r3, #4
 8003868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	3304      	adds	r3, #4
 800386e:	2b06      	cmp	r3, #6
 8003870:	d902      	bls.n	8003878 <NVIC_EncodePriority+0x30>
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3b03      	subs	r3, #3
 8003876:	e000      	b.n	800387a <NVIC_EncodePriority+0x32>
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800387c:	f04f 32ff 	mov.w	r2, #4294967295
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43da      	mvns	r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	401a      	ands	r2, r3
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003890:	f04f 31ff 	mov.w	r1, #4294967295
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	fa01 f303 	lsl.w	r3, r1, r3
 800389a:	43d9      	mvns	r1, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a0:	4313      	orrs	r3, r2
         );
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3724      	adds	r7, #36	; 0x24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b082      	sub	sp, #8
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7ff ff4c 	bl	8003754 <__NVIC_SetPriorityGrouping>
}
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038d6:	f7ff ff61 	bl	800379c <__NVIC_GetPriorityGrouping>
 80038da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	68b9      	ldr	r1, [r7, #8]
 80038e0:	6978      	ldr	r0, [r7, #20]
 80038e2:	f7ff ffb1 	bl	8003848 <NVIC_EncodePriority>
 80038e6:	4602      	mov	r2, r0
 80038e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ec:	4611      	mov	r1, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff ff80 	bl	80037f4 <__NVIC_SetPriority>
}
 80038f4:	bf00      	nop
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff ff54 	bl	80037b8 <__NVIC_EnableIRQ>
}
 8003910:	bf00      	nop
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003926:	f7ff fee5 	bl	80036f4 <HAL_GetTick>
 800392a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d008      	beq.n	800394a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2280      	movs	r2, #128	; 0x80
 800393c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e052      	b.n	80039f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0216 	bic.w	r2, r2, #22
 8003958:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695a      	ldr	r2, [r3, #20]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003968:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	2b00      	cmp	r3, #0
 8003970:	d103      	bne.n	800397a <HAL_DMA_Abort+0x62>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003976:	2b00      	cmp	r3, #0
 8003978:	d007      	beq.n	800398a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0208 	bic.w	r2, r2, #8
 8003988:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0201 	bic.w	r2, r2, #1
 8003998:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800399a:	e013      	b.n	80039c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800399c:	f7ff feaa 	bl	80036f4 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b05      	cmp	r3, #5
 80039a8:	d90c      	bls.n	80039c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2203      	movs	r2, #3
 80039b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e015      	b.n	80039f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1e4      	bne.n	800399c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d6:	223f      	movs	r2, #63	; 0x3f
 80039d8:	409a      	lsls	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d004      	beq.n	8003a16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2280      	movs	r2, #128	; 0x80
 8003a10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e00c      	b.n	8003a30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2205      	movs	r2, #5
 8003a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0201 	bic.w	r2, r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b089      	sub	sp, #36	; 0x24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	e165      	b.n	8003d24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a58:	2201      	movs	r2, #1
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	f040 8154 	bne.w	8003d1e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d005      	beq.n	8003a8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d130      	bne.n	8003af0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	2203      	movs	r2, #3
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	43db      	mvns	r3, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	f003 0201 	and.w	r2, r3, #1
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d017      	beq.n	8003b2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	2203      	movs	r2, #3
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4013      	ands	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d123      	bne.n	8003b80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	08da      	lsrs	r2, r3, #3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3208      	adds	r2, #8
 8003b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	220f      	movs	r2, #15
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	08da      	lsrs	r2, r3, #3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3208      	adds	r2, #8
 8003b7a:	69b9      	ldr	r1, [r7, #24]
 8003b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 0203 	and.w	r2, r3, #3
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80ae 	beq.w	8003d1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	4b5d      	ldr	r3, [pc, #372]	; (8003d3c <HAL_GPIO_Init+0x300>)
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bca:	4a5c      	ldr	r2, [pc, #368]	; (8003d3c <HAL_GPIO_Init+0x300>)
 8003bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bd2:	4b5a      	ldr	r3, [pc, #360]	; (8003d3c <HAL_GPIO_Init+0x300>)
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bde:	4a58      	ldr	r2, [pc, #352]	; (8003d40 <HAL_GPIO_Init+0x304>)
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	089b      	lsrs	r3, r3, #2
 8003be4:	3302      	adds	r3, #2
 8003be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	220f      	movs	r2, #15
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a4f      	ldr	r2, [pc, #316]	; (8003d44 <HAL_GPIO_Init+0x308>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d025      	beq.n	8003c56 <HAL_GPIO_Init+0x21a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a4e      	ldr	r2, [pc, #312]	; (8003d48 <HAL_GPIO_Init+0x30c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d01f      	beq.n	8003c52 <HAL_GPIO_Init+0x216>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a4d      	ldr	r2, [pc, #308]	; (8003d4c <HAL_GPIO_Init+0x310>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d019      	beq.n	8003c4e <HAL_GPIO_Init+0x212>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a4c      	ldr	r2, [pc, #304]	; (8003d50 <HAL_GPIO_Init+0x314>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d013      	beq.n	8003c4a <HAL_GPIO_Init+0x20e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a4b      	ldr	r2, [pc, #300]	; (8003d54 <HAL_GPIO_Init+0x318>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00d      	beq.n	8003c46 <HAL_GPIO_Init+0x20a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a4a      	ldr	r2, [pc, #296]	; (8003d58 <HAL_GPIO_Init+0x31c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d007      	beq.n	8003c42 <HAL_GPIO_Init+0x206>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a49      	ldr	r2, [pc, #292]	; (8003d5c <HAL_GPIO_Init+0x320>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d101      	bne.n	8003c3e <HAL_GPIO_Init+0x202>
 8003c3a:	2306      	movs	r3, #6
 8003c3c:	e00c      	b.n	8003c58 <HAL_GPIO_Init+0x21c>
 8003c3e:	2307      	movs	r3, #7
 8003c40:	e00a      	b.n	8003c58 <HAL_GPIO_Init+0x21c>
 8003c42:	2305      	movs	r3, #5
 8003c44:	e008      	b.n	8003c58 <HAL_GPIO_Init+0x21c>
 8003c46:	2304      	movs	r3, #4
 8003c48:	e006      	b.n	8003c58 <HAL_GPIO_Init+0x21c>
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e004      	b.n	8003c58 <HAL_GPIO_Init+0x21c>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e002      	b.n	8003c58 <HAL_GPIO_Init+0x21c>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <HAL_GPIO_Init+0x21c>
 8003c56:	2300      	movs	r3, #0
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	f002 0203 	and.w	r2, r2, #3
 8003c5e:	0092      	lsls	r2, r2, #2
 8003c60:	4093      	lsls	r3, r2
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c68:	4935      	ldr	r1, [pc, #212]	; (8003d40 <HAL_GPIO_Init+0x304>)
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	089b      	lsrs	r3, r3, #2
 8003c6e:	3302      	adds	r3, #2
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c76:	4b3a      	ldr	r3, [pc, #232]	; (8003d60 <HAL_GPIO_Init+0x324>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	4013      	ands	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c9a:	4a31      	ldr	r2, [pc, #196]	; (8003d60 <HAL_GPIO_Init+0x324>)
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ca0:	4b2f      	ldr	r3, [pc, #188]	; (8003d60 <HAL_GPIO_Init+0x324>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4013      	ands	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cc4:	4a26      	ldr	r2, [pc, #152]	; (8003d60 <HAL_GPIO_Init+0x324>)
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cca:	4b25      	ldr	r3, [pc, #148]	; (8003d60 <HAL_GPIO_Init+0x324>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cee:	4a1c      	ldr	r2, [pc, #112]	; (8003d60 <HAL_GPIO_Init+0x324>)
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cf4:	4b1a      	ldr	r3, [pc, #104]	; (8003d60 <HAL_GPIO_Init+0x324>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4013      	ands	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d18:	4a11      	ldr	r2, [pc, #68]	; (8003d60 <HAL_GPIO_Init+0x324>)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	3301      	adds	r3, #1
 8003d22:	61fb      	str	r3, [r7, #28]
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	2b0f      	cmp	r3, #15
 8003d28:	f67f ae96 	bls.w	8003a58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d2c:	bf00      	nop
 8003d2e:	bf00      	nop
 8003d30:	3724      	adds	r7, #36	; 0x24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	40013800 	.word	0x40013800
 8003d44:	40020000 	.word	0x40020000
 8003d48:	40020400 	.word	0x40020400
 8003d4c:	40020800 	.word	0x40020800
 8003d50:	40020c00 	.word	0x40020c00
 8003d54:	40021000 	.word	0x40021000
 8003d58:	40021400 	.word	0x40021400
 8003d5c:	40021800 	.word	0x40021800
 8003d60:	40013c00 	.word	0x40013c00

08003d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	807b      	strh	r3, [r7, #2]
 8003d70:	4613      	mov	r3, r2
 8003d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d74:	787b      	ldrb	r3, [r7, #1]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d7a:	887a      	ldrh	r2, [r7, #2]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d80:	e003      	b.n	8003d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d82:	887b      	ldrh	r3, [r7, #2]
 8003d84:	041a      	lsls	r2, r3, #16
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	619a      	str	r2, [r3, #24]
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e12b      	b.n	8004002 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fe fada 	bl	8002378 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2224      	movs	r2, #36	; 0x24
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0201 	bic.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003dfc:	f001 fd5c 	bl	80058b8 <HAL_RCC_GetPCLK1Freq>
 8003e00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	4a81      	ldr	r2, [pc, #516]	; (800400c <HAL_I2C_Init+0x274>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d807      	bhi.n	8003e1c <HAL_I2C_Init+0x84>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4a80      	ldr	r2, [pc, #512]	; (8004010 <HAL_I2C_Init+0x278>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	bf94      	ite	ls
 8003e14:	2301      	movls	r3, #1
 8003e16:	2300      	movhi	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	e006      	b.n	8003e2a <HAL_I2C_Init+0x92>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4a7d      	ldr	r2, [pc, #500]	; (8004014 <HAL_I2C_Init+0x27c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	bf94      	ite	ls
 8003e24:	2301      	movls	r3, #1
 8003e26:	2300      	movhi	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e0e7      	b.n	8004002 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4a78      	ldr	r2, [pc, #480]	; (8004018 <HAL_I2C_Init+0x280>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	0c9b      	lsrs	r3, r3, #18
 8003e3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	4a6a      	ldr	r2, [pc, #424]	; (800400c <HAL_I2C_Init+0x274>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d802      	bhi.n	8003e6c <HAL_I2C_Init+0xd4>
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	e009      	b.n	8003e80 <HAL_I2C_Init+0xe8>
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e72:	fb02 f303 	mul.w	r3, r2, r3
 8003e76:	4a69      	ldr	r2, [pc, #420]	; (800401c <HAL_I2C_Init+0x284>)
 8003e78:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7c:	099b      	lsrs	r3, r3, #6
 8003e7e:	3301      	adds	r3, #1
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	430b      	orrs	r3, r1
 8003e86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	495c      	ldr	r1, [pc, #368]	; (800400c <HAL_I2C_Init+0x274>)
 8003e9c:	428b      	cmp	r3, r1
 8003e9e:	d819      	bhi.n	8003ed4 <HAL_I2C_Init+0x13c>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	1e59      	subs	r1, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eae:	1c59      	adds	r1, r3, #1
 8003eb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003eb4:	400b      	ands	r3, r1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_I2C_Init+0x138>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1e59      	subs	r1, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ec8:	3301      	adds	r3, #1
 8003eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ece:	e051      	b.n	8003f74 <HAL_I2C_Init+0x1dc>
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	e04f      	b.n	8003f74 <HAL_I2C_Init+0x1dc>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d111      	bne.n	8003f00 <HAL_I2C_Init+0x168>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	1e58      	subs	r0, r3, #1
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6859      	ldr	r1, [r3, #4]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	440b      	add	r3, r1
 8003eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eee:	3301      	adds	r3, #1
 8003ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	bf0c      	ite	eq
 8003ef8:	2301      	moveq	r3, #1
 8003efa:	2300      	movne	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	e012      	b.n	8003f26 <HAL_I2C_Init+0x18e>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	1e58      	subs	r0, r3, #1
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6859      	ldr	r1, [r3, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	0099      	lsls	r1, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f16:	3301      	adds	r3, #1
 8003f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	bf0c      	ite	eq
 8003f20:	2301      	moveq	r3, #1
 8003f22:	2300      	movne	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <HAL_I2C_Init+0x196>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e022      	b.n	8003f74 <HAL_I2C_Init+0x1dc>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10e      	bne.n	8003f54 <HAL_I2C_Init+0x1bc>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	1e58      	subs	r0, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6859      	ldr	r1, [r3, #4]
 8003f3e:	460b      	mov	r3, r1
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	440b      	add	r3, r1
 8003f44:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f48:	3301      	adds	r3, #1
 8003f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f52:	e00f      	b.n	8003f74 <HAL_I2C_Init+0x1dc>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	1e58      	subs	r0, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6859      	ldr	r1, [r3, #4]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	0099      	lsls	r1, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	6809      	ldr	r1, [r1, #0]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69da      	ldr	r2, [r3, #28]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fa2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6911      	ldr	r1, [r2, #16]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	68d2      	ldr	r2, [r2, #12]
 8003fae:	4311      	orrs	r1, r2
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6812      	ldr	r2, [r2, #0]
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695a      	ldr	r2, [r3, #20]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0201 	orr.w	r2, r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	000186a0 	.word	0x000186a0
 8004010:	001e847f 	.word	0x001e847f
 8004014:	003d08ff 	.word	0x003d08ff
 8004018:	431bde83 	.word	0x431bde83
 800401c:	10624dd3 	.word	0x10624dd3

08004020 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b088      	sub	sp, #32
 8004024:	af02      	add	r7, sp, #8
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	607a      	str	r2, [r7, #4]
 800402a:	461a      	mov	r2, r3
 800402c:	460b      	mov	r3, r1
 800402e:	817b      	strh	r3, [r7, #10]
 8004030:	4613      	mov	r3, r2
 8004032:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004034:	f7ff fb5e 	bl	80036f4 <HAL_GetTick>
 8004038:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b20      	cmp	r3, #32
 8004044:	f040 80e0 	bne.w	8004208 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	2319      	movs	r3, #25
 800404e:	2201      	movs	r2, #1
 8004050:	4970      	ldr	r1, [pc, #448]	; (8004214 <HAL_I2C_Master_Transmit+0x1f4>)
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f001 f910 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800405e:	2302      	movs	r3, #2
 8004060:	e0d3      	b.n	800420a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_I2C_Master_Transmit+0x50>
 800406c:	2302      	movs	r3, #2
 800406e:	e0cc      	b.n	800420a <HAL_I2C_Master_Transmit+0x1ea>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b01      	cmp	r3, #1
 8004084:	d007      	beq.n	8004096 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f042 0201 	orr.w	r2, r2, #1
 8004094:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2221      	movs	r2, #33	; 0x21
 80040aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2210      	movs	r2, #16
 80040b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	893a      	ldrh	r2, [r7, #8]
 80040c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4a50      	ldr	r2, [pc, #320]	; (8004218 <HAL_I2C_Master_Transmit+0x1f8>)
 80040d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040d8:	8979      	ldrh	r1, [r7, #10]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	6a3a      	ldr	r2, [r7, #32]
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 fdfc 	bl	8004cdc <I2C_MasterRequestWrite>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e08d      	b.n	800420a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ee:	2300      	movs	r3, #0
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004104:	e066      	b.n	80041d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	6a39      	ldr	r1, [r7, #32]
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f001 f98a 	bl	8005424 <I2C_WaitOnTXEFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00d      	beq.n	8004132 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	2b04      	cmp	r3, #4
 800411c:	d107      	bne.n	800412e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e06b      	b.n	800420a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	781a      	ldrb	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b04      	cmp	r3, #4
 800416e:	d11b      	bne.n	80041a8 <HAL_I2C_Master_Transmit+0x188>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004174:	2b00      	cmp	r3, #0
 8004176:	d017      	beq.n	80041a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	781a      	ldrb	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	6a39      	ldr	r1, [r7, #32]
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f001 f97a 	bl	80054a6 <I2C_WaitOnBTFFlagUntilTimeout>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00d      	beq.n	80041d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d107      	bne.n	80041d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e01a      	b.n	800420a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d194      	bne.n	8004106 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004204:	2300      	movs	r3, #0
 8004206:	e000      	b.n	800420a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004208:	2302      	movs	r3, #2
  }
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	00100002 	.word	0x00100002
 8004218:	ffff0000 	.word	0xffff0000

0800421c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08c      	sub	sp, #48	; 0x30
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	607a      	str	r2, [r7, #4]
 8004226:	461a      	mov	r2, r3
 8004228:	460b      	mov	r3, r1
 800422a:	817b      	strh	r3, [r7, #10]
 800422c:	4613      	mov	r3, r2
 800422e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004230:	f7ff fa60 	bl	80036f4 <HAL_GetTick>
 8004234:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b20      	cmp	r3, #32
 8004240:	f040 820b 	bne.w	800465a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	2319      	movs	r3, #25
 800424a:	2201      	movs	r2, #1
 800424c:	497c      	ldr	r1, [pc, #496]	; (8004440 <HAL_I2C_Master_Receive+0x224>)
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f001 f812 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800425a:	2302      	movs	r3, #2
 800425c:	e1fe      	b.n	800465c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_I2C_Master_Receive+0x50>
 8004268:	2302      	movs	r3, #2
 800426a:	e1f7      	b.n	800465c <HAL_I2C_Master_Receive+0x440>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b01      	cmp	r3, #1
 8004280:	d007      	beq.n	8004292 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0201 	orr.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2222      	movs	r2, #34	; 0x22
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2210      	movs	r2, #16
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	893a      	ldrh	r2, [r7, #8]
 80042c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4a5c      	ldr	r2, [pc, #368]	; (8004444 <HAL_I2C_Master_Receive+0x228>)
 80042d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042d4:	8979      	ldrh	r1, [r7, #10]
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 fd80 	bl	8004de0 <I2C_MasterRequestRead>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e1b8      	b.n	800465c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d113      	bne.n	800431a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f2:	2300      	movs	r3, #0
 80042f4:	623b      	str	r3, [r7, #32]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	623b      	str	r3, [r7, #32]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	623b      	str	r3, [r7, #32]
 8004306:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	e18c      	b.n	8004634 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431e:	2b01      	cmp	r3, #1
 8004320:	d11b      	bne.n	800435a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004330:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	61fb      	str	r3, [r7, #28]
 8004346:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	e16c      	b.n	8004634 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435e:	2b02      	cmp	r3, #2
 8004360:	d11b      	bne.n	800439a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004370:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004380:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004382:	2300      	movs	r3, #0
 8004384:	61bb      	str	r3, [r7, #24]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	61bb      	str	r3, [r7, #24]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	e14c      	b.n	8004634 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80043c0:	e138      	b.n	8004634 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c6:	2b03      	cmp	r3, #3
 80043c8:	f200 80f1 	bhi.w	80045ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d123      	bne.n	800441c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f001 f8a5 	bl	8005528 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e139      	b.n	800465c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691a      	ldr	r2, [r3, #16]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	855a      	strh	r2, [r3, #42]	; 0x2a
 800441a:	e10b      	b.n	8004634 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004420:	2b02      	cmp	r3, #2
 8004422:	d14e      	bne.n	80044c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442a:	2200      	movs	r2, #0
 800442c:	4906      	ldr	r1, [pc, #24]	; (8004448 <HAL_I2C_Master_Receive+0x22c>)
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 ff22 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d008      	beq.n	800444c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e10e      	b.n	800465c <HAL_I2C_Master_Receive+0x440>
 800443e:	bf00      	nop
 8004440:	00100002 	.word	0x00100002
 8004444:	ffff0000 	.word	0xffff0000
 8004448:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800445a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691a      	ldr	r2, [r3, #16]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044c0:	e0b8      	b.n	8004634 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	2200      	movs	r2, #0
 80044ca:	4966      	ldr	r1, [pc, #408]	; (8004664 <HAL_I2C_Master_Receive+0x448>)
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 fed3 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e0bf      	b.n	800465c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691a      	ldr	r2, [r3, #16]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004514:	b29b      	uxth	r3, r3
 8004516:	3b01      	subs	r3, #1
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	2200      	movs	r2, #0
 8004526:	494f      	ldr	r1, [pc, #316]	; (8004664 <HAL_I2C_Master_Receive+0x448>)
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 fea5 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e091      	b.n	800465c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004546:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691a      	ldr	r2, [r3, #16]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004570:	b29b      	uxth	r3, r3
 8004572:	3b01      	subs	r3, #1
 8004574:	b29a      	uxth	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	691a      	ldr	r2, [r3, #16]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004596:	3b01      	subs	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045ac:	e042      	b.n	8004634 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 ffb8 	bl	8005528 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e04c      	b.n	800465c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d118      	bne.n	8004634 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004638:	2b00      	cmp	r3, #0
 800463a:	f47f aec2 	bne.w	80043c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2220      	movs	r2, #32
 8004642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	e000      	b.n	800465c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800465a:	2302      	movs	r3, #2
  }
}
 800465c:	4618      	mov	r0, r3
 800465e:	3728      	adds	r7, #40	; 0x28
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	00010004 	.word	0x00010004

08004668 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af02      	add	r7, sp, #8
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	4608      	mov	r0, r1
 8004672:	4611      	mov	r1, r2
 8004674:	461a      	mov	r2, r3
 8004676:	4603      	mov	r3, r0
 8004678:	817b      	strh	r3, [r7, #10]
 800467a:	460b      	mov	r3, r1
 800467c:	813b      	strh	r3, [r7, #8]
 800467e:	4613      	mov	r3, r2
 8004680:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004682:	f7ff f837 	bl	80036f4 <HAL_GetTick>
 8004686:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b20      	cmp	r3, #32
 8004692:	f040 80d9 	bne.w	8004848 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	2319      	movs	r3, #25
 800469c:	2201      	movs	r2, #1
 800469e:	496d      	ldr	r1, [pc, #436]	; (8004854 <HAL_I2C_Mem_Write+0x1ec>)
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 fde9 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80046ac:	2302      	movs	r3, #2
 80046ae:	e0cc      	b.n	800484a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <HAL_I2C_Mem_Write+0x56>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e0c5      	b.n	800484a <HAL_I2C_Mem_Write+0x1e2>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d007      	beq.n	80046e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2221      	movs	r2, #33	; 0x21
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2240      	movs	r2, #64	; 0x40
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6a3a      	ldr	r2, [r7, #32]
 800470e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004714:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4a4d      	ldr	r2, [pc, #308]	; (8004858 <HAL_I2C_Mem_Write+0x1f0>)
 8004724:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004726:	88f8      	ldrh	r0, [r7, #6]
 8004728:	893a      	ldrh	r2, [r7, #8]
 800472a:	8979      	ldrh	r1, [r7, #10]
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	9301      	str	r3, [sp, #4]
 8004730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	4603      	mov	r3, r0
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 fc20 	bl	8004f7c <I2C_RequestMemoryWrite>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d052      	beq.n	80047e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e081      	b.n	800484a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 fe6a 	bl	8005424 <I2C_WaitOnTXEFlagUntilTimeout>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00d      	beq.n	8004772 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	2b04      	cmp	r3, #4
 800475c:	d107      	bne.n	800476e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800476c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e06b      	b.n	800484a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	781a      	ldrb	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d11b      	bne.n	80047e8 <HAL_I2C_Mem_Write+0x180>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d017      	beq.n	80047e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	781a      	ldrb	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1aa      	bne.n	8004746 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 fe56 	bl	80054a6 <I2C_WaitOnBTFFlagUntilTimeout>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00d      	beq.n	800481c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	2b04      	cmp	r3, #4
 8004806:	d107      	bne.n	8004818 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004816:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e016      	b.n	800484a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800482a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	e000      	b.n	800484a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004848:	2302      	movs	r3, #2
  }
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	00100002 	.word	0x00100002
 8004858:	ffff0000 	.word	0xffff0000

0800485c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08c      	sub	sp, #48	; 0x30
 8004860:	af02      	add	r7, sp, #8
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	4608      	mov	r0, r1
 8004866:	4611      	mov	r1, r2
 8004868:	461a      	mov	r2, r3
 800486a:	4603      	mov	r3, r0
 800486c:	817b      	strh	r3, [r7, #10]
 800486e:	460b      	mov	r3, r1
 8004870:	813b      	strh	r3, [r7, #8]
 8004872:	4613      	mov	r3, r2
 8004874:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004876:	f7fe ff3d 	bl	80036f4 <HAL_GetTick>
 800487a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b20      	cmp	r3, #32
 8004886:	f040 8208 	bne.w	8004c9a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	2319      	movs	r3, #25
 8004890:	2201      	movs	r2, #1
 8004892:	497b      	ldr	r1, [pc, #492]	; (8004a80 <HAL_I2C_Mem_Read+0x224>)
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 fcef 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80048a0:	2302      	movs	r3, #2
 80048a2:	e1fb      	b.n	8004c9c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_I2C_Mem_Read+0x56>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e1f4      	b.n	8004c9c <HAL_I2C_Mem_Read+0x440>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d007      	beq.n	80048d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0201 	orr.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2222      	movs	r2, #34	; 0x22
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2240      	movs	r2, #64	; 0x40
 80048f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004902:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004908:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4a5b      	ldr	r2, [pc, #364]	; (8004a84 <HAL_I2C_Mem_Read+0x228>)
 8004918:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800491a:	88f8      	ldrh	r0, [r7, #6]
 800491c:	893a      	ldrh	r2, [r7, #8]
 800491e:	8979      	ldrh	r1, [r7, #10]
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	9301      	str	r3, [sp, #4]
 8004924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	4603      	mov	r3, r0
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 fbbc 	bl	80050a8 <I2C_RequestMemoryRead>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e1b0      	b.n	8004c9c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493e:	2b00      	cmp	r3, #0
 8004940:	d113      	bne.n	800496a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004942:	2300      	movs	r3, #0
 8004944:	623b      	str	r3, [r7, #32]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	623b      	str	r3, [r7, #32]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	623b      	str	r3, [r7, #32]
 8004956:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	e184      	b.n	8004c74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800496e:	2b01      	cmp	r3, #1
 8004970:	d11b      	bne.n	80049aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004980:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004982:	2300      	movs	r3, #0
 8004984:	61fb      	str	r3, [r7, #28]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	61fb      	str	r3, [r7, #28]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	61fb      	str	r3, [r7, #28]
 8004996:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	e164      	b.n	8004c74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d11b      	bne.n	80049ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049d2:	2300      	movs	r3, #0
 80049d4:	61bb      	str	r3, [r7, #24]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	61bb      	str	r3, [r7, #24]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	61bb      	str	r3, [r7, #24]
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	e144      	b.n	8004c74 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ea:	2300      	movs	r3, #0
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	617b      	str	r3, [r7, #20]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	617b      	str	r3, [r7, #20]
 80049fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004a00:	e138      	b.n	8004c74 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	f200 80f1 	bhi.w	8004bee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d123      	bne.n	8004a5c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 fd85 	bl	8005528 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e139      	b.n	8004c9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	691a      	ldr	r2, [r3, #16]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a5a:	e10b      	b.n	8004c74 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d14e      	bne.n	8004b02 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	4906      	ldr	r1, [pc, #24]	; (8004a88 <HAL_I2C_Mem_Read+0x22c>)
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 fc02 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d008      	beq.n	8004a8c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e10e      	b.n	8004c9c <HAL_I2C_Mem_Read+0x440>
 8004a7e:	bf00      	nop
 8004a80:	00100002 	.word	0x00100002
 8004a84:	ffff0000 	.word	0xffff0000
 8004a88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691a      	ldr	r2, [r3, #16]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aea:	3b01      	subs	r3, #1
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b00:	e0b8      	b.n	8004c74 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b08:	2200      	movs	r2, #0
 8004b0a:	4966      	ldr	r1, [pc, #408]	; (8004ca4 <HAL_I2C_Mem_Read+0x448>)
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 fbb3 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0bf      	b.n	8004c9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691a      	ldr	r2, [r3, #16]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b64:	2200      	movs	r2, #0
 8004b66:	494f      	ldr	r1, [pc, #316]	; (8004ca4 <HAL_I2C_Mem_Read+0x448>)
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 fb85 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e091      	b.n	8004c9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bec:	e042      	b.n	8004c74 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 fc98 	bl	8005528 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e04c      	b.n	8004c9c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	691a      	ldr	r2, [r3, #16]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	b2d2      	uxtb	r2, r2
 8004c0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d118      	bne.n	8004c74 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f47f aec2 	bne.w	8004a02 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	e000      	b.n	8004c9c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004c9a:	2302      	movs	r3, #2
  }
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3728      	adds	r7, #40	; 0x28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	00010004 	.word	0x00010004

08004ca8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb6:	b2db      	uxtb	r3, r3
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af02      	add	r7, sp, #8
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	607a      	str	r2, [r7, #4]
 8004ce6:	603b      	str	r3, [r7, #0]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d006      	beq.n	8004d06 <I2C_MasterRequestWrite+0x2a>
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d003      	beq.n	8004d06 <I2C_MasterRequestWrite+0x2a>
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d04:	d108      	bne.n	8004d18 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	e00b      	b.n	8004d30 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	2b12      	cmp	r3, #18
 8004d1e:	d107      	bne.n	8004d30 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 fa9b 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00d      	beq.n	8004d64 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d56:	d103      	bne.n	8004d60 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e035      	b.n	8004dd0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d6c:	d108      	bne.n	8004d80 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d6e:	897b      	ldrh	r3, [r7, #10]
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	461a      	mov	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d7c:	611a      	str	r2, [r3, #16]
 8004d7e:	e01b      	b.n	8004db8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d80:	897b      	ldrh	r3, [r7, #10]
 8004d82:	11db      	asrs	r3, r3, #7
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	f003 0306 	and.w	r3, r3, #6
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	f063 030f 	orn	r3, r3, #15
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	490e      	ldr	r1, [pc, #56]	; (8004dd8 <I2C_MasterRequestWrite+0xfc>)
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 fac1 	bl	8005326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e010      	b.n	8004dd0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004dae:	897b      	ldrh	r3, [r7, #10]
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	4907      	ldr	r1, [pc, #28]	; (8004ddc <I2C_MasterRequestWrite+0x100>)
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fab1 	bl	8005326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e000      	b.n	8004dd0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	00010008 	.word	0x00010008
 8004ddc:	00010002 	.word	0x00010002

08004de0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	607a      	str	r2, [r7, #4]
 8004dea:	603b      	str	r3, [r7, #0]
 8004dec:	460b      	mov	r3, r1
 8004dee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e04:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d006      	beq.n	8004e1a <I2C_MasterRequestRead+0x3a>
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d003      	beq.n	8004e1a <I2C_MasterRequestRead+0x3a>
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e18:	d108      	bne.n	8004e2c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	e00b      	b.n	8004e44 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e30:	2b11      	cmp	r3, #17
 8004e32:	d107      	bne.n	8004e44 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 fa11 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00d      	beq.n	8004e78 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e6a:	d103      	bne.n	8004e74 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e079      	b.n	8004f6c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e80:	d108      	bne.n	8004e94 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e82:	897b      	ldrh	r3, [r7, #10]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	f043 0301 	orr.w	r3, r3, #1
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	611a      	str	r2, [r3, #16]
 8004e92:	e05f      	b.n	8004f54 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e94:	897b      	ldrh	r3, [r7, #10]
 8004e96:	11db      	asrs	r3, r3, #7
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	f003 0306 	and.w	r3, r3, #6
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	f063 030f 	orn	r3, r3, #15
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	4930      	ldr	r1, [pc, #192]	; (8004f74 <I2C_MasterRequestRead+0x194>)
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 fa37 	bl	8005326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e054      	b.n	8004f6c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ec2:	897b      	ldrh	r3, [r7, #10]
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	4929      	ldr	r1, [pc, #164]	; (8004f78 <I2C_MasterRequestRead+0x198>)
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 fa27 	bl	8005326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e044      	b.n	8004f6c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	613b      	str	r3, [r7, #16]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f06:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f9af 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00d      	beq.n	8004f3c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f2e:	d103      	bne.n	8004f38 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f36:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e017      	b.n	8004f6c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004f3c:	897b      	ldrh	r3, [r7, #10]
 8004f3e:	11db      	asrs	r3, r3, #7
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	f003 0306 	and.w	r3, r3, #6
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	f063 030e 	orn	r3, r3, #14
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	4907      	ldr	r1, [pc, #28]	; (8004f78 <I2C_MasterRequestRead+0x198>)
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 f9e3 	bl	8005326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	00010008 	.word	0x00010008
 8004f78:	00010002 	.word	0x00010002

08004f7c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	4608      	mov	r0, r1
 8004f86:	4611      	mov	r1, r2
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	817b      	strh	r3, [r7, #10]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	813b      	strh	r3, [r7, #8]
 8004f92:	4613      	mov	r3, r2
 8004f94:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fa4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 f960 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00d      	beq.n	8004fda <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fcc:	d103      	bne.n	8004fd6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e05f      	b.n	800509a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fda:	897b      	ldrh	r3, [r7, #10]
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	461a      	mov	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fe8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	6a3a      	ldr	r2, [r7, #32]
 8004fee:	492d      	ldr	r1, [pc, #180]	; (80050a4 <I2C_RequestMemoryWrite+0x128>)
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 f998 	bl	8005326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e04c      	b.n	800509a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005000:	2300      	movs	r3, #0
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005018:	6a39      	ldr	r1, [r7, #32]
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 fa02 	bl	8005424 <I2C_WaitOnTXEFlagUntilTimeout>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00d      	beq.n	8005042 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	2b04      	cmp	r3, #4
 800502c:	d107      	bne.n	800503e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800503c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e02b      	b.n	800509a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005042:	88fb      	ldrh	r3, [r7, #6]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d105      	bne.n	8005054 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005048:	893b      	ldrh	r3, [r7, #8]
 800504a:	b2da      	uxtb	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	611a      	str	r2, [r3, #16]
 8005052:	e021      	b.n	8005098 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005054:	893b      	ldrh	r3, [r7, #8]
 8005056:	0a1b      	lsrs	r3, r3, #8
 8005058:	b29b      	uxth	r3, r3
 800505a:	b2da      	uxtb	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005064:	6a39      	ldr	r1, [r7, #32]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f9dc 	bl	8005424 <I2C_WaitOnTXEFlagUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00d      	beq.n	800508e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	2b04      	cmp	r3, #4
 8005078:	d107      	bne.n	800508a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005088:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e005      	b.n	800509a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800508e:	893b      	ldrh	r3, [r7, #8]
 8005090:	b2da      	uxtb	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	00010002 	.word	0x00010002

080050a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	4608      	mov	r0, r1
 80050b2:	4611      	mov	r1, r2
 80050b4:	461a      	mov	r2, r3
 80050b6:	4603      	mov	r3, r0
 80050b8:	817b      	strh	r3, [r7, #10]
 80050ba:	460b      	mov	r3, r1
 80050bc:	813b      	strh	r3, [r7, #8]
 80050be:	4613      	mov	r3, r2
 80050c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f8c2 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00d      	beq.n	8005116 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005108:	d103      	bne.n	8005112 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005110:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e0aa      	b.n	800526c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005116:	897b      	ldrh	r3, [r7, #10]
 8005118:	b2db      	uxtb	r3, r3
 800511a:	461a      	mov	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005124:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	6a3a      	ldr	r2, [r7, #32]
 800512a:	4952      	ldr	r1, [pc, #328]	; (8005274 <I2C_RequestMemoryRead+0x1cc>)
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 f8fa 	bl	8005326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e097      	b.n	800526c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800513c:	2300      	movs	r3, #0
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005154:	6a39      	ldr	r1, [r7, #32]
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 f964 	bl	8005424 <I2C_WaitOnTXEFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00d      	beq.n	800517e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	2b04      	cmp	r3, #4
 8005168:	d107      	bne.n	800517a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005178:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e076      	b.n	800526c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800517e:	88fb      	ldrh	r3, [r7, #6]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d105      	bne.n	8005190 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005184:	893b      	ldrh	r3, [r7, #8]
 8005186:	b2da      	uxtb	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	611a      	str	r2, [r3, #16]
 800518e:	e021      	b.n	80051d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005190:	893b      	ldrh	r3, [r7, #8]
 8005192:	0a1b      	lsrs	r3, r3, #8
 8005194:	b29b      	uxth	r3, r3
 8005196:	b2da      	uxtb	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800519e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a0:	6a39      	ldr	r1, [r7, #32]
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 f93e 	bl	8005424 <I2C_WaitOnTXEFlagUntilTimeout>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00d      	beq.n	80051ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d107      	bne.n	80051c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e050      	b.n	800526c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051ca:	893b      	ldrh	r3, [r7, #8]
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d6:	6a39      	ldr	r1, [r7, #32]
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 f923 	bl	8005424 <I2C_WaitOnTXEFlagUntilTimeout>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00d      	beq.n	8005200 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d107      	bne.n	80051fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e035      	b.n	800526c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800520e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	2200      	movs	r2, #0
 8005218:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 f82b 	bl	8005278 <I2C_WaitOnFlagUntilTimeout>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00d      	beq.n	8005244 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005236:	d103      	bne.n	8005240 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800523e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e013      	b.n	800526c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005244:	897b      	ldrh	r3, [r7, #10]
 8005246:	b2db      	uxtb	r3, r3
 8005248:	f043 0301 	orr.w	r3, r3, #1
 800524c:	b2da      	uxtb	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	6a3a      	ldr	r2, [r7, #32]
 8005258:	4906      	ldr	r1, [pc, #24]	; (8005274 <I2C_RequestMemoryRead+0x1cc>)
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 f863 	bl	8005326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	00010002 	.word	0x00010002

08005278 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	4613      	mov	r3, r2
 8005286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005288:	e025      	b.n	80052d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005290:	d021      	beq.n	80052d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005292:	f7fe fa2f 	bl	80036f4 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d302      	bcc.n	80052a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d116      	bne.n	80052d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	f043 0220 	orr.w	r2, r3, #32
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e023      	b.n	800531e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	0c1b      	lsrs	r3, r3, #16
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d10d      	bne.n	80052fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	43da      	mvns	r2, r3
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4013      	ands	r3, r2
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	bf0c      	ite	eq
 80052f2:	2301      	moveq	r3, #1
 80052f4:	2300      	movne	r3, #0
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	461a      	mov	r2, r3
 80052fa:	e00c      	b.n	8005316 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	43da      	mvns	r2, r3
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4013      	ands	r3, r2
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	bf0c      	ite	eq
 800530e:	2301      	moveq	r3, #1
 8005310:	2300      	movne	r3, #0
 8005312:	b2db      	uxtb	r3, r3
 8005314:	461a      	mov	r2, r3
 8005316:	79fb      	ldrb	r3, [r7, #7]
 8005318:	429a      	cmp	r2, r3
 800531a:	d0b6      	beq.n	800528a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	60f8      	str	r0, [r7, #12]
 800532e:	60b9      	str	r1, [r7, #8]
 8005330:	607a      	str	r2, [r7, #4]
 8005332:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005334:	e051      	b.n	80053da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005344:	d123      	bne.n	800538e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005354:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800535e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2220      	movs	r2, #32
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	f043 0204 	orr.w	r2, r3, #4
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e046      	b.n	800541c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005394:	d021      	beq.n	80053da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005396:	f7fe f9ad 	bl	80036f4 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d302      	bcc.n	80053ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d116      	bne.n	80053da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2220      	movs	r2, #32
 80053b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	f043 0220 	orr.w	r2, r3, #32
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e020      	b.n	800541c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	0c1b      	lsrs	r3, r3, #16
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d10c      	bne.n	80053fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	43da      	mvns	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4013      	ands	r3, r2
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	bf14      	ite	ne
 80053f6:	2301      	movne	r3, #1
 80053f8:	2300      	moveq	r3, #0
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	e00b      	b.n	8005416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	43da      	mvns	r2, r3
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4013      	ands	r3, r2
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	bf14      	ite	ne
 8005410:	2301      	movne	r3, #1
 8005412:	2300      	moveq	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d18d      	bne.n	8005336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005430:	e02d      	b.n	800548e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 f8ce 	bl	80055d4 <I2C_IsAcknowledgeFailed>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e02d      	b.n	800549e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005448:	d021      	beq.n	800548e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800544a:	f7fe f953 	bl	80036f4 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	429a      	cmp	r2, r3
 8005458:	d302      	bcc.n	8005460 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d116      	bne.n	800548e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2220      	movs	r2, #32
 800546a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	f043 0220 	orr.w	r2, r3, #32
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e007      	b.n	800549e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005498:	2b80      	cmp	r3, #128	; 0x80
 800549a:	d1ca      	bne.n	8005432 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b084      	sub	sp, #16
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054b2:	e02d      	b.n	8005510 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 f88d 	bl	80055d4 <I2C_IsAcknowledgeFailed>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e02d      	b.n	8005520 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ca:	d021      	beq.n	8005510 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054cc:	f7fe f912 	bl	80036f4 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d302      	bcc.n	80054e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d116      	bne.n	8005510 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fc:	f043 0220 	orr.w	r2, r3, #32
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e007      	b.n	8005520 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	2b04      	cmp	r3, #4
 800551c:	d1ca      	bne.n	80054b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005534:	e042      	b.n	80055bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b10      	cmp	r3, #16
 8005542:	d119      	bne.n	8005578 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0210 	mvn.w	r2, #16
 800554c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e029      	b.n	80055cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005578:	f7fe f8bc 	bl	80036f4 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	429a      	cmp	r2, r3
 8005586:	d302      	bcc.n	800558e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d116      	bne.n	80055bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2220      	movs	r2, #32
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a8:	f043 0220 	orr.w	r2, r3, #32
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e007      	b.n	80055cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c6:	2b40      	cmp	r3, #64	; 0x40
 80055c8:	d1b5      	bne.n	8005536 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ea:	d11b      	bne.n	8005624 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2220      	movs	r2, #32
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005610:	f043 0204 	orr.w	r2, r3, #4
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e000      	b.n	8005626 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
	...

08005634 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800563a:	2300      	movs	r3, #0
 800563c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800563e:	2300      	movs	r3, #0
 8005640:	603b      	str	r3, [r7, #0]
 8005642:	4b20      	ldr	r3, [pc, #128]	; (80056c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	4a1f      	ldr	r2, [pc, #124]	; (80056c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800564c:	6413      	str	r3, [r2, #64]	; 0x40
 800564e:	4b1d      	ldr	r3, [pc, #116]	; (80056c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005656:	603b      	str	r3, [r7, #0]
 8005658:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800565a:	4b1b      	ldr	r3, [pc, #108]	; (80056c8 <HAL_PWREx_EnableOverDrive+0x94>)
 800565c:	2201      	movs	r2, #1
 800565e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005660:	f7fe f848 	bl	80036f4 <HAL_GetTick>
 8005664:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005666:	e009      	b.n	800567c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005668:	f7fe f844 	bl	80036f4 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005676:	d901      	bls.n	800567c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e01f      	b.n	80056bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800567c:	4b13      	ldr	r3, [pc, #76]	; (80056cc <HAL_PWREx_EnableOverDrive+0x98>)
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005688:	d1ee      	bne.n	8005668 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800568a:	4b11      	ldr	r3, [pc, #68]	; (80056d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800568c:	2201      	movs	r2, #1
 800568e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005690:	f7fe f830 	bl	80036f4 <HAL_GetTick>
 8005694:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005696:	e009      	b.n	80056ac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005698:	f7fe f82c 	bl	80036f4 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056a6:	d901      	bls.n	80056ac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e007      	b.n	80056bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80056ac:	4b07      	ldr	r3, [pc, #28]	; (80056cc <HAL_PWREx_EnableOverDrive+0x98>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056b8:	d1ee      	bne.n	8005698 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40023800 	.word	0x40023800
 80056c8:	420e0040 	.word	0x420e0040
 80056cc:	40007000 	.word	0x40007000
 80056d0:	420e0044 	.word	0x420e0044

080056d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e0cc      	b.n	8005882 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056e8:	4b68      	ldr	r3, [pc, #416]	; (800588c <HAL_RCC_ClockConfig+0x1b8>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d90c      	bls.n	8005710 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056f6:	4b65      	ldr	r3, [pc, #404]	; (800588c <HAL_RCC_ClockConfig+0x1b8>)
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056fe:	4b63      	ldr	r3, [pc, #396]	; (800588c <HAL_RCC_ClockConfig+0x1b8>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d001      	beq.n	8005710 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e0b8      	b.n	8005882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d020      	beq.n	800575e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b00      	cmp	r3, #0
 8005726:	d005      	beq.n	8005734 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005728:	4b59      	ldr	r3, [pc, #356]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	4a58      	ldr	r2, [pc, #352]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 800572e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005732:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0308 	and.w	r3, r3, #8
 800573c:	2b00      	cmp	r3, #0
 800573e:	d005      	beq.n	800574c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005740:	4b53      	ldr	r3, [pc, #332]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	4a52      	ldr	r2, [pc, #328]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 8005746:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800574a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800574c:	4b50      	ldr	r3, [pc, #320]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	494d      	ldr	r1, [pc, #308]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 800575a:	4313      	orrs	r3, r2
 800575c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d044      	beq.n	80057f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d107      	bne.n	8005782 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005772:	4b47      	ldr	r3, [pc, #284]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d119      	bne.n	80057b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e07f      	b.n	8005882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d003      	beq.n	8005792 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800578e:	2b03      	cmp	r3, #3
 8005790:	d107      	bne.n	80057a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005792:	4b3f      	ldr	r3, [pc, #252]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d109      	bne.n	80057b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e06f      	b.n	8005882 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057a2:	4b3b      	ldr	r3, [pc, #236]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e067      	b.n	8005882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057b2:	4b37      	ldr	r3, [pc, #220]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f023 0203 	bic.w	r2, r3, #3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	4934      	ldr	r1, [pc, #208]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057c4:	f7fd ff96 	bl	80036f4 <HAL_GetTick>
 80057c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ca:	e00a      	b.n	80057e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057cc:	f7fd ff92 	bl	80036f4 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057da:	4293      	cmp	r3, r2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e04f      	b.n	8005882 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057e2:	4b2b      	ldr	r3, [pc, #172]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 020c 	and.w	r2, r3, #12
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d1eb      	bne.n	80057cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057f4:	4b25      	ldr	r3, [pc, #148]	; (800588c <HAL_RCC_ClockConfig+0x1b8>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 030f 	and.w	r3, r3, #15
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d20c      	bcs.n	800581c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005802:	4b22      	ldr	r3, [pc, #136]	; (800588c <HAL_RCC_ClockConfig+0x1b8>)
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800580a:	4b20      	ldr	r3, [pc, #128]	; (800588c <HAL_RCC_ClockConfig+0x1b8>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 030f 	and.w	r3, r3, #15
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d001      	beq.n	800581c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e032      	b.n	8005882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d008      	beq.n	800583a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005828:	4b19      	ldr	r3, [pc, #100]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	4916      	ldr	r1, [pc, #88]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 8005836:	4313      	orrs	r3, r2
 8005838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0308 	and.w	r3, r3, #8
 8005842:	2b00      	cmp	r3, #0
 8005844:	d009      	beq.n	800585a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005846:	4b12      	ldr	r3, [pc, #72]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	490e      	ldr	r1, [pc, #56]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 8005856:	4313      	orrs	r3, r2
 8005858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800585a:	f000 f887 	bl	800596c <HAL_RCC_GetSysClockFreq>
 800585e:	4602      	mov	r2, r0
 8005860:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	091b      	lsrs	r3, r3, #4
 8005866:	f003 030f 	and.w	r3, r3, #15
 800586a:	490a      	ldr	r1, [pc, #40]	; (8005894 <HAL_RCC_ClockConfig+0x1c0>)
 800586c:	5ccb      	ldrb	r3, [r1, r3]
 800586e:	fa22 f303 	lsr.w	r3, r2, r3
 8005872:	4a09      	ldr	r2, [pc, #36]	; (8005898 <HAL_RCC_ClockConfig+0x1c4>)
 8005874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005876:	4b09      	ldr	r3, [pc, #36]	; (800589c <HAL_RCC_ClockConfig+0x1c8>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f7fc ff9a 	bl	80027b4 <HAL_InitTick>

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	40023c00 	.word	0x40023c00
 8005890:	40023800 	.word	0x40023800
 8005894:	0800b838 	.word	0x0800b838
 8005898:	2000002c 	.word	0x2000002c
 800589c:	20000034 	.word	0x20000034

080058a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058a4:	4b03      	ldr	r3, [pc, #12]	; (80058b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80058a6:	681b      	ldr	r3, [r3, #0]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	2000002c 	.word	0x2000002c

080058b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058bc:	f7ff fff0 	bl	80058a0 <HAL_RCC_GetHCLKFreq>
 80058c0:	4602      	mov	r2, r0
 80058c2:	4b05      	ldr	r3, [pc, #20]	; (80058d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	0a9b      	lsrs	r3, r3, #10
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	4903      	ldr	r1, [pc, #12]	; (80058dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80058ce:	5ccb      	ldrb	r3, [r1, r3]
 80058d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	40023800 	.word	0x40023800
 80058dc:	0800b848 	.word	0x0800b848

080058e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058e4:	f7ff ffdc 	bl	80058a0 <HAL_RCC_GetHCLKFreq>
 80058e8:	4602      	mov	r2, r0
 80058ea:	4b05      	ldr	r3, [pc, #20]	; (8005900 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	0b5b      	lsrs	r3, r3, #13
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	4903      	ldr	r1, [pc, #12]	; (8005904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058f6:	5ccb      	ldrb	r3, [r1, r3]
 80058f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40023800 	.word	0x40023800
 8005904:	0800b848 	.word	0x0800b848

08005908 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	220f      	movs	r2, #15
 8005916:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005918:	4b12      	ldr	r3, [pc, #72]	; (8005964 <HAL_RCC_GetClockConfig+0x5c>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 0203 	and.w	r2, r3, #3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005924:	4b0f      	ldr	r3, [pc, #60]	; (8005964 <HAL_RCC_GetClockConfig+0x5c>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005930:	4b0c      	ldr	r3, [pc, #48]	; (8005964 <HAL_RCC_GetClockConfig+0x5c>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800593c:	4b09      	ldr	r3, [pc, #36]	; (8005964 <HAL_RCC_GetClockConfig+0x5c>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	08db      	lsrs	r3, r3, #3
 8005942:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800594a:	4b07      	ldr	r3, [pc, #28]	; (8005968 <HAL_RCC_GetClockConfig+0x60>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 020f 	and.w	r2, r3, #15
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	601a      	str	r2, [r3, #0]
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	40023800 	.word	0x40023800
 8005968:	40023c00 	.word	0x40023c00

0800596c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800596c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005970:	b0ae      	sub	sp, #184	; 0xb8
 8005972:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005974:	2300      	movs	r3, #0
 8005976:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005992:	4bcb      	ldr	r3, [pc, #812]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 030c 	and.w	r3, r3, #12
 800599a:	2b0c      	cmp	r3, #12
 800599c:	f200 8206 	bhi.w	8005dac <HAL_RCC_GetSysClockFreq+0x440>
 80059a0:	a201      	add	r2, pc, #4	; (adr r2, 80059a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80059a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a6:	bf00      	nop
 80059a8:	080059dd 	.word	0x080059dd
 80059ac:	08005dad 	.word	0x08005dad
 80059b0:	08005dad 	.word	0x08005dad
 80059b4:	08005dad 	.word	0x08005dad
 80059b8:	080059e5 	.word	0x080059e5
 80059bc:	08005dad 	.word	0x08005dad
 80059c0:	08005dad 	.word	0x08005dad
 80059c4:	08005dad 	.word	0x08005dad
 80059c8:	080059ed 	.word	0x080059ed
 80059cc:	08005dad 	.word	0x08005dad
 80059d0:	08005dad 	.word	0x08005dad
 80059d4:	08005dad 	.word	0x08005dad
 80059d8:	08005bdd 	.word	0x08005bdd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059dc:	4bb9      	ldr	r3, [pc, #740]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x358>)
 80059de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80059e2:	e1e7      	b.n	8005db4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059e4:	4bb8      	ldr	r3, [pc, #736]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80059e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80059ea:	e1e3      	b.n	8005db4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059ec:	4bb4      	ldr	r3, [pc, #720]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x354>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059f8:	4bb1      	ldr	r3, [pc, #708]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x354>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d071      	beq.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a04:	4bae      	ldr	r3, [pc, #696]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	099b      	lsrs	r3, r3, #6
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a10:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005a14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a20:	2300      	movs	r3, #0
 8005a22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a2a:	4622      	mov	r2, r4
 8005a2c:	462b      	mov	r3, r5
 8005a2e:	f04f 0000 	mov.w	r0, #0
 8005a32:	f04f 0100 	mov.w	r1, #0
 8005a36:	0159      	lsls	r1, r3, #5
 8005a38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a3c:	0150      	lsls	r0, r2, #5
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	4621      	mov	r1, r4
 8005a44:	1a51      	subs	r1, r2, r1
 8005a46:	6439      	str	r1, [r7, #64]	; 0x40
 8005a48:	4629      	mov	r1, r5
 8005a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8005a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	018b      	lsls	r3, r1, #6
 8005a60:	4641      	mov	r1, r8
 8005a62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a66:	4641      	mov	r1, r8
 8005a68:	018a      	lsls	r2, r1, #6
 8005a6a:	4641      	mov	r1, r8
 8005a6c:	1a51      	subs	r1, r2, r1
 8005a6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a70:	4649      	mov	r1, r9
 8005a72:	eb63 0301 	sbc.w	r3, r3, r1
 8005a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a78:	f04f 0200 	mov.w	r2, #0
 8005a7c:	f04f 0300 	mov.w	r3, #0
 8005a80:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005a84:	4649      	mov	r1, r9
 8005a86:	00cb      	lsls	r3, r1, #3
 8005a88:	4641      	mov	r1, r8
 8005a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a8e:	4641      	mov	r1, r8
 8005a90:	00ca      	lsls	r2, r1, #3
 8005a92:	4610      	mov	r0, r2
 8005a94:	4619      	mov	r1, r3
 8005a96:	4603      	mov	r3, r0
 8005a98:	4622      	mov	r2, r4
 8005a9a:	189b      	adds	r3, r3, r2
 8005a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8005a9e:	462b      	mov	r3, r5
 8005aa0:	460a      	mov	r2, r1
 8005aa2:	eb42 0303 	adc.w	r3, r2, r3
 8005aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8005aa8:	f04f 0200 	mov.w	r2, #0
 8005aac:	f04f 0300 	mov.w	r3, #0
 8005ab0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	024b      	lsls	r3, r1, #9
 8005ab8:	4621      	mov	r1, r4
 8005aba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005abe:	4621      	mov	r1, r4
 8005ac0:	024a      	lsls	r2, r1, #9
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005aca:	2200      	movs	r2, #0
 8005acc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ad0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ad4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005ad8:	f7fb f8a6 	bl	8000c28 <__aeabi_uldivmod>
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ae6:	e067      	b.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ae8:	4b75      	ldr	r3, [pc, #468]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	099b      	lsrs	r3, r3, #6
 8005aee:	2200      	movs	r2, #0
 8005af0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005af4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005af8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b00:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b02:	2300      	movs	r3, #0
 8005b04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b06:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005b0a:	4622      	mov	r2, r4
 8005b0c:	462b      	mov	r3, r5
 8005b0e:	f04f 0000 	mov.w	r0, #0
 8005b12:	f04f 0100 	mov.w	r1, #0
 8005b16:	0159      	lsls	r1, r3, #5
 8005b18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b1c:	0150      	lsls	r0, r2, #5
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	4621      	mov	r1, r4
 8005b24:	1a51      	subs	r1, r2, r1
 8005b26:	62b9      	str	r1, [r7, #40]	; 0x28
 8005b28:	4629      	mov	r1, r5
 8005b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8005b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005b3c:	4649      	mov	r1, r9
 8005b3e:	018b      	lsls	r3, r1, #6
 8005b40:	4641      	mov	r1, r8
 8005b42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b46:	4641      	mov	r1, r8
 8005b48:	018a      	lsls	r2, r1, #6
 8005b4a:	4641      	mov	r1, r8
 8005b4c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b50:	4649      	mov	r1, r9
 8005b52:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b56:	f04f 0200 	mov.w	r2, #0
 8005b5a:	f04f 0300 	mov.w	r3, #0
 8005b5e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b62:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b6a:	4692      	mov	sl, r2
 8005b6c:	469b      	mov	fp, r3
 8005b6e:	4623      	mov	r3, r4
 8005b70:	eb1a 0303 	adds.w	r3, sl, r3
 8005b74:	623b      	str	r3, [r7, #32]
 8005b76:	462b      	mov	r3, r5
 8005b78:	eb4b 0303 	adc.w	r3, fp, r3
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7e:	f04f 0200 	mov.w	r2, #0
 8005b82:	f04f 0300 	mov.w	r3, #0
 8005b86:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005b8a:	4629      	mov	r1, r5
 8005b8c:	028b      	lsls	r3, r1, #10
 8005b8e:	4621      	mov	r1, r4
 8005b90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b94:	4621      	mov	r1, r4
 8005b96:	028a      	lsls	r2, r1, #10
 8005b98:	4610      	mov	r0, r2
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	673b      	str	r3, [r7, #112]	; 0x70
 8005ba4:	677a      	str	r2, [r7, #116]	; 0x74
 8005ba6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005baa:	f7fb f83d 	bl	8000c28 <__aeabi_uldivmod>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bb8:	4b41      	ldr	r3, [pc, #260]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	0c1b      	lsrs	r3, r3, #16
 8005bbe:	f003 0303 	and.w	r3, r3, #3
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005bca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005bce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005bda:	e0eb      	b.n	8005db4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bdc:	4b38      	ldr	r3, [pc, #224]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005be4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005be8:	4b35      	ldr	r3, [pc, #212]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d06b      	beq.n	8005ccc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bf4:	4b32      	ldr	r3, [pc, #200]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	099b      	lsrs	r3, r3, #6
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bfe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c06:	663b      	str	r3, [r7, #96]	; 0x60
 8005c08:	2300      	movs	r3, #0
 8005c0a:	667b      	str	r3, [r7, #100]	; 0x64
 8005c0c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005c10:	4622      	mov	r2, r4
 8005c12:	462b      	mov	r3, r5
 8005c14:	f04f 0000 	mov.w	r0, #0
 8005c18:	f04f 0100 	mov.w	r1, #0
 8005c1c:	0159      	lsls	r1, r3, #5
 8005c1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c22:	0150      	lsls	r0, r2, #5
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	4621      	mov	r1, r4
 8005c2a:	1a51      	subs	r1, r2, r1
 8005c2c:	61b9      	str	r1, [r7, #24]
 8005c2e:	4629      	mov	r1, r5
 8005c30:	eb63 0301 	sbc.w	r3, r3, r1
 8005c34:	61fb      	str	r3, [r7, #28]
 8005c36:	f04f 0200 	mov.w	r2, #0
 8005c3a:	f04f 0300 	mov.w	r3, #0
 8005c3e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005c42:	4659      	mov	r1, fp
 8005c44:	018b      	lsls	r3, r1, #6
 8005c46:	4651      	mov	r1, sl
 8005c48:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c4c:	4651      	mov	r1, sl
 8005c4e:	018a      	lsls	r2, r1, #6
 8005c50:	4651      	mov	r1, sl
 8005c52:	ebb2 0801 	subs.w	r8, r2, r1
 8005c56:	4659      	mov	r1, fp
 8005c58:	eb63 0901 	sbc.w	r9, r3, r1
 8005c5c:	f04f 0200 	mov.w	r2, #0
 8005c60:	f04f 0300 	mov.w	r3, #0
 8005c64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c70:	4690      	mov	r8, r2
 8005c72:	4699      	mov	r9, r3
 8005c74:	4623      	mov	r3, r4
 8005c76:	eb18 0303 	adds.w	r3, r8, r3
 8005c7a:	613b      	str	r3, [r7, #16]
 8005c7c:	462b      	mov	r3, r5
 8005c7e:	eb49 0303 	adc.w	r3, r9, r3
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	f04f 0300 	mov.w	r3, #0
 8005c8c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005c90:	4629      	mov	r1, r5
 8005c92:	024b      	lsls	r3, r1, #9
 8005c94:	4621      	mov	r1, r4
 8005c96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c9a:	4621      	mov	r1, r4
 8005c9c:	024a      	lsls	r2, r1, #9
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005caa:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005cac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005cb0:	f7fa ffba 	bl	8000c28 <__aeabi_uldivmod>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4613      	mov	r3, r2
 8005cba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cbe:	e065      	b.n	8005d8c <HAL_RCC_GetSysClockFreq+0x420>
 8005cc0:	40023800 	.word	0x40023800
 8005cc4:	00f42400 	.word	0x00f42400
 8005cc8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ccc:	4b3d      	ldr	r3, [pc, #244]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x458>)
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	099b      	lsrs	r3, r3, #6
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005cdc:	653b      	str	r3, [r7, #80]	; 0x50
 8005cde:	2300      	movs	r3, #0
 8005ce0:	657b      	str	r3, [r7, #84]	; 0x54
 8005ce2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005ce6:	4642      	mov	r2, r8
 8005ce8:	464b      	mov	r3, r9
 8005cea:	f04f 0000 	mov.w	r0, #0
 8005cee:	f04f 0100 	mov.w	r1, #0
 8005cf2:	0159      	lsls	r1, r3, #5
 8005cf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cf8:	0150      	lsls	r0, r2, #5
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	4641      	mov	r1, r8
 8005d00:	1a51      	subs	r1, r2, r1
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	4649      	mov	r1, r9
 8005d06:	eb63 0301 	sbc.w	r3, r3, r1
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	f04f 0300 	mov.w	r3, #0
 8005d14:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005d18:	4659      	mov	r1, fp
 8005d1a:	018b      	lsls	r3, r1, #6
 8005d1c:	4651      	mov	r1, sl
 8005d1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d22:	4651      	mov	r1, sl
 8005d24:	018a      	lsls	r2, r1, #6
 8005d26:	4651      	mov	r1, sl
 8005d28:	1a54      	subs	r4, r2, r1
 8005d2a:	4659      	mov	r1, fp
 8005d2c:	eb63 0501 	sbc.w	r5, r3, r1
 8005d30:	f04f 0200 	mov.w	r2, #0
 8005d34:	f04f 0300 	mov.w	r3, #0
 8005d38:	00eb      	lsls	r3, r5, #3
 8005d3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d3e:	00e2      	lsls	r2, r4, #3
 8005d40:	4614      	mov	r4, r2
 8005d42:	461d      	mov	r5, r3
 8005d44:	4643      	mov	r3, r8
 8005d46:	18e3      	adds	r3, r4, r3
 8005d48:	603b      	str	r3, [r7, #0]
 8005d4a:	464b      	mov	r3, r9
 8005d4c:	eb45 0303 	adc.w	r3, r5, r3
 8005d50:	607b      	str	r3, [r7, #4]
 8005d52:	f04f 0200 	mov.w	r2, #0
 8005d56:	f04f 0300 	mov.w	r3, #0
 8005d5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d5e:	4629      	mov	r1, r5
 8005d60:	028b      	lsls	r3, r1, #10
 8005d62:	4621      	mov	r1, r4
 8005d64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d68:	4621      	mov	r1, r4
 8005d6a:	028a      	lsls	r2, r1, #10
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	4619      	mov	r1, r3
 8005d70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d74:	2200      	movs	r2, #0
 8005d76:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d78:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005d7a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d7e:	f7fa ff53 	bl	8000c28 <__aeabi_uldivmod>
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	4613      	mov	r3, r2
 8005d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005d8c:	4b0d      	ldr	r3, [pc, #52]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x458>)
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	0f1b      	lsrs	r3, r3, #28
 8005d92:	f003 0307 	and.w	r3, r3, #7
 8005d96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005d9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005daa:	e003      	b.n	8005db4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005dac:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005dae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005db2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005db4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	37b8      	adds	r7, #184	; 0xb8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dc2:	bf00      	nop
 8005dc4:	40023800 	.word	0x40023800
 8005dc8:	00f42400 	.word	0x00f42400

08005dcc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e28d      	b.n	80062fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 8083 	beq.w	8005ef2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005dec:	4b94      	ldr	r3, [pc, #592]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f003 030c 	and.w	r3, r3, #12
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d019      	beq.n	8005e2c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005df8:	4b91      	ldr	r3, [pc, #580]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d106      	bne.n	8005e12 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005e04:	4b8e      	ldr	r3, [pc, #568]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e10:	d00c      	beq.n	8005e2c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e12:	4b8b      	ldr	r3, [pc, #556]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005e1a:	2b0c      	cmp	r3, #12
 8005e1c:	d112      	bne.n	8005e44 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e1e:	4b88      	ldr	r3, [pc, #544]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e2a:	d10b      	bne.n	8005e44 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e2c:	4b84      	ldr	r3, [pc, #528]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d05b      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x124>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d157      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e25a      	b.n	80062fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e4c:	d106      	bne.n	8005e5c <HAL_RCC_OscConfig+0x90>
 8005e4e:	4b7c      	ldr	r3, [pc, #496]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a7b      	ldr	r2, [pc, #492]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	e01d      	b.n	8005e98 <HAL_RCC_OscConfig+0xcc>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e64:	d10c      	bne.n	8005e80 <HAL_RCC_OscConfig+0xb4>
 8005e66:	4b76      	ldr	r3, [pc, #472]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a75      	ldr	r2, [pc, #468]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	4b73      	ldr	r3, [pc, #460]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a72      	ldr	r2, [pc, #456]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	e00b      	b.n	8005e98 <HAL_RCC_OscConfig+0xcc>
 8005e80:	4b6f      	ldr	r3, [pc, #444]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a6e      	ldr	r2, [pc, #440]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	4b6c      	ldr	r3, [pc, #432]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a6b      	ldr	r2, [pc, #428]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d013      	beq.n	8005ec8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea0:	f7fd fc28 	bl	80036f4 <HAL_GetTick>
 8005ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ea8:	f7fd fc24 	bl	80036f4 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b64      	cmp	r3, #100	; 0x64
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e21f      	b.n	80062fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eba:	4b61      	ldr	r3, [pc, #388]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0f0      	beq.n	8005ea8 <HAL_RCC_OscConfig+0xdc>
 8005ec6:	e014      	b.n	8005ef2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec8:	f7fd fc14 	bl	80036f4 <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ed0:	f7fd fc10 	bl	80036f4 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b64      	cmp	r3, #100	; 0x64
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e20b      	b.n	80062fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ee2:	4b57      	ldr	r3, [pc, #348]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1f0      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x104>
 8005eee:	e000      	b.n	8005ef2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d06f      	beq.n	8005fde <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005efe:	4b50      	ldr	r3, [pc, #320]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f003 030c 	and.w	r3, r3, #12
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d017      	beq.n	8005f3a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005f0a:	4b4d      	ldr	r3, [pc, #308]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d105      	bne.n	8005f22 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005f16:	4b4a      	ldr	r3, [pc, #296]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00b      	beq.n	8005f3a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f22:	4b47      	ldr	r3, [pc, #284]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005f2a:	2b0c      	cmp	r3, #12
 8005f2c:	d11c      	bne.n	8005f68 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f2e:	4b44      	ldr	r3, [pc, #272]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d116      	bne.n	8005f68 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f3a:	4b41      	ldr	r3, [pc, #260]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d005      	beq.n	8005f52 <HAL_RCC_OscConfig+0x186>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d001      	beq.n	8005f52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e1d3      	b.n	80062fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f52:	4b3b      	ldr	r3, [pc, #236]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	4937      	ldr	r1, [pc, #220]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f66:	e03a      	b.n	8005fde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d020      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f70:	4b34      	ldr	r3, [pc, #208]	; (8006044 <HAL_RCC_OscConfig+0x278>)
 8005f72:	2201      	movs	r2, #1
 8005f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f76:	f7fd fbbd 	bl	80036f4 <HAL_GetTick>
 8005f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f7c:	e008      	b.n	8005f90 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f7e:	f7fd fbb9 	bl	80036f4 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d901      	bls.n	8005f90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e1b4      	b.n	80062fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f90:	4b2b      	ldr	r3, [pc, #172]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d0f0      	beq.n	8005f7e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f9c:	4b28      	ldr	r3, [pc, #160]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	00db      	lsls	r3, r3, #3
 8005faa:	4925      	ldr	r1, [pc, #148]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	600b      	str	r3, [r1, #0]
 8005fb0:	e015      	b.n	8005fde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fb2:	4b24      	ldr	r3, [pc, #144]	; (8006044 <HAL_RCC_OscConfig+0x278>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb8:	f7fd fb9c 	bl	80036f4 <HAL_GetTick>
 8005fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fc0:	f7fd fb98 	bl	80036f4 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e193      	b.n	80062fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fd2:	4b1b      	ldr	r3, [pc, #108]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1f0      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0308 	and.w	r3, r3, #8
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d036      	beq.n	8006058 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d016      	beq.n	8006020 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ff2:	4b15      	ldr	r3, [pc, #84]	; (8006048 <HAL_RCC_OscConfig+0x27c>)
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff8:	f7fd fb7c 	bl	80036f4 <HAL_GetTick>
 8005ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006000:	f7fd fb78 	bl	80036f4 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e173      	b.n	80062fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006012:	4b0b      	ldr	r3, [pc, #44]	; (8006040 <HAL_RCC_OscConfig+0x274>)
 8006014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0f0      	beq.n	8006000 <HAL_RCC_OscConfig+0x234>
 800601e:	e01b      	b.n	8006058 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006020:	4b09      	ldr	r3, [pc, #36]	; (8006048 <HAL_RCC_OscConfig+0x27c>)
 8006022:	2200      	movs	r2, #0
 8006024:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006026:	f7fd fb65 	bl	80036f4 <HAL_GetTick>
 800602a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800602c:	e00e      	b.n	800604c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800602e:	f7fd fb61 	bl	80036f4 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b02      	cmp	r3, #2
 800603a:	d907      	bls.n	800604c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e15c      	b.n	80062fa <HAL_RCC_OscConfig+0x52e>
 8006040:	40023800 	.word	0x40023800
 8006044:	42470000 	.word	0x42470000
 8006048:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800604c:	4b8a      	ldr	r3, [pc, #552]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 800604e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1ea      	bne.n	800602e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 8097 	beq.w	8006194 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006066:	2300      	movs	r3, #0
 8006068:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800606a:	4b83      	ldr	r3, [pc, #524]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10f      	bne.n	8006096 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006076:	2300      	movs	r3, #0
 8006078:	60bb      	str	r3, [r7, #8]
 800607a:	4b7f      	ldr	r3, [pc, #508]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	4a7e      	ldr	r2, [pc, #504]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 8006080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006084:	6413      	str	r3, [r2, #64]	; 0x40
 8006086:	4b7c      	ldr	r3, [pc, #496]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800608e:	60bb      	str	r3, [r7, #8]
 8006090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006092:	2301      	movs	r3, #1
 8006094:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006096:	4b79      	ldr	r3, [pc, #484]	; (800627c <HAL_RCC_OscConfig+0x4b0>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d118      	bne.n	80060d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060a2:	4b76      	ldr	r3, [pc, #472]	; (800627c <HAL_RCC_OscConfig+0x4b0>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a75      	ldr	r2, [pc, #468]	; (800627c <HAL_RCC_OscConfig+0x4b0>)
 80060a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060ae:	f7fd fb21 	bl	80036f4 <HAL_GetTick>
 80060b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060b4:	e008      	b.n	80060c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060b6:	f7fd fb1d 	bl	80036f4 <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d901      	bls.n	80060c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e118      	b.n	80062fa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060c8:	4b6c      	ldr	r3, [pc, #432]	; (800627c <HAL_RCC_OscConfig+0x4b0>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d0f0      	beq.n	80060b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d106      	bne.n	80060ea <HAL_RCC_OscConfig+0x31e>
 80060dc:	4b66      	ldr	r3, [pc, #408]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 80060de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e0:	4a65      	ldr	r2, [pc, #404]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 80060e2:	f043 0301 	orr.w	r3, r3, #1
 80060e6:	6713      	str	r3, [r2, #112]	; 0x70
 80060e8:	e01c      	b.n	8006124 <HAL_RCC_OscConfig+0x358>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	2b05      	cmp	r3, #5
 80060f0:	d10c      	bne.n	800610c <HAL_RCC_OscConfig+0x340>
 80060f2:	4b61      	ldr	r3, [pc, #388]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 80060f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f6:	4a60      	ldr	r2, [pc, #384]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 80060f8:	f043 0304 	orr.w	r3, r3, #4
 80060fc:	6713      	str	r3, [r2, #112]	; 0x70
 80060fe:	4b5e      	ldr	r3, [pc, #376]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 8006100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006102:	4a5d      	ldr	r2, [pc, #372]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 8006104:	f043 0301 	orr.w	r3, r3, #1
 8006108:	6713      	str	r3, [r2, #112]	; 0x70
 800610a:	e00b      	b.n	8006124 <HAL_RCC_OscConfig+0x358>
 800610c:	4b5a      	ldr	r3, [pc, #360]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 800610e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006110:	4a59      	ldr	r2, [pc, #356]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 8006112:	f023 0301 	bic.w	r3, r3, #1
 8006116:	6713      	str	r3, [r2, #112]	; 0x70
 8006118:	4b57      	ldr	r3, [pc, #348]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 800611a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611c:	4a56      	ldr	r2, [pc, #344]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 800611e:	f023 0304 	bic.w	r3, r3, #4
 8006122:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d015      	beq.n	8006158 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800612c:	f7fd fae2 	bl	80036f4 <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006132:	e00a      	b.n	800614a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006134:	f7fd fade 	bl	80036f4 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006142:	4293      	cmp	r3, r2
 8006144:	d901      	bls.n	800614a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e0d7      	b.n	80062fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800614a:	4b4b      	ldr	r3, [pc, #300]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 800614c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d0ee      	beq.n	8006134 <HAL_RCC_OscConfig+0x368>
 8006156:	e014      	b.n	8006182 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006158:	f7fd facc 	bl	80036f4 <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800615e:	e00a      	b.n	8006176 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006160:	f7fd fac8 	bl	80036f4 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	f241 3288 	movw	r2, #5000	; 0x1388
 800616e:	4293      	cmp	r3, r2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e0c1      	b.n	80062fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006176:	4b40      	ldr	r3, [pc, #256]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 8006178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1ee      	bne.n	8006160 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006182:	7dfb      	ldrb	r3, [r7, #23]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d105      	bne.n	8006194 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006188:	4b3b      	ldr	r3, [pc, #236]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 800618a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618c:	4a3a      	ldr	r2, [pc, #232]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 800618e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006192:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 80ad 	beq.w	80062f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800619e:	4b36      	ldr	r3, [pc, #216]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 030c 	and.w	r3, r3, #12
 80061a6:	2b08      	cmp	r3, #8
 80061a8:	d060      	beq.n	800626c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d145      	bne.n	800623e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061b2:	4b33      	ldr	r3, [pc, #204]	; (8006280 <HAL_RCC_OscConfig+0x4b4>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b8:	f7fd fa9c 	bl	80036f4 <HAL_GetTick>
 80061bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061be:	e008      	b.n	80061d2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061c0:	f7fd fa98 	bl	80036f4 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e093      	b.n	80062fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061d2:	4b29      	ldr	r3, [pc, #164]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1f0      	bne.n	80061c0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	69da      	ldr	r2, [r3, #28]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	019b      	lsls	r3, r3, #6
 80061ee:	431a      	orrs	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f4:	085b      	lsrs	r3, r3, #1
 80061f6:	3b01      	subs	r3, #1
 80061f8:	041b      	lsls	r3, r3, #16
 80061fa:	431a      	orrs	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	061b      	lsls	r3, r3, #24
 8006202:	431a      	orrs	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006208:	071b      	lsls	r3, r3, #28
 800620a:	491b      	ldr	r1, [pc, #108]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 800620c:	4313      	orrs	r3, r2
 800620e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006210:	4b1b      	ldr	r3, [pc, #108]	; (8006280 <HAL_RCC_OscConfig+0x4b4>)
 8006212:	2201      	movs	r2, #1
 8006214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006216:	f7fd fa6d 	bl	80036f4 <HAL_GetTick>
 800621a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800621c:	e008      	b.n	8006230 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800621e:	f7fd fa69 	bl	80036f4 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d901      	bls.n	8006230 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e064      	b.n	80062fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006230:	4b11      	ldr	r3, [pc, #68]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0f0      	beq.n	800621e <HAL_RCC_OscConfig+0x452>
 800623c:	e05c      	b.n	80062f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800623e:	4b10      	ldr	r3, [pc, #64]	; (8006280 <HAL_RCC_OscConfig+0x4b4>)
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006244:	f7fd fa56 	bl	80036f4 <HAL_GetTick>
 8006248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800624a:	e008      	b.n	800625e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800624c:	f7fd fa52 	bl	80036f4 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e04d      	b.n	80062fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800625e:	4b06      	ldr	r3, [pc, #24]	; (8006278 <HAL_RCC_OscConfig+0x4ac>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1f0      	bne.n	800624c <HAL_RCC_OscConfig+0x480>
 800626a:	e045      	b.n	80062f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d107      	bne.n	8006284 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e040      	b.n	80062fa <HAL_RCC_OscConfig+0x52e>
 8006278:	40023800 	.word	0x40023800
 800627c:	40007000 	.word	0x40007000
 8006280:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006284:	4b1f      	ldr	r3, [pc, #124]	; (8006304 <HAL_RCC_OscConfig+0x538>)
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d030      	beq.n	80062f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800629c:	429a      	cmp	r2, r3
 800629e:	d129      	bne.n	80062f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d122      	bne.n	80062f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062b4:	4013      	ands	r3, r2
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062bc:	4293      	cmp	r3, r2
 80062be:	d119      	bne.n	80062f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ca:	085b      	lsrs	r3, r3, #1
 80062cc:	3b01      	subs	r3, #1
 80062ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d10f      	bne.n	80062f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d107      	bne.n	80062f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d001      	beq.n	80062f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e000      	b.n	80062fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	40023800 	.word	0x40023800

08006308 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e07b      	b.n	8006412 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631e:	2b00      	cmp	r3, #0
 8006320:	d108      	bne.n	8006334 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800632a:	d009      	beq.n	8006340 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	61da      	str	r2, [r3, #28]
 8006332:	e005      	b.n	8006340 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7fc f986 	bl	800266c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006376:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006388:	431a      	orrs	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	f003 0302 	and.w	r3, r3, #2
 800639c:	431a      	orrs	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	431a      	orrs	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063b0:	431a      	orrs	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063ba:	431a      	orrs	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c4:	ea42 0103 	orr.w	r1, r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	0c1b      	lsrs	r3, r3, #16
 80063de:	f003 0104 	and.w	r1, r3, #4
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	f003 0210 	and.w	r2, r3, #16
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69da      	ldr	r2, [r3, #28]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006400:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b082      	sub	sp, #8
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e041      	b.n	80064b0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d106      	bne.n	8006446 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7fc fc0b 	bl	8002c5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2202      	movs	r2, #2
 800644a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	3304      	adds	r3, #4
 8006456:	4619      	mov	r1, r3
 8006458:	4610      	mov	r0, r2
 800645a:	f000 fbb3 	bl	8006bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d001      	beq.n	80064d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e046      	b.n	800655e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a23      	ldr	r2, [pc, #140]	; (800656c <HAL_TIM_Base_Start+0xb4>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d022      	beq.n	8006528 <HAL_TIM_Base_Start+0x70>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ea:	d01d      	beq.n	8006528 <HAL_TIM_Base_Start+0x70>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a1f      	ldr	r2, [pc, #124]	; (8006570 <HAL_TIM_Base_Start+0xb8>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d018      	beq.n	8006528 <HAL_TIM_Base_Start+0x70>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a1e      	ldr	r2, [pc, #120]	; (8006574 <HAL_TIM_Base_Start+0xbc>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d013      	beq.n	8006528 <HAL_TIM_Base_Start+0x70>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a1c      	ldr	r2, [pc, #112]	; (8006578 <HAL_TIM_Base_Start+0xc0>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d00e      	beq.n	8006528 <HAL_TIM_Base_Start+0x70>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a1b      	ldr	r2, [pc, #108]	; (800657c <HAL_TIM_Base_Start+0xc4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d009      	beq.n	8006528 <HAL_TIM_Base_Start+0x70>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a19      	ldr	r2, [pc, #100]	; (8006580 <HAL_TIM_Base_Start+0xc8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d004      	beq.n	8006528 <HAL_TIM_Base_Start+0x70>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a18      	ldr	r2, [pc, #96]	; (8006584 <HAL_TIM_Base_Start+0xcc>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d111      	bne.n	800654c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2b06      	cmp	r3, #6
 8006538:	d010      	beq.n	800655c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f042 0201 	orr.w	r2, r2, #1
 8006548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800654a:	e007      	b.n	800655c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0201 	orr.w	r2, r2, #1
 800655a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	40010000 	.word	0x40010000
 8006570:	40000400 	.word	0x40000400
 8006574:	40000800 	.word	0x40000800
 8006578:	40000c00 	.word	0x40000c00
 800657c:	40010400 	.word	0x40010400
 8006580:	40014000 	.word	0x40014000
 8006584:	40001800 	.word	0x40001800

08006588 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b01      	cmp	r3, #1
 800659a:	d001      	beq.n	80065a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e04e      	b.n	800663e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0201 	orr.w	r2, r2, #1
 80065b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a23      	ldr	r2, [pc, #140]	; (800664c <HAL_TIM_Base_Start_IT+0xc4>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d022      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0x80>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ca:	d01d      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0x80>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a1f      	ldr	r2, [pc, #124]	; (8006650 <HAL_TIM_Base_Start_IT+0xc8>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d018      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0x80>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a1e      	ldr	r2, [pc, #120]	; (8006654 <HAL_TIM_Base_Start_IT+0xcc>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d013      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0x80>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a1c      	ldr	r2, [pc, #112]	; (8006658 <HAL_TIM_Base_Start_IT+0xd0>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d00e      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0x80>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a1b      	ldr	r2, [pc, #108]	; (800665c <HAL_TIM_Base_Start_IT+0xd4>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d009      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0x80>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a19      	ldr	r2, [pc, #100]	; (8006660 <HAL_TIM_Base_Start_IT+0xd8>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d004      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0x80>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a18      	ldr	r2, [pc, #96]	; (8006664 <HAL_TIM_Base_Start_IT+0xdc>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d111      	bne.n	800662c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b06      	cmp	r3, #6
 8006618:	d010      	beq.n	800663c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f042 0201 	orr.w	r2, r2, #1
 8006628:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800662a:	e007      	b.n	800663c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0201 	orr.w	r2, r2, #1
 800663a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	40010000 	.word	0x40010000
 8006650:	40000400 	.word	0x40000400
 8006654:	40000800 	.word	0x40000800
 8006658:	40000c00 	.word	0x40000c00
 800665c:	40010400 	.word	0x40010400
 8006660:	40014000 	.word	0x40014000
 8006664:	40001800 	.word	0x40001800

08006668 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e041      	b.n	80066fe <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d106      	bne.n	8006694 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f839 	bl	8006706 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2202      	movs	r2, #2
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	3304      	adds	r3, #4
 80066a4:	4619      	mov	r1, r3
 80066a6:	4610      	mov	r0, r2
 80066a8:	f000 fa8c 	bl	8006bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3708      	adds	r7, #8
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b02      	cmp	r3, #2
 800672e:	d122      	bne.n	8006776 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b02      	cmp	r3, #2
 800673c:	d11b      	bne.n	8006776 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f06f 0202 	mvn.w	r2, #2
 8006746:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	f003 0303 	and.w	r3, r3, #3
 8006758:	2b00      	cmp	r3, #0
 800675a:	d003      	beq.n	8006764 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fa12 	bl	8006b86 <HAL_TIM_IC_CaptureCallback>
 8006762:	e005      	b.n	8006770 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fa04 	bl	8006b72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fa15 	bl	8006b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	f003 0304 	and.w	r3, r3, #4
 8006780:	2b04      	cmp	r3, #4
 8006782:	d122      	bne.n	80067ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f003 0304 	and.w	r3, r3, #4
 800678e:	2b04      	cmp	r3, #4
 8006790:	d11b      	bne.n	80067ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f06f 0204 	mvn.w	r2, #4
 800679a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2202      	movs	r2, #2
 80067a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f9e8 	bl	8006b86 <HAL_TIM_IC_CaptureCallback>
 80067b6:	e005      	b.n	80067c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f9da 	bl	8006b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f9eb 	bl	8006b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	f003 0308 	and.w	r3, r3, #8
 80067d4:	2b08      	cmp	r3, #8
 80067d6:	d122      	bne.n	800681e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f003 0308 	and.w	r3, r3, #8
 80067e2:	2b08      	cmp	r3, #8
 80067e4:	d11b      	bne.n	800681e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f06f 0208 	mvn.w	r2, #8
 80067ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2204      	movs	r2, #4
 80067f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	f003 0303 	and.w	r3, r3, #3
 8006800:	2b00      	cmp	r3, #0
 8006802:	d003      	beq.n	800680c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f9be 	bl	8006b86 <HAL_TIM_IC_CaptureCallback>
 800680a:	e005      	b.n	8006818 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f9b0 	bl	8006b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f9c1 	bl	8006b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	f003 0310 	and.w	r3, r3, #16
 8006828:	2b10      	cmp	r3, #16
 800682a:	d122      	bne.n	8006872 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	f003 0310 	and.w	r3, r3, #16
 8006836:	2b10      	cmp	r3, #16
 8006838:	d11b      	bne.n	8006872 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f06f 0210 	mvn.w	r2, #16
 8006842:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2208      	movs	r2, #8
 8006848:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f994 	bl	8006b86 <HAL_TIM_IC_CaptureCallback>
 800685e:	e005      	b.n	800686c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f986 	bl	8006b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f997 	bl	8006b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	2b01      	cmp	r3, #1
 800687e:	d10e      	bne.n	800689e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b01      	cmp	r3, #1
 800688c:	d107      	bne.n	800689e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f06f 0201 	mvn.w	r2, #1
 8006896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7fb fe99 	bl	80025d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a8:	2b80      	cmp	r3, #128	; 0x80
 80068aa:	d10e      	bne.n	80068ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b6:	2b80      	cmp	r3, #128	; 0x80
 80068b8:	d107      	bne.n	80068ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fced 	bl	80072a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d4:	2b40      	cmp	r3, #64	; 0x40
 80068d6:	d10e      	bne.n	80068f6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e2:	2b40      	cmp	r3, #64	; 0x40
 80068e4:	d107      	bne.n	80068f6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f95c 	bl	8006bae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	f003 0320 	and.w	r3, r3, #32
 8006900:	2b20      	cmp	r3, #32
 8006902:	d10e      	bne.n	8006922 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	f003 0320 	and.w	r3, r3, #32
 800690e:	2b20      	cmp	r3, #32
 8006910:	d107      	bne.n	8006922 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f06f 0220 	mvn.w	r2, #32
 800691a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fcb7 	bl	8007290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006922:	bf00      	nop
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
	...

0800692c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006938:	2300      	movs	r3, #0
 800693a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006942:	2b01      	cmp	r3, #1
 8006944:	d101      	bne.n	800694a <HAL_TIM_OC_ConfigChannel+0x1e>
 8006946:	2302      	movs	r3, #2
 8006948:	e048      	b.n	80069dc <HAL_TIM_OC_ConfigChannel+0xb0>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b0c      	cmp	r3, #12
 8006956:	d839      	bhi.n	80069cc <HAL_TIM_OC_ConfigChannel+0xa0>
 8006958:	a201      	add	r2, pc, #4	; (adr r2, 8006960 <HAL_TIM_OC_ConfigChannel+0x34>)
 800695a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695e:	bf00      	nop
 8006960:	08006995 	.word	0x08006995
 8006964:	080069cd 	.word	0x080069cd
 8006968:	080069cd 	.word	0x080069cd
 800696c:	080069cd 	.word	0x080069cd
 8006970:	080069a3 	.word	0x080069a3
 8006974:	080069cd 	.word	0x080069cd
 8006978:	080069cd 	.word	0x080069cd
 800697c:	080069cd 	.word	0x080069cd
 8006980:	080069b1 	.word	0x080069b1
 8006984:	080069cd 	.word	0x080069cd
 8006988:	080069cd 	.word	0x080069cd
 800698c:	080069cd 	.word	0x080069cd
 8006990:	080069bf 	.word	0x080069bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68b9      	ldr	r1, [r7, #8]
 800699a:	4618      	mov	r0, r3
 800699c:	f000 f9b2 	bl	8006d04 <TIM_OC1_SetConfig>
      break;
 80069a0:	e017      	b.n	80069d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68b9      	ldr	r1, [r7, #8]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 fa1b 	bl	8006de4 <TIM_OC2_SetConfig>
      break;
 80069ae:	e010      	b.n	80069d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68b9      	ldr	r1, [r7, #8]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 fa8a 	bl	8006ed0 <TIM_OC3_SetConfig>
      break;
 80069bc:	e009      	b.n	80069d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68b9      	ldr	r1, [r7, #8]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 faf7 	bl	8006fb8 <TIM_OC4_SetConfig>
      break;
 80069ca:	e002      	b.n	80069d2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	75fb      	strb	r3, [r7, #23]
      break;
 80069d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069da:	7dfb      	ldrb	r3, [r7, #23]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3718      	adds	r7, #24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d101      	bne.n	8006a00 <HAL_TIM_ConfigClockSource+0x1c>
 80069fc:	2302      	movs	r3, #2
 80069fe:	e0b4      	b.n	8006b6a <HAL_TIM_ConfigClockSource+0x186>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a38:	d03e      	beq.n	8006ab8 <HAL_TIM_ConfigClockSource+0xd4>
 8006a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a3e:	f200 8087 	bhi.w	8006b50 <HAL_TIM_ConfigClockSource+0x16c>
 8006a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a46:	f000 8086 	beq.w	8006b56 <HAL_TIM_ConfigClockSource+0x172>
 8006a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a4e:	d87f      	bhi.n	8006b50 <HAL_TIM_ConfigClockSource+0x16c>
 8006a50:	2b70      	cmp	r3, #112	; 0x70
 8006a52:	d01a      	beq.n	8006a8a <HAL_TIM_ConfigClockSource+0xa6>
 8006a54:	2b70      	cmp	r3, #112	; 0x70
 8006a56:	d87b      	bhi.n	8006b50 <HAL_TIM_ConfigClockSource+0x16c>
 8006a58:	2b60      	cmp	r3, #96	; 0x60
 8006a5a:	d050      	beq.n	8006afe <HAL_TIM_ConfigClockSource+0x11a>
 8006a5c:	2b60      	cmp	r3, #96	; 0x60
 8006a5e:	d877      	bhi.n	8006b50 <HAL_TIM_ConfigClockSource+0x16c>
 8006a60:	2b50      	cmp	r3, #80	; 0x50
 8006a62:	d03c      	beq.n	8006ade <HAL_TIM_ConfigClockSource+0xfa>
 8006a64:	2b50      	cmp	r3, #80	; 0x50
 8006a66:	d873      	bhi.n	8006b50 <HAL_TIM_ConfigClockSource+0x16c>
 8006a68:	2b40      	cmp	r3, #64	; 0x40
 8006a6a:	d058      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0x13a>
 8006a6c:	2b40      	cmp	r3, #64	; 0x40
 8006a6e:	d86f      	bhi.n	8006b50 <HAL_TIM_ConfigClockSource+0x16c>
 8006a70:	2b30      	cmp	r3, #48	; 0x30
 8006a72:	d064      	beq.n	8006b3e <HAL_TIM_ConfigClockSource+0x15a>
 8006a74:	2b30      	cmp	r3, #48	; 0x30
 8006a76:	d86b      	bhi.n	8006b50 <HAL_TIM_ConfigClockSource+0x16c>
 8006a78:	2b20      	cmp	r3, #32
 8006a7a:	d060      	beq.n	8006b3e <HAL_TIM_ConfigClockSource+0x15a>
 8006a7c:	2b20      	cmp	r3, #32
 8006a7e:	d867      	bhi.n	8006b50 <HAL_TIM_ConfigClockSource+0x16c>
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d05c      	beq.n	8006b3e <HAL_TIM_ConfigClockSource+0x15a>
 8006a84:	2b10      	cmp	r3, #16
 8006a86:	d05a      	beq.n	8006b3e <HAL_TIM_ConfigClockSource+0x15a>
 8006a88:	e062      	b.n	8006b50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6818      	ldr	r0, [r3, #0]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	6899      	ldr	r1, [r3, #8]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	f000 fb5d 	bl	8007158 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006aac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	609a      	str	r2, [r3, #8]
      break;
 8006ab6:	e04f      	b.n	8006b58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6818      	ldr	r0, [r3, #0]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	6899      	ldr	r1, [r3, #8]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f000 fb46 	bl	8007158 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689a      	ldr	r2, [r3, #8]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ada:	609a      	str	r2, [r3, #8]
      break;
 8006adc:	e03c      	b.n	8006b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6818      	ldr	r0, [r3, #0]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	6859      	ldr	r1, [r3, #4]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	461a      	mov	r2, r3
 8006aec:	f000 faba 	bl	8007064 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2150      	movs	r1, #80	; 0x50
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 fb13 	bl	8007122 <TIM_ITRx_SetConfig>
      break;
 8006afc:	e02c      	b.n	8006b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6818      	ldr	r0, [r3, #0]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	6859      	ldr	r1, [r3, #4]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f000 fad9 	bl	80070c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2160      	movs	r1, #96	; 0x60
 8006b16:	4618      	mov	r0, r3
 8006b18:	f000 fb03 	bl	8007122 <TIM_ITRx_SetConfig>
      break;
 8006b1c:	e01c      	b.n	8006b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6818      	ldr	r0, [r3, #0]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	6859      	ldr	r1, [r3, #4]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f000 fa9a 	bl	8007064 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2140      	movs	r1, #64	; 0x40
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 faf3 	bl	8007122 <TIM_ITRx_SetConfig>
      break;
 8006b3c:	e00c      	b.n	8006b58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4619      	mov	r1, r3
 8006b48:	4610      	mov	r0, r2
 8006b4a:	f000 faea 	bl	8007122 <TIM_ITRx_SetConfig>
      break;
 8006b4e:	e003      	b.n	8006b58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	73fb      	strb	r3, [r7, #15]
      break;
 8006b54:	e000      	b.n	8006b58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b7a:	bf00      	nop
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b8e:	bf00      	nop
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ba2:	bf00      	nop
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bb6:	bf00      	nop
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
	...

08006bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a40      	ldr	r2, [pc, #256]	; (8006cd8 <TIM_Base_SetConfig+0x114>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d013      	beq.n	8006c04 <TIM_Base_SetConfig+0x40>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be2:	d00f      	beq.n	8006c04 <TIM_Base_SetConfig+0x40>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a3d      	ldr	r2, [pc, #244]	; (8006cdc <TIM_Base_SetConfig+0x118>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d00b      	beq.n	8006c04 <TIM_Base_SetConfig+0x40>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a3c      	ldr	r2, [pc, #240]	; (8006ce0 <TIM_Base_SetConfig+0x11c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d007      	beq.n	8006c04 <TIM_Base_SetConfig+0x40>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a3b      	ldr	r2, [pc, #236]	; (8006ce4 <TIM_Base_SetConfig+0x120>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d003      	beq.n	8006c04 <TIM_Base_SetConfig+0x40>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a3a      	ldr	r2, [pc, #232]	; (8006ce8 <TIM_Base_SetConfig+0x124>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d108      	bne.n	8006c16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a2f      	ldr	r2, [pc, #188]	; (8006cd8 <TIM_Base_SetConfig+0x114>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d02b      	beq.n	8006c76 <TIM_Base_SetConfig+0xb2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c24:	d027      	beq.n	8006c76 <TIM_Base_SetConfig+0xb2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a2c      	ldr	r2, [pc, #176]	; (8006cdc <TIM_Base_SetConfig+0x118>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d023      	beq.n	8006c76 <TIM_Base_SetConfig+0xb2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a2b      	ldr	r2, [pc, #172]	; (8006ce0 <TIM_Base_SetConfig+0x11c>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d01f      	beq.n	8006c76 <TIM_Base_SetConfig+0xb2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a2a      	ldr	r2, [pc, #168]	; (8006ce4 <TIM_Base_SetConfig+0x120>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d01b      	beq.n	8006c76 <TIM_Base_SetConfig+0xb2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a29      	ldr	r2, [pc, #164]	; (8006ce8 <TIM_Base_SetConfig+0x124>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d017      	beq.n	8006c76 <TIM_Base_SetConfig+0xb2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a28      	ldr	r2, [pc, #160]	; (8006cec <TIM_Base_SetConfig+0x128>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d013      	beq.n	8006c76 <TIM_Base_SetConfig+0xb2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a27      	ldr	r2, [pc, #156]	; (8006cf0 <TIM_Base_SetConfig+0x12c>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d00f      	beq.n	8006c76 <TIM_Base_SetConfig+0xb2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a26      	ldr	r2, [pc, #152]	; (8006cf4 <TIM_Base_SetConfig+0x130>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00b      	beq.n	8006c76 <TIM_Base_SetConfig+0xb2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a25      	ldr	r2, [pc, #148]	; (8006cf8 <TIM_Base_SetConfig+0x134>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d007      	beq.n	8006c76 <TIM_Base_SetConfig+0xb2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a24      	ldr	r2, [pc, #144]	; (8006cfc <TIM_Base_SetConfig+0x138>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d003      	beq.n	8006c76 <TIM_Base_SetConfig+0xb2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a23      	ldr	r2, [pc, #140]	; (8006d00 <TIM_Base_SetConfig+0x13c>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d108      	bne.n	8006c88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	689a      	ldr	r2, [r3, #8]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a0a      	ldr	r2, [pc, #40]	; (8006cd8 <TIM_Base_SetConfig+0x114>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d003      	beq.n	8006cbc <TIM_Base_SetConfig+0xf8>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a0c      	ldr	r2, [pc, #48]	; (8006ce8 <TIM_Base_SetConfig+0x124>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d103      	bne.n	8006cc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	691a      	ldr	r2, [r3, #16]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	615a      	str	r2, [r3, #20]
}
 8006cca:	bf00      	nop
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	40010000 	.word	0x40010000
 8006cdc:	40000400 	.word	0x40000400
 8006ce0:	40000800 	.word	0x40000800
 8006ce4:	40000c00 	.word	0x40000c00
 8006ce8:	40010400 	.word	0x40010400
 8006cec:	40014000 	.word	0x40014000
 8006cf0:	40014400 	.word	0x40014400
 8006cf4:	40014800 	.word	0x40014800
 8006cf8:	40001800 	.word	0x40001800
 8006cfc:	40001c00 	.word	0x40001c00
 8006d00:	40002000 	.word	0x40002000

08006d04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	f023 0201 	bic.w	r2, r3, #1
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 0303 	bic.w	r3, r3, #3
 8006d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f023 0302 	bic.w	r3, r3, #2
 8006d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a20      	ldr	r2, [pc, #128]	; (8006ddc <TIM_OC1_SetConfig+0xd8>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d003      	beq.n	8006d68 <TIM_OC1_SetConfig+0x64>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a1f      	ldr	r2, [pc, #124]	; (8006de0 <TIM_OC1_SetConfig+0xdc>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d10c      	bne.n	8006d82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	f023 0308 	bic.w	r3, r3, #8
 8006d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f023 0304 	bic.w	r3, r3, #4
 8006d80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a15      	ldr	r2, [pc, #84]	; (8006ddc <TIM_OC1_SetConfig+0xd8>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d003      	beq.n	8006d92 <TIM_OC1_SetConfig+0x8e>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a14      	ldr	r2, [pc, #80]	; (8006de0 <TIM_OC1_SetConfig+0xdc>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d111      	bne.n	8006db6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006da0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	621a      	str	r2, [r3, #32]
}
 8006dd0:	bf00      	nop
 8006dd2:	371c      	adds	r7, #28
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	40010000 	.word	0x40010000
 8006de0:	40010400 	.word	0x40010400

08006de4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	f023 0210 	bic.w	r2, r3, #16
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	021b      	lsls	r3, r3, #8
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	f023 0320 	bic.w	r3, r3, #32
 8006e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	011b      	lsls	r3, r3, #4
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a22      	ldr	r2, [pc, #136]	; (8006ec8 <TIM_OC2_SetConfig+0xe4>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d003      	beq.n	8006e4c <TIM_OC2_SetConfig+0x68>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a21      	ldr	r2, [pc, #132]	; (8006ecc <TIM_OC2_SetConfig+0xe8>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d10d      	bne.n	8006e68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	011b      	lsls	r3, r3, #4
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a17      	ldr	r2, [pc, #92]	; (8006ec8 <TIM_OC2_SetConfig+0xe4>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d003      	beq.n	8006e78 <TIM_OC2_SetConfig+0x94>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a16      	ldr	r2, [pc, #88]	; (8006ecc <TIM_OC2_SetConfig+0xe8>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d113      	bne.n	8006ea0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	621a      	str	r2, [r3, #32]
}
 8006eba:	bf00      	nop
 8006ebc:	371c      	adds	r7, #28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	40010000 	.word	0x40010000
 8006ecc:	40010400 	.word	0x40010400

08006ed0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 0303 	bic.w	r3, r3, #3
 8006f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	021b      	lsls	r3, r3, #8
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a21      	ldr	r2, [pc, #132]	; (8006fb0 <TIM_OC3_SetConfig+0xe0>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d003      	beq.n	8006f36 <TIM_OC3_SetConfig+0x66>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a20      	ldr	r2, [pc, #128]	; (8006fb4 <TIM_OC3_SetConfig+0xe4>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d10d      	bne.n	8006f52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	021b      	lsls	r3, r3, #8
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a16      	ldr	r2, [pc, #88]	; (8006fb0 <TIM_OC3_SetConfig+0xe0>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d003      	beq.n	8006f62 <TIM_OC3_SetConfig+0x92>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a15      	ldr	r2, [pc, #84]	; (8006fb4 <TIM_OC3_SetConfig+0xe4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d113      	bne.n	8006f8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	011b      	lsls	r3, r3, #4
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	011b      	lsls	r3, r3, #4
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	621a      	str	r2, [r3, #32]
}
 8006fa4:	bf00      	nop
 8006fa6:	371c      	adds	r7, #28
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	40010000 	.word	0x40010000
 8006fb4:	40010400 	.word	0x40010400

08006fb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	021b      	lsls	r3, r3, #8
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007002:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	031b      	lsls	r3, r3, #12
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	4313      	orrs	r3, r2
 800700e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a12      	ldr	r2, [pc, #72]	; (800705c <TIM_OC4_SetConfig+0xa4>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d003      	beq.n	8007020 <TIM_OC4_SetConfig+0x68>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a11      	ldr	r2, [pc, #68]	; (8007060 <TIM_OC4_SetConfig+0xa8>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d109      	bne.n	8007034 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007026:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	019b      	lsls	r3, r3, #6
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	4313      	orrs	r3, r2
 8007032:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	621a      	str	r2, [r3, #32]
}
 800704e:	bf00      	nop
 8007050:	371c      	adds	r7, #28
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	40010000 	.word	0x40010000
 8007060:	40010400 	.word	0x40010400

08007064 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6a1b      	ldr	r3, [r3, #32]
 8007074:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	f023 0201 	bic.w	r2, r3, #1
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800708e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	011b      	lsls	r3, r3, #4
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	4313      	orrs	r3, r2
 8007098:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f023 030a 	bic.w	r3, r3, #10
 80070a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	621a      	str	r2, [r3, #32]
}
 80070b6:	bf00      	nop
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b087      	sub	sp, #28
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	60b9      	str	r1, [r7, #8]
 80070cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	f023 0210 	bic.w	r2, r3, #16
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	031b      	lsls	r3, r3, #12
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	011b      	lsls	r3, r3, #4
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	4313      	orrs	r3, r2
 8007108:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	621a      	str	r2, [r3, #32]
}
 8007116:	bf00      	nop
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007122:	b480      	push	{r7}
 8007124:	b085      	sub	sp, #20
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007138:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4313      	orrs	r3, r2
 8007140:	f043 0307 	orr.w	r3, r3, #7
 8007144:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	609a      	str	r2, [r3, #8]
}
 800714c:	bf00      	nop
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007158:	b480      	push	{r7}
 800715a:	b087      	sub	sp, #28
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007172:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	021a      	lsls	r2, r3, #8
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	431a      	orrs	r2, r3
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	4313      	orrs	r3, r2
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	4313      	orrs	r3, r2
 8007184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	609a      	str	r2, [r3, #8]
}
 800718c:	bf00      	nop
 800718e:	371c      	adds	r7, #28
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d101      	bne.n	80071b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071ac:	2302      	movs	r3, #2
 80071ae:	e05a      	b.n	8007266 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2202      	movs	r2, #2
 80071bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	4313      	orrs	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a21      	ldr	r2, [pc, #132]	; (8007274 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d022      	beq.n	800723a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071fc:	d01d      	beq.n	800723a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a1d      	ldr	r2, [pc, #116]	; (8007278 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d018      	beq.n	800723a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a1b      	ldr	r2, [pc, #108]	; (800727c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d013      	beq.n	800723a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a1a      	ldr	r2, [pc, #104]	; (8007280 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d00e      	beq.n	800723a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a18      	ldr	r2, [pc, #96]	; (8007284 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d009      	beq.n	800723a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a17      	ldr	r2, [pc, #92]	; (8007288 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d004      	beq.n	800723a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a15      	ldr	r2, [pc, #84]	; (800728c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d10c      	bne.n	8007254 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007240:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	4313      	orrs	r3, r2
 800724a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68ba      	ldr	r2, [r7, #8]
 8007252:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	40010000 	.word	0x40010000
 8007278:	40000400 	.word	0x40000400
 800727c:	40000800 	.word	0x40000800
 8007280:	40000c00 	.word	0x40000c00
 8007284:	40010400 	.word	0x40010400
 8007288:	40014000 	.word	0x40014000
 800728c:	40001800 	.word	0x40001800

08007290 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e03f      	b.n	800734a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d106      	bne.n	80072e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7fb fd32 	bl	8002d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2224      	movs	r2, #36	; 0x24
 80072e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68da      	ldr	r2, [r3, #12]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fc7b 	bl	8007bf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	691a      	ldr	r2, [r3, #16]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007310:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	695a      	ldr	r2, [r3, #20]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007320:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68da      	ldr	r2, [r3, #12]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007330:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2220      	movs	r2, #32
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2220      	movs	r2, #32
 8007344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b0ba      	sub	sp, #232	; 0xe8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800737a:	2300      	movs	r3, #0
 800737c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007380:	2300      	movs	r3, #0
 8007382:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800738a:	f003 030f 	and.w	r3, r3, #15
 800738e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10f      	bne.n	80073ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800739a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800739e:	f003 0320 	and.w	r3, r3, #32
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d009      	beq.n	80073ba <HAL_UART_IRQHandler+0x66>
 80073a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073aa:	f003 0320 	and.w	r3, r3, #32
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fb65 	bl	8007a82 <UART_Receive_IT>
      return;
 80073b8:	e256      	b.n	8007868 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80073ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 80de 	beq.w	8007580 <HAL_UART_IRQHandler+0x22c>
 80073c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d106      	bne.n	80073de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80073d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 80d1 	beq.w	8007580 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80073de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00b      	beq.n	8007402 <HAL_UART_IRQHandler+0xae>
 80073ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d005      	beq.n	8007402 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fa:	f043 0201 	orr.w	r2, r3, #1
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007406:	f003 0304 	and.w	r3, r3, #4
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00b      	beq.n	8007426 <HAL_UART_IRQHandler+0xd2>
 800740e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d005      	beq.n	8007426 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	f043 0202 	orr.w	r2, r3, #2
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00b      	beq.n	800744a <HAL_UART_IRQHandler+0xf6>
 8007432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b00      	cmp	r3, #0
 800743c:	d005      	beq.n	800744a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	f043 0204 	orr.w	r2, r3, #4
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800744a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800744e:	f003 0308 	and.w	r3, r3, #8
 8007452:	2b00      	cmp	r3, #0
 8007454:	d011      	beq.n	800747a <HAL_UART_IRQHandler+0x126>
 8007456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b00      	cmp	r3, #0
 8007460:	d105      	bne.n	800746e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	d005      	beq.n	800747a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007472:	f043 0208 	orr.w	r2, r3, #8
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 81ed 	beq.w	800785e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007488:	f003 0320 	and.w	r3, r3, #32
 800748c:	2b00      	cmp	r3, #0
 800748e:	d008      	beq.n	80074a2 <HAL_UART_IRQHandler+0x14e>
 8007490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007494:	f003 0320 	and.w	r3, r3, #32
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 faf0 	bl	8007a82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ac:	2b40      	cmp	r3, #64	; 0x40
 80074ae:	bf0c      	ite	eq
 80074b0:	2301      	moveq	r3, #1
 80074b2:	2300      	movne	r3, #0
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074be:	f003 0308 	and.w	r3, r3, #8
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d103      	bne.n	80074ce <HAL_UART_IRQHandler+0x17a>
 80074c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d04f      	beq.n	800756e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f9f8 	bl	80078c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074de:	2b40      	cmp	r3, #64	; 0x40
 80074e0:	d141      	bne.n	8007566 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	3314      	adds	r3, #20
 80074e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074f0:	e853 3f00 	ldrex	r3, [r3]
 80074f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007500:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3314      	adds	r3, #20
 800750a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800750e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007512:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007516:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800751a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800751e:	e841 2300 	strex	r3, r2, [r1]
 8007522:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007526:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1d9      	bne.n	80074e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007532:	2b00      	cmp	r3, #0
 8007534:	d013      	beq.n	800755e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753a:	4a7d      	ldr	r2, [pc, #500]	; (8007730 <HAL_UART_IRQHandler+0x3dc>)
 800753c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007542:	4618      	mov	r0, r3
 8007544:	f7fc fa58 	bl	80039f8 <HAL_DMA_Abort_IT>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d016      	beq.n	800757c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007558:	4610      	mov	r0, r2
 800755a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800755c:	e00e      	b.n	800757c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f99a 	bl	8007898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007564:	e00a      	b.n	800757c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f996 	bl	8007898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800756c:	e006      	b.n	800757c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f992 	bl	8007898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800757a:	e170      	b.n	800785e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800757c:	bf00      	nop
    return;
 800757e:	e16e      	b.n	800785e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007584:	2b01      	cmp	r3, #1
 8007586:	f040 814a 	bne.w	800781e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800758a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800758e:	f003 0310 	and.w	r3, r3, #16
 8007592:	2b00      	cmp	r3, #0
 8007594:	f000 8143 	beq.w	800781e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800759c:	f003 0310 	and.w	r3, r3, #16
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 813c 	beq.w	800781e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075a6:	2300      	movs	r3, #0
 80075a8:	60bb      	str	r3, [r7, #8]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	60bb      	str	r3, [r7, #8]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	60bb      	str	r3, [r7, #8]
 80075ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c6:	2b40      	cmp	r3, #64	; 0x40
 80075c8:	f040 80b4 	bne.w	8007734 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 8140 	beq.w	8007862 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075ea:	429a      	cmp	r2, r3
 80075ec:	f080 8139 	bcs.w	8007862 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007602:	f000 8088 	beq.w	8007716 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	330c      	adds	r3, #12
 800760c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007610:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007614:	e853 3f00 	ldrex	r3, [r3]
 8007618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800761c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007624:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	330c      	adds	r3, #12
 800762e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007632:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800763e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007642:	e841 2300 	strex	r3, r2, [r1]
 8007646:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800764a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1d9      	bne.n	8007606 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3314      	adds	r3, #20
 8007658:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800765c:	e853 3f00 	ldrex	r3, [r3]
 8007660:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007664:	f023 0301 	bic.w	r3, r3, #1
 8007668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3314      	adds	r3, #20
 8007672:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007676:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800767a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800767e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e1      	bne.n	8007652 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3314      	adds	r3, #20
 8007694:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800769e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	3314      	adds	r3, #20
 80076ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80076b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80076b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80076b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80076c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e3      	bne.n	800768e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2220      	movs	r2, #32
 80076ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	330c      	adds	r3, #12
 80076da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076de:	e853 3f00 	ldrex	r3, [r3]
 80076e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076e6:	f023 0310 	bic.w	r3, r3, #16
 80076ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	330c      	adds	r3, #12
 80076f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80076f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80076fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007700:	e841 2300 	strex	r3, r2, [r1]
 8007704:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1e3      	bne.n	80076d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007710:	4618      	mov	r0, r3
 8007712:	f7fc f901 	bl	8003918 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800771e:	b29b      	uxth	r3, r3
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	b29b      	uxth	r3, r3
 8007724:	4619      	mov	r1, r3
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f8c0 	bl	80078ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800772c:	e099      	b.n	8007862 <HAL_UART_IRQHandler+0x50e>
 800772e:	bf00      	nop
 8007730:	0800798b 	.word	0x0800798b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800773c:	b29b      	uxth	r3, r3
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007748:	b29b      	uxth	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 808b 	beq.w	8007866 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007750:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 8086 	beq.w	8007866 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	330c      	adds	r3, #12
 8007760:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007764:	e853 3f00 	ldrex	r3, [r3]
 8007768:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800776a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007770:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	330c      	adds	r3, #12
 800777a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800777e:	647a      	str	r2, [r7, #68]	; 0x44
 8007780:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007782:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007784:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007786:	e841 2300 	strex	r3, r2, [r1]
 800778a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800778c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1e3      	bne.n	800775a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	3314      	adds	r3, #20
 8007798:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	e853 3f00 	ldrex	r3, [r3]
 80077a0:	623b      	str	r3, [r7, #32]
   return(result);
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	f023 0301 	bic.w	r3, r3, #1
 80077a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3314      	adds	r3, #20
 80077b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80077b6:	633a      	str	r2, [r7, #48]	; 0x30
 80077b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1e3      	bne.n	8007792 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2220      	movs	r2, #32
 80077ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	330c      	adds	r3, #12
 80077de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	e853 3f00 	ldrex	r3, [r3]
 80077e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f023 0310 	bic.w	r3, r3, #16
 80077ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	330c      	adds	r3, #12
 80077f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80077fc:	61fa      	str	r2, [r7, #28]
 80077fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007800:	69b9      	ldr	r1, [r7, #24]
 8007802:	69fa      	ldr	r2, [r7, #28]
 8007804:	e841 2300 	strex	r3, r2, [r1]
 8007808:	617b      	str	r3, [r7, #20]
   return(result);
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e3      	bne.n	80077d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007810:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f848 	bl	80078ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800781c:	e023      	b.n	8007866 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800781e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007826:	2b00      	cmp	r3, #0
 8007828:	d009      	beq.n	800783e <HAL_UART_IRQHandler+0x4ea>
 800782a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800782e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f8bb 	bl	80079b2 <UART_Transmit_IT>
    return;
 800783c:	e014      	b.n	8007868 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800783e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00e      	beq.n	8007868 <HAL_UART_IRQHandler+0x514>
 800784a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800784e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007852:	2b00      	cmp	r3, #0
 8007854:	d008      	beq.n	8007868 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f8fb 	bl	8007a52 <UART_EndTransmit_IT>
    return;
 800785c:	e004      	b.n	8007868 <HAL_UART_IRQHandler+0x514>
    return;
 800785e:	bf00      	nop
 8007860:	e002      	b.n	8007868 <HAL_UART_IRQHandler+0x514>
      return;
 8007862:	bf00      	nop
 8007864:	e000      	b.n	8007868 <HAL_UART_IRQHandler+0x514>
      return;
 8007866:	bf00      	nop
  }
}
 8007868:	37e8      	adds	r7, #232	; 0xe8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop

08007870 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	460b      	mov	r3, r1
 80078b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b095      	sub	sp, #84	; 0x54
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	330c      	adds	r3, #12
 80078d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d6:	e853 3f00 	ldrex	r3, [r3]
 80078da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	330c      	adds	r3, #12
 80078ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078ec:	643a      	str	r2, [r7, #64]	; 0x40
 80078ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078f4:	e841 2300 	strex	r3, r2, [r1]
 80078f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1e5      	bne.n	80078cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3314      	adds	r3, #20
 8007906:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	6a3b      	ldr	r3, [r7, #32]
 800790a:	e853 3f00 	ldrex	r3, [r3]
 800790e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	f023 0301 	bic.w	r3, r3, #1
 8007916:	64bb      	str	r3, [r7, #72]	; 0x48
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3314      	adds	r3, #20
 800791e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007920:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007922:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007924:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007928:	e841 2300 	strex	r3, r2, [r1]
 800792c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1e5      	bne.n	8007900 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007938:	2b01      	cmp	r3, #1
 800793a:	d119      	bne.n	8007970 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	330c      	adds	r3, #12
 8007942:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	e853 3f00 	ldrex	r3, [r3]
 800794a:	60bb      	str	r3, [r7, #8]
   return(result);
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	f023 0310 	bic.w	r3, r3, #16
 8007952:	647b      	str	r3, [r7, #68]	; 0x44
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	330c      	adds	r3, #12
 800795a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800795c:	61ba      	str	r2, [r7, #24]
 800795e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007960:	6979      	ldr	r1, [r7, #20]
 8007962:	69ba      	ldr	r2, [r7, #24]
 8007964:	e841 2300 	strex	r3, r2, [r1]
 8007968:	613b      	str	r3, [r7, #16]
   return(result);
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1e5      	bne.n	800793c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2220      	movs	r2, #32
 8007974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800797e:	bf00      	nop
 8007980:	3754      	adds	r7, #84	; 0x54
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007996:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f7ff ff77 	bl	8007898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079aa:	bf00      	nop
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b085      	sub	sp, #20
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b21      	cmp	r3, #33	; 0x21
 80079c4:	d13e      	bne.n	8007a44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ce:	d114      	bne.n	80079fa <UART_Transmit_IT+0x48>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d110      	bne.n	80079fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	1c9a      	adds	r2, r3, #2
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	621a      	str	r2, [r3, #32]
 80079f8:	e008      	b.n	8007a0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	1c59      	adds	r1, r3, #1
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	6211      	str	r1, [r2, #32]
 8007a04:	781a      	ldrb	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	3b01      	subs	r3, #1
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10f      	bne.n	8007a40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68da      	ldr	r2, [r3, #12]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68da      	ldr	r2, [r3, #12]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	e000      	b.n	8007a46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a44:	2302      	movs	r3, #2
  }
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b082      	sub	sp, #8
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68da      	ldr	r2, [r3, #12]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7ff fefc 	bl	8007870 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b08c      	sub	sp, #48	; 0x30
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b22      	cmp	r3, #34	; 0x22
 8007a94:	f040 80ab 	bne.w	8007bee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aa0:	d117      	bne.n	8007ad2 <UART_Receive_IT+0x50>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d113      	bne.n	8007ad2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aca:	1c9a      	adds	r2, r3, #2
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	629a      	str	r2, [r3, #40]	; 0x28
 8007ad0:	e026      	b.n	8007b20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ae4:	d007      	beq.n	8007af6 <UART_Receive_IT+0x74>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10a      	bne.n	8007b04 <UART_Receive_IT+0x82>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d106      	bne.n	8007b04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b00:	701a      	strb	r2, [r3, #0]
 8007b02:	e008      	b.n	8007b16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1a:	1c5a      	adds	r2, r3, #1
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	3b01      	subs	r3, #1
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d15a      	bne.n	8007bea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68da      	ldr	r2, [r3, #12]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f022 0220 	bic.w	r2, r2, #32
 8007b42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68da      	ldr	r2, [r3, #12]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	695a      	ldr	r2, [r3, #20]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f022 0201 	bic.w	r2, r2, #1
 8007b62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2220      	movs	r2, #32
 8007b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d135      	bne.n	8007be0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	330c      	adds	r3, #12
 8007b80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	613b      	str	r3, [r7, #16]
   return(result);
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	f023 0310 	bic.w	r3, r3, #16
 8007b90:	627b      	str	r3, [r7, #36]	; 0x24
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	330c      	adds	r3, #12
 8007b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b9a:	623a      	str	r2, [r7, #32]
 8007b9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9e:	69f9      	ldr	r1, [r7, #28]
 8007ba0:	6a3a      	ldr	r2, [r7, #32]
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1e5      	bne.n	8007b7a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0310 	and.w	r3, r3, #16
 8007bb8:	2b10      	cmp	r3, #16
 8007bba:	d10a      	bne.n	8007bd2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	60fb      	str	r3, [r7, #12]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	60fb      	str	r3, [r7, #12]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f7ff fe67 	bl	80078ac <HAL_UARTEx_RxEventCallback>
 8007bde:	e002      	b.n	8007be6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff fe4f 	bl	8007884 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	e002      	b.n	8007bf0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	e000      	b.n	8007bf0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007bee:	2302      	movs	r3, #2
  }
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3730      	adds	r7, #48	; 0x30
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bfc:	b0c0      	sub	sp, #256	; 0x100
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c14:	68d9      	ldr	r1, [r3, #12]
 8007c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	ea40 0301 	orr.w	r3, r0, r1
 8007c20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c26:	689a      	ldr	r2, [r3, #8]
 8007c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	431a      	orrs	r2, r3
 8007c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007c50:	f021 010c 	bic.w	r1, r1, #12
 8007c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c5e:	430b      	orrs	r3, r1
 8007c60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c72:	6999      	ldr	r1, [r3, #24]
 8007c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	ea40 0301 	orr.w	r3, r0, r1
 8007c7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	4b8f      	ldr	r3, [pc, #572]	; (8007ec4 <UART_SetConfig+0x2cc>)
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d005      	beq.n	8007c98 <UART_SetConfig+0xa0>
 8007c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	4b8d      	ldr	r3, [pc, #564]	; (8007ec8 <UART_SetConfig+0x2d0>)
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d104      	bne.n	8007ca2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c98:	f7fd fe22 	bl	80058e0 <HAL_RCC_GetPCLK2Freq>
 8007c9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007ca0:	e003      	b.n	8007caa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ca2:	f7fd fe09 	bl	80058b8 <HAL_RCC_GetPCLK1Freq>
 8007ca6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cae:	69db      	ldr	r3, [r3, #28]
 8007cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cb4:	f040 810c 	bne.w	8007ed0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007cc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007cc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007cca:	4622      	mov	r2, r4
 8007ccc:	462b      	mov	r3, r5
 8007cce:	1891      	adds	r1, r2, r2
 8007cd0:	65b9      	str	r1, [r7, #88]	; 0x58
 8007cd2:	415b      	adcs	r3, r3
 8007cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007cda:	4621      	mov	r1, r4
 8007cdc:	eb12 0801 	adds.w	r8, r2, r1
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	eb43 0901 	adc.w	r9, r3, r1
 8007ce6:	f04f 0200 	mov.w	r2, #0
 8007cea:	f04f 0300 	mov.w	r3, #0
 8007cee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007cf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007cf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007cfa:	4690      	mov	r8, r2
 8007cfc:	4699      	mov	r9, r3
 8007cfe:	4623      	mov	r3, r4
 8007d00:	eb18 0303 	adds.w	r3, r8, r3
 8007d04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d08:	462b      	mov	r3, r5
 8007d0a:	eb49 0303 	adc.w	r3, r9, r3
 8007d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007d22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007d26:	460b      	mov	r3, r1
 8007d28:	18db      	adds	r3, r3, r3
 8007d2a:	653b      	str	r3, [r7, #80]	; 0x50
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	eb42 0303 	adc.w	r3, r2, r3
 8007d32:	657b      	str	r3, [r7, #84]	; 0x54
 8007d34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007d38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d3c:	f7f8 ff74 	bl	8000c28 <__aeabi_uldivmod>
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	4b61      	ldr	r3, [pc, #388]	; (8007ecc <UART_SetConfig+0x2d4>)
 8007d46:	fba3 2302 	umull	r2, r3, r3, r2
 8007d4a:	095b      	lsrs	r3, r3, #5
 8007d4c:	011c      	lsls	r4, r3, #4
 8007d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d52:	2200      	movs	r2, #0
 8007d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007d5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007d60:	4642      	mov	r2, r8
 8007d62:	464b      	mov	r3, r9
 8007d64:	1891      	adds	r1, r2, r2
 8007d66:	64b9      	str	r1, [r7, #72]	; 0x48
 8007d68:	415b      	adcs	r3, r3
 8007d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007d70:	4641      	mov	r1, r8
 8007d72:	eb12 0a01 	adds.w	sl, r2, r1
 8007d76:	4649      	mov	r1, r9
 8007d78:	eb43 0b01 	adc.w	fp, r3, r1
 8007d7c:	f04f 0200 	mov.w	r2, #0
 8007d80:	f04f 0300 	mov.w	r3, #0
 8007d84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d90:	4692      	mov	sl, r2
 8007d92:	469b      	mov	fp, r3
 8007d94:	4643      	mov	r3, r8
 8007d96:	eb1a 0303 	adds.w	r3, sl, r3
 8007d9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d9e:	464b      	mov	r3, r9
 8007da0:	eb4b 0303 	adc.w	r3, fp, r3
 8007da4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007db4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007db8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	18db      	adds	r3, r3, r3
 8007dc0:	643b      	str	r3, [r7, #64]	; 0x40
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	eb42 0303 	adc.w	r3, r2, r3
 8007dc8:	647b      	str	r3, [r7, #68]	; 0x44
 8007dca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007dce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007dd2:	f7f8 ff29 	bl	8000c28 <__aeabi_uldivmod>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	460b      	mov	r3, r1
 8007dda:	4611      	mov	r1, r2
 8007ddc:	4b3b      	ldr	r3, [pc, #236]	; (8007ecc <UART_SetConfig+0x2d4>)
 8007dde:	fba3 2301 	umull	r2, r3, r3, r1
 8007de2:	095b      	lsrs	r3, r3, #5
 8007de4:	2264      	movs	r2, #100	; 0x64
 8007de6:	fb02 f303 	mul.w	r3, r2, r3
 8007dea:	1acb      	subs	r3, r1, r3
 8007dec:	00db      	lsls	r3, r3, #3
 8007dee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007df2:	4b36      	ldr	r3, [pc, #216]	; (8007ecc <UART_SetConfig+0x2d4>)
 8007df4:	fba3 2302 	umull	r2, r3, r3, r2
 8007df8:	095b      	lsrs	r3, r3, #5
 8007dfa:	005b      	lsls	r3, r3, #1
 8007dfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e00:	441c      	add	r4, r3
 8007e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e06:	2200      	movs	r2, #0
 8007e08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007e10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007e14:	4642      	mov	r2, r8
 8007e16:	464b      	mov	r3, r9
 8007e18:	1891      	adds	r1, r2, r2
 8007e1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e1c:	415b      	adcs	r3, r3
 8007e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e24:	4641      	mov	r1, r8
 8007e26:	1851      	adds	r1, r2, r1
 8007e28:	6339      	str	r1, [r7, #48]	; 0x30
 8007e2a:	4649      	mov	r1, r9
 8007e2c:	414b      	adcs	r3, r1
 8007e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e30:	f04f 0200 	mov.w	r2, #0
 8007e34:	f04f 0300 	mov.w	r3, #0
 8007e38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007e3c:	4659      	mov	r1, fp
 8007e3e:	00cb      	lsls	r3, r1, #3
 8007e40:	4651      	mov	r1, sl
 8007e42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e46:	4651      	mov	r1, sl
 8007e48:	00ca      	lsls	r2, r1, #3
 8007e4a:	4610      	mov	r0, r2
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	4603      	mov	r3, r0
 8007e50:	4642      	mov	r2, r8
 8007e52:	189b      	adds	r3, r3, r2
 8007e54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e58:	464b      	mov	r3, r9
 8007e5a:	460a      	mov	r2, r1
 8007e5c:	eb42 0303 	adc.w	r3, r2, r3
 8007e60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007e70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007e74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007e78:	460b      	mov	r3, r1
 8007e7a:	18db      	adds	r3, r3, r3
 8007e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e7e:	4613      	mov	r3, r2
 8007e80:	eb42 0303 	adc.w	r3, r2, r3
 8007e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007e8e:	f7f8 fecb 	bl	8000c28 <__aeabi_uldivmod>
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	4b0d      	ldr	r3, [pc, #52]	; (8007ecc <UART_SetConfig+0x2d4>)
 8007e98:	fba3 1302 	umull	r1, r3, r3, r2
 8007e9c:	095b      	lsrs	r3, r3, #5
 8007e9e:	2164      	movs	r1, #100	; 0x64
 8007ea0:	fb01 f303 	mul.w	r3, r1, r3
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	00db      	lsls	r3, r3, #3
 8007ea8:	3332      	adds	r3, #50	; 0x32
 8007eaa:	4a08      	ldr	r2, [pc, #32]	; (8007ecc <UART_SetConfig+0x2d4>)
 8007eac:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb0:	095b      	lsrs	r3, r3, #5
 8007eb2:	f003 0207 	and.w	r2, r3, #7
 8007eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4422      	add	r2, r4
 8007ebe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ec0:	e105      	b.n	80080ce <UART_SetConfig+0x4d6>
 8007ec2:	bf00      	nop
 8007ec4:	40011000 	.word	0x40011000
 8007ec8:	40011400 	.word	0x40011400
 8007ecc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007eda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007ede:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007ee2:	4642      	mov	r2, r8
 8007ee4:	464b      	mov	r3, r9
 8007ee6:	1891      	adds	r1, r2, r2
 8007ee8:	6239      	str	r1, [r7, #32]
 8007eea:	415b      	adcs	r3, r3
 8007eec:	627b      	str	r3, [r7, #36]	; 0x24
 8007eee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ef2:	4641      	mov	r1, r8
 8007ef4:	1854      	adds	r4, r2, r1
 8007ef6:	4649      	mov	r1, r9
 8007ef8:	eb43 0501 	adc.w	r5, r3, r1
 8007efc:	f04f 0200 	mov.w	r2, #0
 8007f00:	f04f 0300 	mov.w	r3, #0
 8007f04:	00eb      	lsls	r3, r5, #3
 8007f06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f0a:	00e2      	lsls	r2, r4, #3
 8007f0c:	4614      	mov	r4, r2
 8007f0e:	461d      	mov	r5, r3
 8007f10:	4643      	mov	r3, r8
 8007f12:	18e3      	adds	r3, r4, r3
 8007f14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f18:	464b      	mov	r3, r9
 8007f1a:	eb45 0303 	adc.w	r3, r5, r3
 8007f1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f32:	f04f 0200 	mov.w	r2, #0
 8007f36:	f04f 0300 	mov.w	r3, #0
 8007f3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007f3e:	4629      	mov	r1, r5
 8007f40:	008b      	lsls	r3, r1, #2
 8007f42:	4621      	mov	r1, r4
 8007f44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f48:	4621      	mov	r1, r4
 8007f4a:	008a      	lsls	r2, r1, #2
 8007f4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007f50:	f7f8 fe6a 	bl	8000c28 <__aeabi_uldivmod>
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	4b60      	ldr	r3, [pc, #384]	; (80080dc <UART_SetConfig+0x4e4>)
 8007f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8007f5e:	095b      	lsrs	r3, r3, #5
 8007f60:	011c      	lsls	r4, r3, #4
 8007f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f66:	2200      	movs	r2, #0
 8007f68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007f70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007f74:	4642      	mov	r2, r8
 8007f76:	464b      	mov	r3, r9
 8007f78:	1891      	adds	r1, r2, r2
 8007f7a:	61b9      	str	r1, [r7, #24]
 8007f7c:	415b      	adcs	r3, r3
 8007f7e:	61fb      	str	r3, [r7, #28]
 8007f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f84:	4641      	mov	r1, r8
 8007f86:	1851      	adds	r1, r2, r1
 8007f88:	6139      	str	r1, [r7, #16]
 8007f8a:	4649      	mov	r1, r9
 8007f8c:	414b      	adcs	r3, r1
 8007f8e:	617b      	str	r3, [r7, #20]
 8007f90:	f04f 0200 	mov.w	r2, #0
 8007f94:	f04f 0300 	mov.w	r3, #0
 8007f98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f9c:	4659      	mov	r1, fp
 8007f9e:	00cb      	lsls	r3, r1, #3
 8007fa0:	4651      	mov	r1, sl
 8007fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fa6:	4651      	mov	r1, sl
 8007fa8:	00ca      	lsls	r2, r1, #3
 8007faa:	4610      	mov	r0, r2
 8007fac:	4619      	mov	r1, r3
 8007fae:	4603      	mov	r3, r0
 8007fb0:	4642      	mov	r2, r8
 8007fb2:	189b      	adds	r3, r3, r2
 8007fb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007fb8:	464b      	mov	r3, r9
 8007fba:	460a      	mov	r2, r1
 8007fbc:	eb42 0303 	adc.w	r3, r2, r3
 8007fc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8007fce:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007fd0:	f04f 0200 	mov.w	r2, #0
 8007fd4:	f04f 0300 	mov.w	r3, #0
 8007fd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007fdc:	4649      	mov	r1, r9
 8007fde:	008b      	lsls	r3, r1, #2
 8007fe0:	4641      	mov	r1, r8
 8007fe2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fe6:	4641      	mov	r1, r8
 8007fe8:	008a      	lsls	r2, r1, #2
 8007fea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007fee:	f7f8 fe1b 	bl	8000c28 <__aeabi_uldivmod>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	4b39      	ldr	r3, [pc, #228]	; (80080dc <UART_SetConfig+0x4e4>)
 8007ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8007ffc:	095b      	lsrs	r3, r3, #5
 8007ffe:	2164      	movs	r1, #100	; 0x64
 8008000:	fb01 f303 	mul.w	r3, r1, r3
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	011b      	lsls	r3, r3, #4
 8008008:	3332      	adds	r3, #50	; 0x32
 800800a:	4a34      	ldr	r2, [pc, #208]	; (80080dc <UART_SetConfig+0x4e4>)
 800800c:	fba2 2303 	umull	r2, r3, r2, r3
 8008010:	095b      	lsrs	r3, r3, #5
 8008012:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008016:	441c      	add	r4, r3
 8008018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800801c:	2200      	movs	r2, #0
 800801e:	673b      	str	r3, [r7, #112]	; 0x70
 8008020:	677a      	str	r2, [r7, #116]	; 0x74
 8008022:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008026:	4642      	mov	r2, r8
 8008028:	464b      	mov	r3, r9
 800802a:	1891      	adds	r1, r2, r2
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	415b      	adcs	r3, r3
 8008030:	60fb      	str	r3, [r7, #12]
 8008032:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008036:	4641      	mov	r1, r8
 8008038:	1851      	adds	r1, r2, r1
 800803a:	6039      	str	r1, [r7, #0]
 800803c:	4649      	mov	r1, r9
 800803e:	414b      	adcs	r3, r1
 8008040:	607b      	str	r3, [r7, #4]
 8008042:	f04f 0200 	mov.w	r2, #0
 8008046:	f04f 0300 	mov.w	r3, #0
 800804a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800804e:	4659      	mov	r1, fp
 8008050:	00cb      	lsls	r3, r1, #3
 8008052:	4651      	mov	r1, sl
 8008054:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008058:	4651      	mov	r1, sl
 800805a:	00ca      	lsls	r2, r1, #3
 800805c:	4610      	mov	r0, r2
 800805e:	4619      	mov	r1, r3
 8008060:	4603      	mov	r3, r0
 8008062:	4642      	mov	r2, r8
 8008064:	189b      	adds	r3, r3, r2
 8008066:	66bb      	str	r3, [r7, #104]	; 0x68
 8008068:	464b      	mov	r3, r9
 800806a:	460a      	mov	r2, r1
 800806c:	eb42 0303 	adc.w	r3, r2, r3
 8008070:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	663b      	str	r3, [r7, #96]	; 0x60
 800807c:	667a      	str	r2, [r7, #100]	; 0x64
 800807e:	f04f 0200 	mov.w	r2, #0
 8008082:	f04f 0300 	mov.w	r3, #0
 8008086:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800808a:	4649      	mov	r1, r9
 800808c:	008b      	lsls	r3, r1, #2
 800808e:	4641      	mov	r1, r8
 8008090:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008094:	4641      	mov	r1, r8
 8008096:	008a      	lsls	r2, r1, #2
 8008098:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800809c:	f7f8 fdc4 	bl	8000c28 <__aeabi_uldivmod>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4b0d      	ldr	r3, [pc, #52]	; (80080dc <UART_SetConfig+0x4e4>)
 80080a6:	fba3 1302 	umull	r1, r3, r3, r2
 80080aa:	095b      	lsrs	r3, r3, #5
 80080ac:	2164      	movs	r1, #100	; 0x64
 80080ae:	fb01 f303 	mul.w	r3, r1, r3
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	011b      	lsls	r3, r3, #4
 80080b6:	3332      	adds	r3, #50	; 0x32
 80080b8:	4a08      	ldr	r2, [pc, #32]	; (80080dc <UART_SetConfig+0x4e4>)
 80080ba:	fba2 2303 	umull	r2, r3, r2, r3
 80080be:	095b      	lsrs	r3, r3, #5
 80080c0:	f003 020f 	and.w	r2, r3, #15
 80080c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4422      	add	r2, r4
 80080cc:	609a      	str	r2, [r3, #8]
}
 80080ce:	bf00      	nop
 80080d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80080d4:	46bd      	mov	sp, r7
 80080d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080da:	bf00      	nop
 80080dc:	51eb851f 	.word	0x51eb851f

080080e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4603      	mov	r3, r0
 80080e8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80080ea:	2300      	movs	r3, #0
 80080ec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80080ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80080f2:	2b84      	cmp	r3, #132	; 0x84
 80080f4:	d005      	beq.n	8008102 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80080f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	4413      	add	r3, r2
 80080fe:	3303      	adds	r3, #3
 8008100:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008102:	68fb      	ldr	r3, [r7, #12]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008114:	f000 faf6 	bl	8008704 <vTaskStartScheduler>
  
  return osOK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	bd80      	pop	{r7, pc}

0800811e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800811e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008120:	b089      	sub	sp, #36	; 0x24
 8008122:	af04      	add	r7, sp, #16
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	695b      	ldr	r3, [r3, #20]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d020      	beq.n	8008172 <osThreadCreate+0x54>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d01c      	beq.n	8008172 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685c      	ldr	r4, [r3, #4]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681d      	ldr	r5, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	691e      	ldr	r6, [r3, #16]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800814a:	4618      	mov	r0, r3
 800814c:	f7ff ffc8 	bl	80080e0 <makeFreeRtosPriority>
 8008150:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800815a:	9202      	str	r2, [sp, #8]
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	9100      	str	r1, [sp, #0]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	4632      	mov	r2, r6
 8008164:	4629      	mov	r1, r5
 8008166:	4620      	mov	r0, r4
 8008168:	f000 f8ed 	bl	8008346 <xTaskCreateStatic>
 800816c:	4603      	mov	r3, r0
 800816e:	60fb      	str	r3, [r7, #12]
 8008170:	e01c      	b.n	80081ac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	685c      	ldr	r4, [r3, #4]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800817e:	b29e      	uxth	r6, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008186:	4618      	mov	r0, r3
 8008188:	f7ff ffaa 	bl	80080e0 <makeFreeRtosPriority>
 800818c:	4602      	mov	r2, r0
 800818e:	f107 030c 	add.w	r3, r7, #12
 8008192:	9301      	str	r3, [sp, #4]
 8008194:	9200      	str	r2, [sp, #0]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	4632      	mov	r2, r6
 800819a:	4629      	mov	r1, r5
 800819c:	4620      	mov	r0, r4
 800819e:	f000 f92f 	bl	8008400 <xTaskCreate>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d001      	beq.n	80081ac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80081a8:	2300      	movs	r3, #0
 80081aa:	e000      	b.n	80081ae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80081ac:	68fb      	ldr	r3, [r7, #12]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b084      	sub	sp, #16
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d001      	beq.n	80081cc <osDelay+0x16>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	e000      	b.n	80081ce <osDelay+0x18>
 80081cc:	2301      	movs	r3, #1
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 fa64 	bl	800869c <vTaskDelay>
  
  return osOK;
 80081d4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80081de:	b480      	push	{r7}
 80081e0:	b083      	sub	sp, #12
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f103 0208 	add.w	r2, r3, #8
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f04f 32ff 	mov.w	r2, #4294967295
 80081f6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f103 0208 	add.w	r2, r3, #8
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f103 0208 	add.w	r2, r3, #8
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008212:	bf00      	nop
 8008214:	370c      	adds	r7, #12
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800821e:	b480      	push	{r7}
 8008220:	b083      	sub	sp, #12
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	689a      	ldr	r2, [r3, #8]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	1c5a      	adds	r2, r3, #1
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	601a      	str	r2, [r3, #0]
}
 8008274:	bf00      	nop
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008296:	d103      	bne.n	80082a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	60fb      	str	r3, [r7, #12]
 800829e:	e00c      	b.n	80082ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	3308      	adds	r3, #8
 80082a4:	60fb      	str	r3, [r7, #12]
 80082a6:	e002      	b.n	80082ae <vListInsert+0x2e>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	60fb      	str	r3, [r7, #12]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d2f6      	bcs.n	80082a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	685a      	ldr	r2, [r3, #4]
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	683a      	ldr	r2, [r7, #0]
 80082c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	1c5a      	adds	r2, r3, #1
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	601a      	str	r2, [r3, #0]
}
 80082e6:	bf00      	nop
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80082f2:	b480      	push	{r7}
 80082f4:	b085      	sub	sp, #20
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	6892      	ldr	r2, [r2, #8]
 8008308:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	6852      	ldr	r2, [r2, #4]
 8008312:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	429a      	cmp	r2, r3
 800831c:	d103      	bne.n	8008326 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	689a      	ldr	r2, [r3, #8]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	1e5a      	subs	r2, r3, #1
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3714      	adds	r7, #20
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008346:	b580      	push	{r7, lr}
 8008348:	b08e      	sub	sp, #56	; 0x38
 800834a:	af04      	add	r7, sp, #16
 800834c:	60f8      	str	r0, [r7, #12]
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	607a      	str	r2, [r7, #4]
 8008352:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10a      	bne.n	8008370 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800835a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800836c:	bf00      	nop
 800836e:	e7fe      	b.n	800836e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10a      	bne.n	800838c <xTaskCreateStatic+0x46>
	__asm volatile
 8008376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837a:	f383 8811 	msr	BASEPRI, r3
 800837e:	f3bf 8f6f 	isb	sy
 8008382:	f3bf 8f4f 	dsb	sy
 8008386:	61fb      	str	r3, [r7, #28]
}
 8008388:	bf00      	nop
 800838a:	e7fe      	b.n	800838a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800838c:	23b4      	movs	r3, #180	; 0xb4
 800838e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	2bb4      	cmp	r3, #180	; 0xb4
 8008394:	d00a      	beq.n	80083ac <xTaskCreateStatic+0x66>
	__asm volatile
 8008396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839a:	f383 8811 	msr	BASEPRI, r3
 800839e:	f3bf 8f6f 	isb	sy
 80083a2:	f3bf 8f4f 	dsb	sy
 80083a6:	61bb      	str	r3, [r7, #24]
}
 80083a8:	bf00      	nop
 80083aa:	e7fe      	b.n	80083aa <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80083ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80083ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d01e      	beq.n	80083f2 <xTaskCreateStatic+0xac>
 80083b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d01b      	beq.n	80083f2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083bc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80083be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083c2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	2202      	movs	r2, #2
 80083c8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80083cc:	2300      	movs	r3, #0
 80083ce:	9303      	str	r3, [sp, #12]
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	9302      	str	r3, [sp, #8]
 80083d4:	f107 0314 	add.w	r3, r7, #20
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	68b9      	ldr	r1, [r7, #8]
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f000 f851 	bl	800848c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083ec:	f000 f8ec 	bl	80085c8 <prvAddNewTaskToReadyList>
 80083f0:	e001      	b.n	80083f6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80083f2:	2300      	movs	r3, #0
 80083f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80083f6:	697b      	ldr	r3, [r7, #20]
	}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3728      	adds	r7, #40	; 0x28
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008400:	b580      	push	{r7, lr}
 8008402:	b08c      	sub	sp, #48	; 0x30
 8008404:	af04      	add	r7, sp, #16
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	603b      	str	r3, [r7, #0]
 800840c:	4613      	mov	r3, r2
 800840e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008410:	88fb      	ldrh	r3, [r7, #6]
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4618      	mov	r0, r3
 8008416:	f000 feff 	bl	8009218 <pvPortMalloc>
 800841a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00e      	beq.n	8008440 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008422:	20b4      	movs	r0, #180	; 0xb4
 8008424:	f000 fef8 	bl	8009218 <pvPortMalloc>
 8008428:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d003      	beq.n	8008438 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	631a      	str	r2, [r3, #48]	; 0x30
 8008436:	e005      	b.n	8008444 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008438:	6978      	ldr	r0, [r7, #20]
 800843a:	f000 ffb9 	bl	80093b0 <vPortFree>
 800843e:	e001      	b.n	8008444 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008440:	2300      	movs	r3, #0
 8008442:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d017      	beq.n	800847a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008452:	88fa      	ldrh	r2, [r7, #6]
 8008454:	2300      	movs	r3, #0
 8008456:	9303      	str	r3, [sp, #12]
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	9302      	str	r3, [sp, #8]
 800845c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845e:	9301      	str	r3, [sp, #4]
 8008460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	68b9      	ldr	r1, [r7, #8]
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f000 f80f 	bl	800848c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800846e:	69f8      	ldr	r0, [r7, #28]
 8008470:	f000 f8aa 	bl	80085c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008474:	2301      	movs	r3, #1
 8008476:	61bb      	str	r3, [r7, #24]
 8008478:	e002      	b.n	8008480 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800847a:	f04f 33ff 	mov.w	r3, #4294967295
 800847e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008480:	69bb      	ldr	r3, [r7, #24]
	}
 8008482:	4618      	mov	r0, r3
 8008484:	3720      	adds	r7, #32
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b088      	sub	sp, #32
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
 8008498:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80084a4:	3b01      	subs	r3, #1
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4413      	add	r3, r2
 80084aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	f023 0307 	bic.w	r3, r3, #7
 80084b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	f003 0307 	and.w	r3, r3, #7
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00a      	beq.n	80084d4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80084be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	617b      	str	r3, [r7, #20]
}
 80084d0:	bf00      	nop
 80084d2:	e7fe      	b.n	80084d2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d01f      	beq.n	800851a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084da:	2300      	movs	r3, #0
 80084dc:	61fb      	str	r3, [r7, #28]
 80084de:	e012      	b.n	8008506 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	4413      	add	r3, r2
 80084e6:	7819      	ldrb	r1, [r3, #0]
 80084e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	4413      	add	r3, r2
 80084ee:	3334      	adds	r3, #52	; 0x34
 80084f0:	460a      	mov	r2, r1
 80084f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80084f4:	68ba      	ldr	r2, [r7, #8]
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	4413      	add	r3, r2
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d006      	beq.n	800850e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	3301      	adds	r3, #1
 8008504:	61fb      	str	r3, [r7, #28]
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	2b0f      	cmp	r3, #15
 800850a:	d9e9      	bls.n	80084e0 <prvInitialiseNewTask+0x54>
 800850c:	e000      	b.n	8008510 <prvInitialiseNewTask+0x84>
			{
				break;
 800850e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008512:	2200      	movs	r2, #0
 8008514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008518:	e003      	b.n	8008522 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800851a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851c:	2200      	movs	r2, #0
 800851e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008524:	2b06      	cmp	r3, #6
 8008526:	d901      	bls.n	800852c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008528:	2306      	movs	r3, #6
 800852a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800852c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008530:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008536:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	2200      	movs	r2, #0
 800853c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800853e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008540:	3304      	adds	r3, #4
 8008542:	4618      	mov	r0, r3
 8008544:	f7ff fe6b 	bl	800821e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854a:	3318      	adds	r3, #24
 800854c:	4618      	mov	r0, r3
 800854e:	f7ff fe66 	bl	800821e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008556:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855a:	f1c3 0207 	rsb	r2, r3, #7
 800855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008560:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008566:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856a:	2200      	movs	r2, #0
 800856c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008572:	2200      	movs	r2, #0
 8008574:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	334c      	adds	r3, #76	; 0x4c
 800857c:	2260      	movs	r2, #96	; 0x60
 800857e:	2100      	movs	r1, #0
 8008580:	4618      	mov	r0, r3
 8008582:	f001 f956 	bl	8009832 <memset>
 8008586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008588:	4a0c      	ldr	r2, [pc, #48]	; (80085bc <prvInitialiseNewTask+0x130>)
 800858a:	651a      	str	r2, [r3, #80]	; 0x50
 800858c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858e:	4a0c      	ldr	r2, [pc, #48]	; (80085c0 <prvInitialiseNewTask+0x134>)
 8008590:	655a      	str	r2, [r3, #84]	; 0x54
 8008592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008594:	4a0b      	ldr	r2, [pc, #44]	; (80085c4 <prvInitialiseNewTask+0x138>)
 8008596:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	68f9      	ldr	r1, [r7, #12]
 800859c:	69b8      	ldr	r0, [r7, #24]
 800859e:	f000 fc2f 	bl	8008e00 <pxPortInitialiseStack>
 80085a2:	4602      	mov	r2, r0
 80085a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80085a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d002      	beq.n	80085b4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80085ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085b4:	bf00      	nop
 80085b6:	3720      	adds	r7, #32
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	0800b870 	.word	0x0800b870
 80085c0:	0800b890 	.word	0x0800b890
 80085c4:	0800b850 	.word	0x0800b850

080085c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80085d0:	f000 fd40 	bl	8009054 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80085d4:	4b2a      	ldr	r3, [pc, #168]	; (8008680 <prvAddNewTaskToReadyList+0xb8>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	3301      	adds	r3, #1
 80085da:	4a29      	ldr	r2, [pc, #164]	; (8008680 <prvAddNewTaskToReadyList+0xb8>)
 80085dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80085de:	4b29      	ldr	r3, [pc, #164]	; (8008684 <prvAddNewTaskToReadyList+0xbc>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d109      	bne.n	80085fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80085e6:	4a27      	ldr	r2, [pc, #156]	; (8008684 <prvAddNewTaskToReadyList+0xbc>)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80085ec:	4b24      	ldr	r3, [pc, #144]	; (8008680 <prvAddNewTaskToReadyList+0xb8>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d110      	bne.n	8008616 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80085f4:	f000 fadc 	bl	8008bb0 <prvInitialiseTaskLists>
 80085f8:	e00d      	b.n	8008616 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80085fa:	4b23      	ldr	r3, [pc, #140]	; (8008688 <prvAddNewTaskToReadyList+0xc0>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d109      	bne.n	8008616 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008602:	4b20      	ldr	r3, [pc, #128]	; (8008684 <prvAddNewTaskToReadyList+0xbc>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860c:	429a      	cmp	r2, r3
 800860e:	d802      	bhi.n	8008616 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008610:	4a1c      	ldr	r2, [pc, #112]	; (8008684 <prvAddNewTaskToReadyList+0xbc>)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008616:	4b1d      	ldr	r3, [pc, #116]	; (800868c <prvAddNewTaskToReadyList+0xc4>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	3301      	adds	r3, #1
 800861c:	4a1b      	ldr	r2, [pc, #108]	; (800868c <prvAddNewTaskToReadyList+0xc4>)
 800861e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008624:	2201      	movs	r2, #1
 8008626:	409a      	lsls	r2, r3
 8008628:	4b19      	ldr	r3, [pc, #100]	; (8008690 <prvAddNewTaskToReadyList+0xc8>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4313      	orrs	r3, r2
 800862e:	4a18      	ldr	r2, [pc, #96]	; (8008690 <prvAddNewTaskToReadyList+0xc8>)
 8008630:	6013      	str	r3, [r2, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008636:	4613      	mov	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	4413      	add	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4a15      	ldr	r2, [pc, #84]	; (8008694 <prvAddNewTaskToReadyList+0xcc>)
 8008640:	441a      	add	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	3304      	adds	r3, #4
 8008646:	4619      	mov	r1, r3
 8008648:	4610      	mov	r0, r2
 800864a:	f7ff fdf5 	bl	8008238 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800864e:	f000 fd31 	bl	80090b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008652:	4b0d      	ldr	r3, [pc, #52]	; (8008688 <prvAddNewTaskToReadyList+0xc0>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00e      	beq.n	8008678 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800865a:	4b0a      	ldr	r3, [pc, #40]	; (8008684 <prvAddNewTaskToReadyList+0xbc>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008664:	429a      	cmp	r2, r3
 8008666:	d207      	bcs.n	8008678 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008668:	4b0b      	ldr	r3, [pc, #44]	; (8008698 <prvAddNewTaskToReadyList+0xd0>)
 800866a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800866e:	601a      	str	r2, [r3, #0]
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008678:	bf00      	nop
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	20000818 	.word	0x20000818
 8008684:	20000718 	.word	0x20000718
 8008688:	20000824 	.word	0x20000824
 800868c:	20000834 	.word	0x20000834
 8008690:	20000820 	.word	0x20000820
 8008694:	2000071c 	.word	0x2000071c
 8008698:	e000ed04 	.word	0xe000ed04

0800869c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80086a4:	2300      	movs	r3, #0
 80086a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d017      	beq.n	80086de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80086ae:	4b13      	ldr	r3, [pc, #76]	; (80086fc <vTaskDelay+0x60>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00a      	beq.n	80086cc <vTaskDelay+0x30>
	__asm volatile
 80086b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	60bb      	str	r3, [r7, #8]
}
 80086c8:	bf00      	nop
 80086ca:	e7fe      	b.n	80086ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80086cc:	f000 f884 	bl	80087d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80086d0:	2100      	movs	r1, #0
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fb2e 	bl	8008d34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80086d8:	f000 f88c 	bl	80087f4 <xTaskResumeAll>
 80086dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d107      	bne.n	80086f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80086e4:	4b06      	ldr	r3, [pc, #24]	; (8008700 <vTaskDelay+0x64>)
 80086e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ea:	601a      	str	r2, [r3, #0]
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80086f4:	bf00      	nop
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	20000840 	.word	0x20000840
 8008700:	e000ed04 	.word	0xe000ed04

08008704 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b08a      	sub	sp, #40	; 0x28
 8008708:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800870a:	2300      	movs	r3, #0
 800870c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800870e:	2300      	movs	r3, #0
 8008710:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008712:	463a      	mov	r2, r7
 8008714:	1d39      	adds	r1, r7, #4
 8008716:	f107 0308 	add.w	r3, r7, #8
 800871a:	4618      	mov	r0, r3
 800871c:	f7f9 fccc 	bl	80020b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	9202      	str	r2, [sp, #8]
 8008728:	9301      	str	r3, [sp, #4]
 800872a:	2300      	movs	r3, #0
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	2300      	movs	r3, #0
 8008730:	460a      	mov	r2, r1
 8008732:	4921      	ldr	r1, [pc, #132]	; (80087b8 <vTaskStartScheduler+0xb4>)
 8008734:	4821      	ldr	r0, [pc, #132]	; (80087bc <vTaskStartScheduler+0xb8>)
 8008736:	f7ff fe06 	bl	8008346 <xTaskCreateStatic>
 800873a:	4603      	mov	r3, r0
 800873c:	4a20      	ldr	r2, [pc, #128]	; (80087c0 <vTaskStartScheduler+0xbc>)
 800873e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008740:	4b1f      	ldr	r3, [pc, #124]	; (80087c0 <vTaskStartScheduler+0xbc>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d002      	beq.n	800874e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008748:	2301      	movs	r3, #1
 800874a:	617b      	str	r3, [r7, #20]
 800874c:	e001      	b.n	8008752 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800874e:	2300      	movs	r3, #0
 8008750:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d11b      	bne.n	8008790 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875c:	f383 8811 	msr	BASEPRI, r3
 8008760:	f3bf 8f6f 	isb	sy
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	613b      	str	r3, [r7, #16]
}
 800876a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800876c:	4b15      	ldr	r3, [pc, #84]	; (80087c4 <vTaskStartScheduler+0xc0>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	334c      	adds	r3, #76	; 0x4c
 8008772:	4a15      	ldr	r2, [pc, #84]	; (80087c8 <vTaskStartScheduler+0xc4>)
 8008774:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008776:	4b15      	ldr	r3, [pc, #84]	; (80087cc <vTaskStartScheduler+0xc8>)
 8008778:	f04f 32ff 	mov.w	r2, #4294967295
 800877c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800877e:	4b14      	ldr	r3, [pc, #80]	; (80087d0 <vTaskStartScheduler+0xcc>)
 8008780:	2201      	movs	r2, #1
 8008782:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008784:	4b13      	ldr	r3, [pc, #76]	; (80087d4 <vTaskStartScheduler+0xd0>)
 8008786:	2200      	movs	r2, #0
 8008788:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800878a:	f000 fbc1 	bl	8008f10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800878e:	e00e      	b.n	80087ae <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008796:	d10a      	bne.n	80087ae <vTaskStartScheduler+0xaa>
	__asm volatile
 8008798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879c:	f383 8811 	msr	BASEPRI, r3
 80087a0:	f3bf 8f6f 	isb	sy
 80087a4:	f3bf 8f4f 	dsb	sy
 80087a8:	60fb      	str	r3, [r7, #12]
}
 80087aa:	bf00      	nop
 80087ac:	e7fe      	b.n	80087ac <vTaskStartScheduler+0xa8>
}
 80087ae:	bf00      	nop
 80087b0:	3718      	adds	r7, #24
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	0800b830 	.word	0x0800b830
 80087bc:	08008b81 	.word	0x08008b81
 80087c0:	2000083c 	.word	0x2000083c
 80087c4:	20000718 	.word	0x20000718
 80087c8:	20000040 	.word	0x20000040
 80087cc:	20000838 	.word	0x20000838
 80087d0:	20000824 	.word	0x20000824
 80087d4:	2000081c 	.word	0x2000081c

080087d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80087d8:	b480      	push	{r7}
 80087da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80087dc:	4b04      	ldr	r3, [pc, #16]	; (80087f0 <vTaskSuspendAll+0x18>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	3301      	adds	r3, #1
 80087e2:	4a03      	ldr	r2, [pc, #12]	; (80087f0 <vTaskSuspendAll+0x18>)
 80087e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80087e6:	bf00      	nop
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	20000840 	.word	0x20000840

080087f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80087fa:	2300      	movs	r3, #0
 80087fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80087fe:	2300      	movs	r3, #0
 8008800:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008802:	4b41      	ldr	r3, [pc, #260]	; (8008908 <xTaskResumeAll+0x114>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10a      	bne.n	8008820 <xTaskResumeAll+0x2c>
	__asm volatile
 800880a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880e:	f383 8811 	msr	BASEPRI, r3
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	603b      	str	r3, [r7, #0]
}
 800881c:	bf00      	nop
 800881e:	e7fe      	b.n	800881e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008820:	f000 fc18 	bl	8009054 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008824:	4b38      	ldr	r3, [pc, #224]	; (8008908 <xTaskResumeAll+0x114>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	3b01      	subs	r3, #1
 800882a:	4a37      	ldr	r2, [pc, #220]	; (8008908 <xTaskResumeAll+0x114>)
 800882c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800882e:	4b36      	ldr	r3, [pc, #216]	; (8008908 <xTaskResumeAll+0x114>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d161      	bne.n	80088fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008836:	4b35      	ldr	r3, [pc, #212]	; (800890c <xTaskResumeAll+0x118>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d05d      	beq.n	80088fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800883e:	e02e      	b.n	800889e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008840:	4b33      	ldr	r3, [pc, #204]	; (8008910 <xTaskResumeAll+0x11c>)
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	3318      	adds	r3, #24
 800884c:	4618      	mov	r0, r3
 800884e:	f7ff fd50 	bl	80082f2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	3304      	adds	r3, #4
 8008856:	4618      	mov	r0, r3
 8008858:	f7ff fd4b 	bl	80082f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008860:	2201      	movs	r2, #1
 8008862:	409a      	lsls	r2, r3
 8008864:	4b2b      	ldr	r3, [pc, #172]	; (8008914 <xTaskResumeAll+0x120>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4313      	orrs	r3, r2
 800886a:	4a2a      	ldr	r2, [pc, #168]	; (8008914 <xTaskResumeAll+0x120>)
 800886c:	6013      	str	r3, [r2, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008872:	4613      	mov	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	4a27      	ldr	r2, [pc, #156]	; (8008918 <xTaskResumeAll+0x124>)
 800887c:	441a      	add	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	3304      	adds	r3, #4
 8008882:	4619      	mov	r1, r3
 8008884:	4610      	mov	r0, r2
 8008886:	f7ff fcd7 	bl	8008238 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800888e:	4b23      	ldr	r3, [pc, #140]	; (800891c <xTaskResumeAll+0x128>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008894:	429a      	cmp	r2, r3
 8008896:	d302      	bcc.n	800889e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008898:	4b21      	ldr	r3, [pc, #132]	; (8008920 <xTaskResumeAll+0x12c>)
 800889a:	2201      	movs	r2, #1
 800889c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800889e:	4b1c      	ldr	r3, [pc, #112]	; (8008910 <xTaskResumeAll+0x11c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1cc      	bne.n	8008840 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80088ac:	f000 fa22 	bl	8008cf4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80088b0:	4b1c      	ldr	r3, [pc, #112]	; (8008924 <xTaskResumeAll+0x130>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d010      	beq.n	80088de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80088bc:	f000 f836 	bl	800892c <xTaskIncrementTick>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d002      	beq.n	80088cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80088c6:	4b16      	ldr	r3, [pc, #88]	; (8008920 <xTaskResumeAll+0x12c>)
 80088c8:	2201      	movs	r2, #1
 80088ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1f1      	bne.n	80088bc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80088d8:	4b12      	ldr	r3, [pc, #72]	; (8008924 <xTaskResumeAll+0x130>)
 80088da:	2200      	movs	r2, #0
 80088dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80088de:	4b10      	ldr	r3, [pc, #64]	; (8008920 <xTaskResumeAll+0x12c>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d009      	beq.n	80088fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80088e6:	2301      	movs	r3, #1
 80088e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80088ea:	4b0f      	ldr	r3, [pc, #60]	; (8008928 <xTaskResumeAll+0x134>)
 80088ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088f0:	601a      	str	r2, [r3, #0]
 80088f2:	f3bf 8f4f 	dsb	sy
 80088f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088fa:	f000 fbdb 	bl	80090b4 <vPortExitCritical>

	return xAlreadyYielded;
 80088fe:	68bb      	ldr	r3, [r7, #8]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	20000840 	.word	0x20000840
 800890c:	20000818 	.word	0x20000818
 8008910:	200007d8 	.word	0x200007d8
 8008914:	20000820 	.word	0x20000820
 8008918:	2000071c 	.word	0x2000071c
 800891c:	20000718 	.word	0x20000718
 8008920:	2000082c 	.word	0x2000082c
 8008924:	20000828 	.word	0x20000828
 8008928:	e000ed04 	.word	0xe000ed04

0800892c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008932:	2300      	movs	r3, #0
 8008934:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008936:	4b4e      	ldr	r3, [pc, #312]	; (8008a70 <xTaskIncrementTick+0x144>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	f040 808e 	bne.w	8008a5c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008940:	4b4c      	ldr	r3, [pc, #304]	; (8008a74 <xTaskIncrementTick+0x148>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3301      	adds	r3, #1
 8008946:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008948:	4a4a      	ldr	r2, [pc, #296]	; (8008a74 <xTaskIncrementTick+0x148>)
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d120      	bne.n	8008996 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008954:	4b48      	ldr	r3, [pc, #288]	; (8008a78 <xTaskIncrementTick+0x14c>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00a      	beq.n	8008974 <xTaskIncrementTick+0x48>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	603b      	str	r3, [r7, #0]
}
 8008970:	bf00      	nop
 8008972:	e7fe      	b.n	8008972 <xTaskIncrementTick+0x46>
 8008974:	4b40      	ldr	r3, [pc, #256]	; (8008a78 <xTaskIncrementTick+0x14c>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	60fb      	str	r3, [r7, #12]
 800897a:	4b40      	ldr	r3, [pc, #256]	; (8008a7c <xTaskIncrementTick+0x150>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a3e      	ldr	r2, [pc, #248]	; (8008a78 <xTaskIncrementTick+0x14c>)
 8008980:	6013      	str	r3, [r2, #0]
 8008982:	4a3e      	ldr	r2, [pc, #248]	; (8008a7c <xTaskIncrementTick+0x150>)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6013      	str	r3, [r2, #0]
 8008988:	4b3d      	ldr	r3, [pc, #244]	; (8008a80 <xTaskIncrementTick+0x154>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	3301      	adds	r3, #1
 800898e:	4a3c      	ldr	r2, [pc, #240]	; (8008a80 <xTaskIncrementTick+0x154>)
 8008990:	6013      	str	r3, [r2, #0]
 8008992:	f000 f9af 	bl	8008cf4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008996:	4b3b      	ldr	r3, [pc, #236]	; (8008a84 <xTaskIncrementTick+0x158>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	429a      	cmp	r2, r3
 800899e:	d348      	bcc.n	8008a32 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089a0:	4b35      	ldr	r3, [pc, #212]	; (8008a78 <xTaskIncrementTick+0x14c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d104      	bne.n	80089b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089aa:	4b36      	ldr	r3, [pc, #216]	; (8008a84 <xTaskIncrementTick+0x158>)
 80089ac:	f04f 32ff 	mov.w	r2, #4294967295
 80089b0:	601a      	str	r2, [r3, #0]
					break;
 80089b2:	e03e      	b.n	8008a32 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089b4:	4b30      	ldr	r3, [pc, #192]	; (8008a78 <xTaskIncrementTick+0x14c>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d203      	bcs.n	80089d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80089cc:	4a2d      	ldr	r2, [pc, #180]	; (8008a84 <xTaskIncrementTick+0x158>)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80089d2:	e02e      	b.n	8008a32 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	3304      	adds	r3, #4
 80089d8:	4618      	mov	r0, r3
 80089da:	f7ff fc8a 	bl	80082f2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d004      	beq.n	80089f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	3318      	adds	r3, #24
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7ff fc81 	bl	80082f2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f4:	2201      	movs	r2, #1
 80089f6:	409a      	lsls	r2, r3
 80089f8:	4b23      	ldr	r3, [pc, #140]	; (8008a88 <xTaskIncrementTick+0x15c>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	4a22      	ldr	r2, [pc, #136]	; (8008a88 <xTaskIncrementTick+0x15c>)
 8008a00:	6013      	str	r3, [r2, #0]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a06:	4613      	mov	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4413      	add	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4a1f      	ldr	r2, [pc, #124]	; (8008a8c <xTaskIncrementTick+0x160>)
 8008a10:	441a      	add	r2, r3
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	3304      	adds	r3, #4
 8008a16:	4619      	mov	r1, r3
 8008a18:	4610      	mov	r0, r2
 8008a1a:	f7ff fc0d 	bl	8008238 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a22:	4b1b      	ldr	r3, [pc, #108]	; (8008a90 <xTaskIncrementTick+0x164>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d3b9      	bcc.n	80089a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a30:	e7b6      	b.n	80089a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a32:	4b17      	ldr	r3, [pc, #92]	; (8008a90 <xTaskIncrementTick+0x164>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a38:	4914      	ldr	r1, [pc, #80]	; (8008a8c <xTaskIncrementTick+0x160>)
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	440b      	add	r3, r1
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d901      	bls.n	8008a4e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008a4e:	4b11      	ldr	r3, [pc, #68]	; (8008a94 <xTaskIncrementTick+0x168>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d007      	beq.n	8008a66 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008a56:	2301      	movs	r3, #1
 8008a58:	617b      	str	r3, [r7, #20]
 8008a5a:	e004      	b.n	8008a66 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008a5c:	4b0e      	ldr	r3, [pc, #56]	; (8008a98 <xTaskIncrementTick+0x16c>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3301      	adds	r3, #1
 8008a62:	4a0d      	ldr	r2, [pc, #52]	; (8008a98 <xTaskIncrementTick+0x16c>)
 8008a64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008a66:	697b      	ldr	r3, [r7, #20]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3718      	adds	r7, #24
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	20000840 	.word	0x20000840
 8008a74:	2000081c 	.word	0x2000081c
 8008a78:	200007d0 	.word	0x200007d0
 8008a7c:	200007d4 	.word	0x200007d4
 8008a80:	20000830 	.word	0x20000830
 8008a84:	20000838 	.word	0x20000838
 8008a88:	20000820 	.word	0x20000820
 8008a8c:	2000071c 	.word	0x2000071c
 8008a90:	20000718 	.word	0x20000718
 8008a94:	2000082c 	.word	0x2000082c
 8008a98:	20000828 	.word	0x20000828

08008a9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b086      	sub	sp, #24
 8008aa0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008aa2:	4b31      	ldr	r3, [pc, #196]	; (8008b68 <vTaskSwitchContext+0xcc>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008aaa:	4b30      	ldr	r3, [pc, #192]	; (8008b6c <vTaskSwitchContext+0xd0>)
 8008aac:	2201      	movs	r2, #1
 8008aae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ab0:	e055      	b.n	8008b5e <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 8008ab2:	4b2e      	ldr	r3, [pc, #184]	; (8008b6c <vTaskSwitchContext+0xd0>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008ab8:	4b2d      	ldr	r3, [pc, #180]	; (8008b70 <vTaskSwitchContext+0xd4>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	4b2c      	ldr	r3, [pc, #176]	; (8008b70 <vTaskSwitchContext+0xd4>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d808      	bhi.n	8008ada <vTaskSwitchContext+0x3e>
 8008ac8:	4b29      	ldr	r3, [pc, #164]	; (8008b70 <vTaskSwitchContext+0xd4>)
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	4b28      	ldr	r3, [pc, #160]	; (8008b70 <vTaskSwitchContext+0xd4>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3334      	adds	r3, #52	; 0x34
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	4610      	mov	r0, r2
 8008ad6:	f7f9 fae4 	bl	80020a2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ada:	4b26      	ldr	r3, [pc, #152]	; (8008b74 <vTaskSwitchContext+0xd8>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	fab3 f383 	clz	r3, r3
 8008ae6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008ae8:	7afb      	ldrb	r3, [r7, #11]
 8008aea:	f1c3 031f 	rsb	r3, r3, #31
 8008aee:	617b      	str	r3, [r7, #20]
 8008af0:	4921      	ldr	r1, [pc, #132]	; (8008b78 <vTaskSwitchContext+0xdc>)
 8008af2:	697a      	ldr	r2, [r7, #20]
 8008af4:	4613      	mov	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	440b      	add	r3, r1
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d10a      	bne.n	8008b1a <vTaskSwitchContext+0x7e>
	__asm volatile
 8008b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b08:	f383 8811 	msr	BASEPRI, r3
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	607b      	str	r3, [r7, #4]
}
 8008b16:	bf00      	nop
 8008b18:	e7fe      	b.n	8008b18 <vTaskSwitchContext+0x7c>
 8008b1a:	697a      	ldr	r2, [r7, #20]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4a14      	ldr	r2, [pc, #80]	; (8008b78 <vTaskSwitchContext+0xdc>)
 8008b26:	4413      	add	r3, r2
 8008b28:	613b      	str	r3, [r7, #16]
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	605a      	str	r2, [r3, #4]
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	685a      	ldr	r2, [r3, #4]
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	3308      	adds	r3, #8
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d104      	bne.n	8008b4a <vTaskSwitchContext+0xae>
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	605a      	str	r2, [r3, #4]
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	4a07      	ldr	r2, [pc, #28]	; (8008b70 <vTaskSwitchContext+0xd4>)
 8008b52:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008b54:	4b06      	ldr	r3, [pc, #24]	; (8008b70 <vTaskSwitchContext+0xd4>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	334c      	adds	r3, #76	; 0x4c
 8008b5a:	4a08      	ldr	r2, [pc, #32]	; (8008b7c <vTaskSwitchContext+0xe0>)
 8008b5c:	6013      	str	r3, [r2, #0]
}
 8008b5e:	bf00      	nop
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	20000840 	.word	0x20000840
 8008b6c:	2000082c 	.word	0x2000082c
 8008b70:	20000718 	.word	0x20000718
 8008b74:	20000820 	.word	0x20000820
 8008b78:	2000071c 	.word	0x2000071c
 8008b7c:	20000040 	.word	0x20000040

08008b80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008b88:	f000 f852 	bl	8008c30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008b8c:	4b06      	ldr	r3, [pc, #24]	; (8008ba8 <prvIdleTask+0x28>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d9f9      	bls.n	8008b88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008b94:	4b05      	ldr	r3, [pc, #20]	; (8008bac <prvIdleTask+0x2c>)
 8008b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b9a:	601a      	str	r2, [r3, #0]
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ba4:	e7f0      	b.n	8008b88 <prvIdleTask+0x8>
 8008ba6:	bf00      	nop
 8008ba8:	2000071c 	.word	0x2000071c
 8008bac:	e000ed04 	.word	0xe000ed04

08008bb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	607b      	str	r3, [r7, #4]
 8008bba:	e00c      	b.n	8008bd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4a12      	ldr	r2, [pc, #72]	; (8008c10 <prvInitialiseTaskLists+0x60>)
 8008bc8:	4413      	add	r3, r2
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7ff fb07 	bl	80081de <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	607b      	str	r3, [r7, #4]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2b06      	cmp	r3, #6
 8008bda:	d9ef      	bls.n	8008bbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008bdc:	480d      	ldr	r0, [pc, #52]	; (8008c14 <prvInitialiseTaskLists+0x64>)
 8008bde:	f7ff fafe 	bl	80081de <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008be2:	480d      	ldr	r0, [pc, #52]	; (8008c18 <prvInitialiseTaskLists+0x68>)
 8008be4:	f7ff fafb 	bl	80081de <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008be8:	480c      	ldr	r0, [pc, #48]	; (8008c1c <prvInitialiseTaskLists+0x6c>)
 8008bea:	f7ff faf8 	bl	80081de <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008bee:	480c      	ldr	r0, [pc, #48]	; (8008c20 <prvInitialiseTaskLists+0x70>)
 8008bf0:	f7ff faf5 	bl	80081de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008bf4:	480b      	ldr	r0, [pc, #44]	; (8008c24 <prvInitialiseTaskLists+0x74>)
 8008bf6:	f7ff faf2 	bl	80081de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008bfa:	4b0b      	ldr	r3, [pc, #44]	; (8008c28 <prvInitialiseTaskLists+0x78>)
 8008bfc:	4a05      	ldr	r2, [pc, #20]	; (8008c14 <prvInitialiseTaskLists+0x64>)
 8008bfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c00:	4b0a      	ldr	r3, [pc, #40]	; (8008c2c <prvInitialiseTaskLists+0x7c>)
 8008c02:	4a05      	ldr	r2, [pc, #20]	; (8008c18 <prvInitialiseTaskLists+0x68>)
 8008c04:	601a      	str	r2, [r3, #0]
}
 8008c06:	bf00      	nop
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	2000071c 	.word	0x2000071c
 8008c14:	200007a8 	.word	0x200007a8
 8008c18:	200007bc 	.word	0x200007bc
 8008c1c:	200007d8 	.word	0x200007d8
 8008c20:	200007ec 	.word	0x200007ec
 8008c24:	20000804 	.word	0x20000804
 8008c28:	200007d0 	.word	0x200007d0
 8008c2c:	200007d4 	.word	0x200007d4

08008c30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c36:	e019      	b.n	8008c6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c38:	f000 fa0c 	bl	8009054 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c3c:	4b10      	ldr	r3, [pc, #64]	; (8008c80 <prvCheckTasksWaitingTermination+0x50>)
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	3304      	adds	r3, #4
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7ff fb52 	bl	80082f2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c4e:	4b0d      	ldr	r3, [pc, #52]	; (8008c84 <prvCheckTasksWaitingTermination+0x54>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	3b01      	subs	r3, #1
 8008c54:	4a0b      	ldr	r2, [pc, #44]	; (8008c84 <prvCheckTasksWaitingTermination+0x54>)
 8008c56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c58:	4b0b      	ldr	r3, [pc, #44]	; (8008c88 <prvCheckTasksWaitingTermination+0x58>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	4a0a      	ldr	r2, [pc, #40]	; (8008c88 <prvCheckTasksWaitingTermination+0x58>)
 8008c60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c62:	f000 fa27 	bl	80090b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 f810 	bl	8008c8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c6c:	4b06      	ldr	r3, [pc, #24]	; (8008c88 <prvCheckTasksWaitingTermination+0x58>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1e1      	bne.n	8008c38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	200007ec 	.word	0x200007ec
 8008c84:	20000818 	.word	0x20000818
 8008c88:	20000800 	.word	0x20000800

08008c8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	334c      	adds	r3, #76	; 0x4c
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f000 ff03 	bl	8009aa4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d108      	bne.n	8008cba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 fb7f 	bl	80093b0 <vPortFree>
				vPortFree( pxTCB );
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fb7c 	bl	80093b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008cb8:	e018      	b.n	8008cec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d103      	bne.n	8008ccc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fb73 	bl	80093b0 <vPortFree>
	}
 8008cca:	e00f      	b.n	8008cec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d00a      	beq.n	8008cec <prvDeleteTCB+0x60>
	__asm volatile
 8008cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cda:	f383 8811 	msr	BASEPRI, r3
 8008cde:	f3bf 8f6f 	isb	sy
 8008ce2:	f3bf 8f4f 	dsb	sy
 8008ce6:	60fb      	str	r3, [r7, #12]
}
 8008ce8:	bf00      	nop
 8008cea:	e7fe      	b.n	8008cea <prvDeleteTCB+0x5e>
	}
 8008cec:	bf00      	nop
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cfa:	4b0c      	ldr	r3, [pc, #48]	; (8008d2c <prvResetNextTaskUnblockTime+0x38>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d104      	bne.n	8008d0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d04:	4b0a      	ldr	r3, [pc, #40]	; (8008d30 <prvResetNextTaskUnblockTime+0x3c>)
 8008d06:	f04f 32ff 	mov.w	r2, #4294967295
 8008d0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d0c:	e008      	b.n	8008d20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d0e:	4b07      	ldr	r3, [pc, #28]	; (8008d2c <prvResetNextTaskUnblockTime+0x38>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	4a04      	ldr	r2, [pc, #16]	; (8008d30 <prvResetNextTaskUnblockTime+0x3c>)
 8008d1e:	6013      	str	r3, [r2, #0]
}
 8008d20:	bf00      	nop
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr
 8008d2c:	200007d0 	.word	0x200007d0
 8008d30:	20000838 	.word	0x20000838

08008d34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d3e:	4b29      	ldr	r3, [pc, #164]	; (8008de4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d44:	4b28      	ldr	r3, [pc, #160]	; (8008de8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	3304      	adds	r3, #4
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7ff fad1 	bl	80082f2 <uxListRemove>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10b      	bne.n	8008d6e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008d56:	4b24      	ldr	r3, [pc, #144]	; (8008de8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d62:	43da      	mvns	r2, r3
 8008d64:	4b21      	ldr	r3, [pc, #132]	; (8008dec <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4013      	ands	r3, r2
 8008d6a:	4a20      	ldr	r2, [pc, #128]	; (8008dec <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d6c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d74:	d10a      	bne.n	8008d8c <prvAddCurrentTaskToDelayedList+0x58>
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d007      	beq.n	8008d8c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d7c:	4b1a      	ldr	r3, [pc, #104]	; (8008de8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3304      	adds	r3, #4
 8008d82:	4619      	mov	r1, r3
 8008d84:	481a      	ldr	r0, [pc, #104]	; (8008df0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008d86:	f7ff fa57 	bl	8008238 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d8a:	e026      	b.n	8008dda <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4413      	add	r3, r2
 8008d92:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d94:	4b14      	ldr	r3, [pc, #80]	; (8008de8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d9c:	68ba      	ldr	r2, [r7, #8]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d209      	bcs.n	8008db8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008da4:	4b13      	ldr	r3, [pc, #76]	; (8008df4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	4b0f      	ldr	r3, [pc, #60]	; (8008de8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	3304      	adds	r3, #4
 8008dae:	4619      	mov	r1, r3
 8008db0:	4610      	mov	r0, r2
 8008db2:	f7ff fa65 	bl	8008280 <vListInsert>
}
 8008db6:	e010      	b.n	8008dda <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008db8:	4b0f      	ldr	r3, [pc, #60]	; (8008df8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	4b0a      	ldr	r3, [pc, #40]	; (8008de8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	3304      	adds	r3, #4
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	4610      	mov	r0, r2
 8008dc6:	f7ff fa5b 	bl	8008280 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008dca:	4b0c      	ldr	r3, [pc, #48]	; (8008dfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d202      	bcs.n	8008dda <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008dd4:	4a09      	ldr	r2, [pc, #36]	; (8008dfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	6013      	str	r3, [r2, #0]
}
 8008dda:	bf00      	nop
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	2000081c 	.word	0x2000081c
 8008de8:	20000718 	.word	0x20000718
 8008dec:	20000820 	.word	0x20000820
 8008df0:	20000804 	.word	0x20000804
 8008df4:	200007d4 	.word	0x200007d4
 8008df8:	200007d0 	.word	0x200007d0
 8008dfc:	20000838 	.word	0x20000838

08008e00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3b04      	subs	r3, #4
 8008e10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	3b04      	subs	r3, #4
 8008e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	f023 0201 	bic.w	r2, r3, #1
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	3b04      	subs	r3, #4
 8008e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e30:	4a0c      	ldr	r2, [pc, #48]	; (8008e64 <pxPortInitialiseStack+0x64>)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	3b14      	subs	r3, #20
 8008e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	3b04      	subs	r3, #4
 8008e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f06f 0202 	mvn.w	r2, #2
 8008e4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	3b20      	subs	r3, #32
 8008e54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e56:	68fb      	ldr	r3, [r7, #12]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3714      	adds	r7, #20
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	08008e69 	.word	0x08008e69

08008e68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e72:	4b12      	ldr	r3, [pc, #72]	; (8008ebc <prvTaskExitError+0x54>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7a:	d00a      	beq.n	8008e92 <prvTaskExitError+0x2a>
	__asm volatile
 8008e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	60fb      	str	r3, [r7, #12]
}
 8008e8e:	bf00      	nop
 8008e90:	e7fe      	b.n	8008e90 <prvTaskExitError+0x28>
	__asm volatile
 8008e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	60bb      	str	r3, [r7, #8]
}
 8008ea4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ea6:	bf00      	nop
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d0fc      	beq.n	8008ea8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008eae:	bf00      	nop
 8008eb0:	bf00      	nop
 8008eb2:	3714      	adds	r7, #20
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr
 8008ebc:	2000003c 	.word	0x2000003c

08008ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ec0:	4b07      	ldr	r3, [pc, #28]	; (8008ee0 <pxCurrentTCBConst2>)
 8008ec2:	6819      	ldr	r1, [r3, #0]
 8008ec4:	6808      	ldr	r0, [r1, #0]
 8008ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eca:	f380 8809 	msr	PSP, r0
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f04f 0000 	mov.w	r0, #0
 8008ed6:	f380 8811 	msr	BASEPRI, r0
 8008eda:	4770      	bx	lr
 8008edc:	f3af 8000 	nop.w

08008ee0 <pxCurrentTCBConst2>:
 8008ee0:	20000718 	.word	0x20000718
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ee4:	bf00      	nop
 8008ee6:	bf00      	nop

08008ee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ee8:	4808      	ldr	r0, [pc, #32]	; (8008f0c <prvPortStartFirstTask+0x24>)
 8008eea:	6800      	ldr	r0, [r0, #0]
 8008eec:	6800      	ldr	r0, [r0, #0]
 8008eee:	f380 8808 	msr	MSP, r0
 8008ef2:	f04f 0000 	mov.w	r0, #0
 8008ef6:	f380 8814 	msr	CONTROL, r0
 8008efa:	b662      	cpsie	i
 8008efc:	b661      	cpsie	f
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	df00      	svc	0
 8008f08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f0a:	bf00      	nop
 8008f0c:	e000ed08 	.word	0xe000ed08

08008f10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008f16:	4b46      	ldr	r3, [pc, #280]	; (8009030 <xPortStartScheduler+0x120>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a46      	ldr	r2, [pc, #280]	; (8009034 <xPortStartScheduler+0x124>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d10a      	bne.n	8008f36 <xPortStartScheduler+0x26>
	__asm volatile
 8008f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	613b      	str	r3, [r7, #16]
}
 8008f32:	bf00      	nop
 8008f34:	e7fe      	b.n	8008f34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008f36:	4b3e      	ldr	r3, [pc, #248]	; (8009030 <xPortStartScheduler+0x120>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a3f      	ldr	r2, [pc, #252]	; (8009038 <xPortStartScheduler+0x128>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d10a      	bne.n	8008f56 <xPortStartScheduler+0x46>
	__asm volatile
 8008f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f44:	f383 8811 	msr	BASEPRI, r3
 8008f48:	f3bf 8f6f 	isb	sy
 8008f4c:	f3bf 8f4f 	dsb	sy
 8008f50:	60fb      	str	r3, [r7, #12]
}
 8008f52:	bf00      	nop
 8008f54:	e7fe      	b.n	8008f54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f56:	4b39      	ldr	r3, [pc, #228]	; (800903c <xPortStartScheduler+0x12c>)
 8008f58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	22ff      	movs	r2, #255	; 0xff
 8008f66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f70:	78fb      	ldrb	r3, [r7, #3]
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f78:	b2da      	uxtb	r2, r3
 8008f7a:	4b31      	ldr	r3, [pc, #196]	; (8009040 <xPortStartScheduler+0x130>)
 8008f7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f7e:	4b31      	ldr	r3, [pc, #196]	; (8009044 <xPortStartScheduler+0x134>)
 8008f80:	2207      	movs	r2, #7
 8008f82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f84:	e009      	b.n	8008f9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008f86:	4b2f      	ldr	r3, [pc, #188]	; (8009044 <xPortStartScheduler+0x134>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	4a2d      	ldr	r2, [pc, #180]	; (8009044 <xPortStartScheduler+0x134>)
 8008f8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	005b      	lsls	r3, r3, #1
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f9a:	78fb      	ldrb	r3, [r7, #3]
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fa2:	2b80      	cmp	r3, #128	; 0x80
 8008fa4:	d0ef      	beq.n	8008f86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008fa6:	4b27      	ldr	r3, [pc, #156]	; (8009044 <xPortStartScheduler+0x134>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f1c3 0307 	rsb	r3, r3, #7
 8008fae:	2b04      	cmp	r3, #4
 8008fb0:	d00a      	beq.n	8008fc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb6:	f383 8811 	msr	BASEPRI, r3
 8008fba:	f3bf 8f6f 	isb	sy
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	60bb      	str	r3, [r7, #8]
}
 8008fc4:	bf00      	nop
 8008fc6:	e7fe      	b.n	8008fc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008fc8:	4b1e      	ldr	r3, [pc, #120]	; (8009044 <xPortStartScheduler+0x134>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	021b      	lsls	r3, r3, #8
 8008fce:	4a1d      	ldr	r2, [pc, #116]	; (8009044 <xPortStartScheduler+0x134>)
 8008fd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008fd2:	4b1c      	ldr	r3, [pc, #112]	; (8009044 <xPortStartScheduler+0x134>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fda:	4a1a      	ldr	r2, [pc, #104]	; (8009044 <xPortStartScheduler+0x134>)
 8008fdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	b2da      	uxtb	r2, r3
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fe6:	4b18      	ldr	r3, [pc, #96]	; (8009048 <xPortStartScheduler+0x138>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a17      	ldr	r2, [pc, #92]	; (8009048 <xPortStartScheduler+0x138>)
 8008fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ff0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ff2:	4b15      	ldr	r3, [pc, #84]	; (8009048 <xPortStartScheduler+0x138>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a14      	ldr	r2, [pc, #80]	; (8009048 <xPortStartScheduler+0x138>)
 8008ff8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ffc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ffe:	f000 f8dd 	bl	80091bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009002:	4b12      	ldr	r3, [pc, #72]	; (800904c <xPortStartScheduler+0x13c>)
 8009004:	2200      	movs	r2, #0
 8009006:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009008:	f000 f8fc 	bl	8009204 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800900c:	4b10      	ldr	r3, [pc, #64]	; (8009050 <xPortStartScheduler+0x140>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a0f      	ldr	r2, [pc, #60]	; (8009050 <xPortStartScheduler+0x140>)
 8009012:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009016:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009018:	f7ff ff66 	bl	8008ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800901c:	f7ff fd3e 	bl	8008a9c <vTaskSwitchContext>
	prvTaskExitError();
 8009020:	f7ff ff22 	bl	8008e68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3718      	adds	r7, #24
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	e000ed00 	.word	0xe000ed00
 8009034:	410fc271 	.word	0x410fc271
 8009038:	410fc270 	.word	0x410fc270
 800903c:	e000e400 	.word	0xe000e400
 8009040:	20000844 	.word	0x20000844
 8009044:	20000848 	.word	0x20000848
 8009048:	e000ed20 	.word	0xe000ed20
 800904c:	2000003c 	.word	0x2000003c
 8009050:	e000ef34 	.word	0xe000ef34

08009054 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
	__asm volatile
 800905a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905e:	f383 8811 	msr	BASEPRI, r3
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	607b      	str	r3, [r7, #4]
}
 800906c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800906e:	4b0f      	ldr	r3, [pc, #60]	; (80090ac <vPortEnterCritical+0x58>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3301      	adds	r3, #1
 8009074:	4a0d      	ldr	r2, [pc, #52]	; (80090ac <vPortEnterCritical+0x58>)
 8009076:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009078:	4b0c      	ldr	r3, [pc, #48]	; (80090ac <vPortEnterCritical+0x58>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d10f      	bne.n	80090a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009080:	4b0b      	ldr	r3, [pc, #44]	; (80090b0 <vPortEnterCritical+0x5c>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	b2db      	uxtb	r3, r3
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00a      	beq.n	80090a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800908a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908e:	f383 8811 	msr	BASEPRI, r3
 8009092:	f3bf 8f6f 	isb	sy
 8009096:	f3bf 8f4f 	dsb	sy
 800909a:	603b      	str	r3, [r7, #0]
}
 800909c:	bf00      	nop
 800909e:	e7fe      	b.n	800909e <vPortEnterCritical+0x4a>
	}
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	2000003c 	.word	0x2000003c
 80090b0:	e000ed04 	.word	0xe000ed04

080090b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80090ba:	4b12      	ldr	r3, [pc, #72]	; (8009104 <vPortExitCritical+0x50>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d10a      	bne.n	80090d8 <vPortExitCritical+0x24>
	__asm volatile
 80090c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c6:	f383 8811 	msr	BASEPRI, r3
 80090ca:	f3bf 8f6f 	isb	sy
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	607b      	str	r3, [r7, #4]
}
 80090d4:	bf00      	nop
 80090d6:	e7fe      	b.n	80090d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80090d8:	4b0a      	ldr	r3, [pc, #40]	; (8009104 <vPortExitCritical+0x50>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	3b01      	subs	r3, #1
 80090de:	4a09      	ldr	r2, [pc, #36]	; (8009104 <vPortExitCritical+0x50>)
 80090e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090e2:	4b08      	ldr	r3, [pc, #32]	; (8009104 <vPortExitCritical+0x50>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d105      	bne.n	80090f6 <vPortExitCritical+0x42>
 80090ea:	2300      	movs	r3, #0
 80090ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80090f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80090f6:	bf00      	nop
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	2000003c 	.word	0x2000003c
	...

08009110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009110:	f3ef 8009 	mrs	r0, PSP
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	4b15      	ldr	r3, [pc, #84]	; (8009170 <pxCurrentTCBConst>)
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	f01e 0f10 	tst.w	lr, #16
 8009120:	bf08      	it	eq
 8009122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912a:	6010      	str	r0, [r2, #0]
 800912c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009130:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009134:	f380 8811 	msr	BASEPRI, r0
 8009138:	f3bf 8f4f 	dsb	sy
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	f7ff fcac 	bl	8008a9c <vTaskSwitchContext>
 8009144:	f04f 0000 	mov.w	r0, #0
 8009148:	f380 8811 	msr	BASEPRI, r0
 800914c:	bc09      	pop	{r0, r3}
 800914e:	6819      	ldr	r1, [r3, #0]
 8009150:	6808      	ldr	r0, [r1, #0]
 8009152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009156:	f01e 0f10 	tst.w	lr, #16
 800915a:	bf08      	it	eq
 800915c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009160:	f380 8809 	msr	PSP, r0
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	f3af 8000 	nop.w

08009170 <pxCurrentTCBConst>:
 8009170:	20000718 	.word	0x20000718
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009174:	bf00      	nop
 8009176:	bf00      	nop

08009178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	607b      	str	r3, [r7, #4]
}
 8009190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009192:	f7ff fbcb 	bl	800892c <xTaskIncrementTick>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d003      	beq.n	80091a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800919c:	4b06      	ldr	r3, [pc, #24]	; (80091b8 <SysTick_Handler+0x40>)
 800919e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091a2:	601a      	str	r2, [r3, #0]
 80091a4:	2300      	movs	r3, #0
 80091a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	f383 8811 	msr	BASEPRI, r3
}
 80091ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80091b0:	bf00      	nop
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	e000ed04 	.word	0xe000ed04

080091bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80091bc:	b480      	push	{r7}
 80091be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091c0:	4b0b      	ldr	r3, [pc, #44]	; (80091f0 <vPortSetupTimerInterrupt+0x34>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091c6:	4b0b      	ldr	r3, [pc, #44]	; (80091f4 <vPortSetupTimerInterrupt+0x38>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091cc:	4b0a      	ldr	r3, [pc, #40]	; (80091f8 <vPortSetupTimerInterrupt+0x3c>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a0a      	ldr	r2, [pc, #40]	; (80091fc <vPortSetupTimerInterrupt+0x40>)
 80091d2:	fba2 2303 	umull	r2, r3, r2, r3
 80091d6:	099b      	lsrs	r3, r3, #6
 80091d8:	4a09      	ldr	r2, [pc, #36]	; (8009200 <vPortSetupTimerInterrupt+0x44>)
 80091da:	3b01      	subs	r3, #1
 80091dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091de:	4b04      	ldr	r3, [pc, #16]	; (80091f0 <vPortSetupTimerInterrupt+0x34>)
 80091e0:	2207      	movs	r2, #7
 80091e2:	601a      	str	r2, [r3, #0]
}
 80091e4:	bf00      	nop
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop
 80091f0:	e000e010 	.word	0xe000e010
 80091f4:	e000e018 	.word	0xe000e018
 80091f8:	2000002c 	.word	0x2000002c
 80091fc:	10624dd3 	.word	0x10624dd3
 8009200:	e000e014 	.word	0xe000e014

08009204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009204:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009214 <vPortEnableVFP+0x10>
 8009208:	6801      	ldr	r1, [r0, #0]
 800920a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800920e:	6001      	str	r1, [r0, #0]
 8009210:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009212:	bf00      	nop
 8009214:	e000ed88 	.word	0xe000ed88

08009218 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b08a      	sub	sp, #40	; 0x28
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009220:	2300      	movs	r3, #0
 8009222:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009224:	f7ff fad8 	bl	80087d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009228:	4b5b      	ldr	r3, [pc, #364]	; (8009398 <pvPortMalloc+0x180>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d101      	bne.n	8009234 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009230:	f000 f920 	bl	8009474 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009234:	4b59      	ldr	r3, [pc, #356]	; (800939c <pvPortMalloc+0x184>)
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4013      	ands	r3, r2
 800923c:	2b00      	cmp	r3, #0
 800923e:	f040 8093 	bne.w	8009368 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d01d      	beq.n	8009284 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009248:	2208      	movs	r2, #8
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4413      	add	r3, r2
 800924e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f003 0307 	and.w	r3, r3, #7
 8009256:	2b00      	cmp	r3, #0
 8009258:	d014      	beq.n	8009284 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f023 0307 	bic.w	r3, r3, #7
 8009260:	3308      	adds	r3, #8
 8009262:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f003 0307 	and.w	r3, r3, #7
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00a      	beq.n	8009284 <pvPortMalloc+0x6c>
	__asm volatile
 800926e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	617b      	str	r3, [r7, #20]
}
 8009280:	bf00      	nop
 8009282:	e7fe      	b.n	8009282 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d06e      	beq.n	8009368 <pvPortMalloc+0x150>
 800928a:	4b45      	ldr	r3, [pc, #276]	; (80093a0 <pvPortMalloc+0x188>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	429a      	cmp	r2, r3
 8009292:	d869      	bhi.n	8009368 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009294:	4b43      	ldr	r3, [pc, #268]	; (80093a4 <pvPortMalloc+0x18c>)
 8009296:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009298:	4b42      	ldr	r3, [pc, #264]	; (80093a4 <pvPortMalloc+0x18c>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800929e:	e004      	b.n	80092aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80092a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80092a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d903      	bls.n	80092bc <pvPortMalloc+0xa4>
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1f1      	bne.n	80092a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80092bc:	4b36      	ldr	r3, [pc, #216]	; (8009398 <pvPortMalloc+0x180>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d050      	beq.n	8009368 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80092c6:	6a3b      	ldr	r3, [r7, #32]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2208      	movs	r2, #8
 80092cc:	4413      	add	r3, r2
 80092ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80092d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	6a3b      	ldr	r3, [r7, #32]
 80092d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80092d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092da:	685a      	ldr	r2, [r3, #4]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	1ad2      	subs	r2, r2, r3
 80092e0:	2308      	movs	r3, #8
 80092e2:	005b      	lsls	r3, r3, #1
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d91f      	bls.n	8009328 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80092e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4413      	add	r3, r2
 80092ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	f003 0307 	and.w	r3, r3, #7
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00a      	beq.n	8009310 <pvPortMalloc+0xf8>
	__asm volatile
 80092fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fe:	f383 8811 	msr	BASEPRI, r3
 8009302:	f3bf 8f6f 	isb	sy
 8009306:	f3bf 8f4f 	dsb	sy
 800930a:	613b      	str	r3, [r7, #16]
}
 800930c:	bf00      	nop
 800930e:	e7fe      	b.n	800930e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009312:	685a      	ldr	r2, [r3, #4]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	1ad2      	subs	r2, r2, r3
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800931c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009322:	69b8      	ldr	r0, [r7, #24]
 8009324:	f000 f908 	bl	8009538 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009328:	4b1d      	ldr	r3, [pc, #116]	; (80093a0 <pvPortMalloc+0x188>)
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	4a1b      	ldr	r2, [pc, #108]	; (80093a0 <pvPortMalloc+0x188>)
 8009334:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009336:	4b1a      	ldr	r3, [pc, #104]	; (80093a0 <pvPortMalloc+0x188>)
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	4b1b      	ldr	r3, [pc, #108]	; (80093a8 <pvPortMalloc+0x190>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	429a      	cmp	r2, r3
 8009340:	d203      	bcs.n	800934a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009342:	4b17      	ldr	r3, [pc, #92]	; (80093a0 <pvPortMalloc+0x188>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a18      	ldr	r2, [pc, #96]	; (80093a8 <pvPortMalloc+0x190>)
 8009348:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800934a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934c:	685a      	ldr	r2, [r3, #4]
 800934e:	4b13      	ldr	r3, [pc, #76]	; (800939c <pvPortMalloc+0x184>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	431a      	orrs	r2, r3
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009356:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935a:	2200      	movs	r2, #0
 800935c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800935e:	4b13      	ldr	r3, [pc, #76]	; (80093ac <pvPortMalloc+0x194>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3301      	adds	r3, #1
 8009364:	4a11      	ldr	r2, [pc, #68]	; (80093ac <pvPortMalloc+0x194>)
 8009366:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009368:	f7ff fa44 	bl	80087f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	f003 0307 	and.w	r3, r3, #7
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00a      	beq.n	800938c <pvPortMalloc+0x174>
	__asm volatile
 8009376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937a:	f383 8811 	msr	BASEPRI, r3
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f3bf 8f4f 	dsb	sy
 8009386:	60fb      	str	r3, [r7, #12]
}
 8009388:	bf00      	nop
 800938a:	e7fe      	b.n	800938a <pvPortMalloc+0x172>
	return pvReturn;
 800938c:	69fb      	ldr	r3, [r7, #28]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3728      	adds	r7, #40	; 0x28
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	2000b984 	.word	0x2000b984
 800939c:	2000b998 	.word	0x2000b998
 80093a0:	2000b988 	.word	0x2000b988
 80093a4:	2000b97c 	.word	0x2000b97c
 80093a8:	2000b98c 	.word	0x2000b98c
 80093ac:	2000b990 	.word	0x2000b990

080093b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d04d      	beq.n	800945e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80093c2:	2308      	movs	r3, #8
 80093c4:	425b      	negs	r3, r3
 80093c6:	697a      	ldr	r2, [r7, #20]
 80093c8:	4413      	add	r3, r2
 80093ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	4b24      	ldr	r3, [pc, #144]	; (8009468 <vPortFree+0xb8>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4013      	ands	r3, r2
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d10a      	bne.n	80093f4 <vPortFree+0x44>
	__asm volatile
 80093de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	60fb      	str	r3, [r7, #12]
}
 80093f0:	bf00      	nop
 80093f2:	e7fe      	b.n	80093f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00a      	beq.n	8009412 <vPortFree+0x62>
	__asm volatile
 80093fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009400:	f383 8811 	msr	BASEPRI, r3
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	60bb      	str	r3, [r7, #8]
}
 800940e:	bf00      	nop
 8009410:	e7fe      	b.n	8009410 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	685a      	ldr	r2, [r3, #4]
 8009416:	4b14      	ldr	r3, [pc, #80]	; (8009468 <vPortFree+0xb8>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4013      	ands	r3, r2
 800941c:	2b00      	cmp	r3, #0
 800941e:	d01e      	beq.n	800945e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d11a      	bne.n	800945e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	4b0e      	ldr	r3, [pc, #56]	; (8009468 <vPortFree+0xb8>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	43db      	mvns	r3, r3
 8009432:	401a      	ands	r2, r3
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009438:	f7ff f9ce 	bl	80087d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	685a      	ldr	r2, [r3, #4]
 8009440:	4b0a      	ldr	r3, [pc, #40]	; (800946c <vPortFree+0xbc>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4413      	add	r3, r2
 8009446:	4a09      	ldr	r2, [pc, #36]	; (800946c <vPortFree+0xbc>)
 8009448:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800944a:	6938      	ldr	r0, [r7, #16]
 800944c:	f000 f874 	bl	8009538 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009450:	4b07      	ldr	r3, [pc, #28]	; (8009470 <vPortFree+0xc0>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	3301      	adds	r3, #1
 8009456:	4a06      	ldr	r2, [pc, #24]	; (8009470 <vPortFree+0xc0>)
 8009458:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800945a:	f7ff f9cb 	bl	80087f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800945e:	bf00      	nop
 8009460:	3718      	adds	r7, #24
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	2000b998 	.word	0x2000b998
 800946c:	2000b988 	.word	0x2000b988
 8009470:	2000b994 	.word	0x2000b994

08009474 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800947a:	f24b 1330 	movw	r3, #45360	; 0xb130
 800947e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009480:	4b27      	ldr	r3, [pc, #156]	; (8009520 <prvHeapInit+0xac>)
 8009482:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f003 0307 	and.w	r3, r3, #7
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00c      	beq.n	80094a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	3307      	adds	r3, #7
 8009492:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f023 0307 	bic.w	r3, r3, #7
 800949a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800949c:	68ba      	ldr	r2, [r7, #8]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	4a1f      	ldr	r2, [pc, #124]	; (8009520 <prvHeapInit+0xac>)
 80094a4:	4413      	add	r3, r2
 80094a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80094ac:	4a1d      	ldr	r2, [pc, #116]	; (8009524 <prvHeapInit+0xb0>)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80094b2:	4b1c      	ldr	r3, [pc, #112]	; (8009524 <prvHeapInit+0xb0>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	4413      	add	r3, r2
 80094be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80094c0:	2208      	movs	r2, #8
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	1a9b      	subs	r3, r3, r2
 80094c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f023 0307 	bic.w	r3, r3, #7
 80094ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	4a15      	ldr	r2, [pc, #84]	; (8009528 <prvHeapInit+0xb4>)
 80094d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80094d6:	4b14      	ldr	r3, [pc, #80]	; (8009528 <prvHeapInit+0xb4>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2200      	movs	r2, #0
 80094dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80094de:	4b12      	ldr	r3, [pc, #72]	; (8009528 <prvHeapInit+0xb4>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2200      	movs	r2, #0
 80094e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	1ad2      	subs	r2, r2, r3
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80094f4:	4b0c      	ldr	r3, [pc, #48]	; (8009528 <prvHeapInit+0xb4>)
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	4a0a      	ldr	r2, [pc, #40]	; (800952c <prvHeapInit+0xb8>)
 8009502:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	4a09      	ldr	r2, [pc, #36]	; (8009530 <prvHeapInit+0xbc>)
 800950a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800950c:	4b09      	ldr	r3, [pc, #36]	; (8009534 <prvHeapInit+0xc0>)
 800950e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009512:	601a      	str	r2, [r3, #0]
}
 8009514:	bf00      	nop
 8009516:	3714      	adds	r7, #20
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr
 8009520:	2000084c 	.word	0x2000084c
 8009524:	2000b97c 	.word	0x2000b97c
 8009528:	2000b984 	.word	0x2000b984
 800952c:	2000b98c 	.word	0x2000b98c
 8009530:	2000b988 	.word	0x2000b988
 8009534:	2000b998 	.word	0x2000b998

08009538 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009540:	4b28      	ldr	r3, [pc, #160]	; (80095e4 <prvInsertBlockIntoFreeList+0xac>)
 8009542:	60fb      	str	r3, [r7, #12]
 8009544:	e002      	b.n	800954c <prvInsertBlockIntoFreeList+0x14>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	60fb      	str	r3, [r7, #12]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	429a      	cmp	r2, r3
 8009554:	d8f7      	bhi.n	8009546 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	4413      	add	r3, r2
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	429a      	cmp	r2, r3
 8009566:	d108      	bne.n	800957a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	685a      	ldr	r2, [r3, #4]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	441a      	add	r2, r3
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	441a      	add	r2, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	429a      	cmp	r2, r3
 800958c:	d118      	bne.n	80095c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	4b15      	ldr	r3, [pc, #84]	; (80095e8 <prvInsertBlockIntoFreeList+0xb0>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	429a      	cmp	r2, r3
 8009598:	d00d      	beq.n	80095b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	441a      	add	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	601a      	str	r2, [r3, #0]
 80095b4:	e008      	b.n	80095c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80095b6:	4b0c      	ldr	r3, [pc, #48]	; (80095e8 <prvInsertBlockIntoFreeList+0xb0>)
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	601a      	str	r2, [r3, #0]
 80095be:	e003      	b.n	80095c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d002      	beq.n	80095d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095d6:	bf00      	nop
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	2000b97c 	.word	0x2000b97c
 80095e8:	2000b984 	.word	0x2000b984

080095ec <__errno>:
 80095ec:	4b01      	ldr	r3, [pc, #4]	; (80095f4 <__errno+0x8>)
 80095ee:	6818      	ldr	r0, [r3, #0]
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	20000040 	.word	0x20000040

080095f8 <std>:
 80095f8:	2300      	movs	r3, #0
 80095fa:	b510      	push	{r4, lr}
 80095fc:	4604      	mov	r4, r0
 80095fe:	e9c0 3300 	strd	r3, r3, [r0]
 8009602:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009606:	6083      	str	r3, [r0, #8]
 8009608:	8181      	strh	r1, [r0, #12]
 800960a:	6643      	str	r3, [r0, #100]	; 0x64
 800960c:	81c2      	strh	r2, [r0, #14]
 800960e:	6183      	str	r3, [r0, #24]
 8009610:	4619      	mov	r1, r3
 8009612:	2208      	movs	r2, #8
 8009614:	305c      	adds	r0, #92	; 0x5c
 8009616:	f000 f90c 	bl	8009832 <memset>
 800961a:	4b05      	ldr	r3, [pc, #20]	; (8009630 <std+0x38>)
 800961c:	6263      	str	r3, [r4, #36]	; 0x24
 800961e:	4b05      	ldr	r3, [pc, #20]	; (8009634 <std+0x3c>)
 8009620:	62a3      	str	r3, [r4, #40]	; 0x28
 8009622:	4b05      	ldr	r3, [pc, #20]	; (8009638 <std+0x40>)
 8009624:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009626:	4b05      	ldr	r3, [pc, #20]	; (800963c <std+0x44>)
 8009628:	6224      	str	r4, [r4, #32]
 800962a:	6323      	str	r3, [r4, #48]	; 0x30
 800962c:	bd10      	pop	{r4, pc}
 800962e:	bf00      	nop
 8009630:	08009b7d 	.word	0x08009b7d
 8009634:	08009b9f 	.word	0x08009b9f
 8009638:	08009bd7 	.word	0x08009bd7
 800963c:	08009bfb 	.word	0x08009bfb

08009640 <_cleanup_r>:
 8009640:	4901      	ldr	r1, [pc, #4]	; (8009648 <_cleanup_r+0x8>)
 8009642:	f000 b8af 	b.w	80097a4 <_fwalk_reent>
 8009646:	bf00      	nop
 8009648:	08009ed5 	.word	0x08009ed5

0800964c <__sfmoreglue>:
 800964c:	b570      	push	{r4, r5, r6, lr}
 800964e:	2268      	movs	r2, #104	; 0x68
 8009650:	1e4d      	subs	r5, r1, #1
 8009652:	4355      	muls	r5, r2
 8009654:	460e      	mov	r6, r1
 8009656:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800965a:	f000 f913 	bl	8009884 <_malloc_r>
 800965e:	4604      	mov	r4, r0
 8009660:	b140      	cbz	r0, 8009674 <__sfmoreglue+0x28>
 8009662:	2100      	movs	r1, #0
 8009664:	e9c0 1600 	strd	r1, r6, [r0]
 8009668:	300c      	adds	r0, #12
 800966a:	60a0      	str	r0, [r4, #8]
 800966c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009670:	f000 f8df 	bl	8009832 <memset>
 8009674:	4620      	mov	r0, r4
 8009676:	bd70      	pop	{r4, r5, r6, pc}

08009678 <__sfp_lock_acquire>:
 8009678:	4801      	ldr	r0, [pc, #4]	; (8009680 <__sfp_lock_acquire+0x8>)
 800967a:	f000 b8d8 	b.w	800982e <__retarget_lock_acquire_recursive>
 800967e:	bf00      	nop
 8009680:	2000b99d 	.word	0x2000b99d

08009684 <__sfp_lock_release>:
 8009684:	4801      	ldr	r0, [pc, #4]	; (800968c <__sfp_lock_release+0x8>)
 8009686:	f000 b8d3 	b.w	8009830 <__retarget_lock_release_recursive>
 800968a:	bf00      	nop
 800968c:	2000b99d 	.word	0x2000b99d

08009690 <__sinit_lock_acquire>:
 8009690:	4801      	ldr	r0, [pc, #4]	; (8009698 <__sinit_lock_acquire+0x8>)
 8009692:	f000 b8cc 	b.w	800982e <__retarget_lock_acquire_recursive>
 8009696:	bf00      	nop
 8009698:	2000b99e 	.word	0x2000b99e

0800969c <__sinit_lock_release>:
 800969c:	4801      	ldr	r0, [pc, #4]	; (80096a4 <__sinit_lock_release+0x8>)
 800969e:	f000 b8c7 	b.w	8009830 <__retarget_lock_release_recursive>
 80096a2:	bf00      	nop
 80096a4:	2000b99e 	.word	0x2000b99e

080096a8 <__sinit>:
 80096a8:	b510      	push	{r4, lr}
 80096aa:	4604      	mov	r4, r0
 80096ac:	f7ff fff0 	bl	8009690 <__sinit_lock_acquire>
 80096b0:	69a3      	ldr	r3, [r4, #24]
 80096b2:	b11b      	cbz	r3, 80096bc <__sinit+0x14>
 80096b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096b8:	f7ff bff0 	b.w	800969c <__sinit_lock_release>
 80096bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096c0:	6523      	str	r3, [r4, #80]	; 0x50
 80096c2:	4b13      	ldr	r3, [pc, #76]	; (8009710 <__sinit+0x68>)
 80096c4:	4a13      	ldr	r2, [pc, #76]	; (8009714 <__sinit+0x6c>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80096ca:	42a3      	cmp	r3, r4
 80096cc:	bf04      	itt	eq
 80096ce:	2301      	moveq	r3, #1
 80096d0:	61a3      	streq	r3, [r4, #24]
 80096d2:	4620      	mov	r0, r4
 80096d4:	f000 f820 	bl	8009718 <__sfp>
 80096d8:	6060      	str	r0, [r4, #4]
 80096da:	4620      	mov	r0, r4
 80096dc:	f000 f81c 	bl	8009718 <__sfp>
 80096e0:	60a0      	str	r0, [r4, #8]
 80096e2:	4620      	mov	r0, r4
 80096e4:	f000 f818 	bl	8009718 <__sfp>
 80096e8:	2200      	movs	r2, #0
 80096ea:	60e0      	str	r0, [r4, #12]
 80096ec:	2104      	movs	r1, #4
 80096ee:	6860      	ldr	r0, [r4, #4]
 80096f0:	f7ff ff82 	bl	80095f8 <std>
 80096f4:	68a0      	ldr	r0, [r4, #8]
 80096f6:	2201      	movs	r2, #1
 80096f8:	2109      	movs	r1, #9
 80096fa:	f7ff ff7d 	bl	80095f8 <std>
 80096fe:	68e0      	ldr	r0, [r4, #12]
 8009700:	2202      	movs	r2, #2
 8009702:	2112      	movs	r1, #18
 8009704:	f7ff ff78 	bl	80095f8 <std>
 8009708:	2301      	movs	r3, #1
 800970a:	61a3      	str	r3, [r4, #24]
 800970c:	e7d2      	b.n	80096b4 <__sinit+0xc>
 800970e:	bf00      	nop
 8009710:	0800b8b0 	.word	0x0800b8b0
 8009714:	08009641 	.word	0x08009641

08009718 <__sfp>:
 8009718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971a:	4607      	mov	r7, r0
 800971c:	f7ff ffac 	bl	8009678 <__sfp_lock_acquire>
 8009720:	4b1e      	ldr	r3, [pc, #120]	; (800979c <__sfp+0x84>)
 8009722:	681e      	ldr	r6, [r3, #0]
 8009724:	69b3      	ldr	r3, [r6, #24]
 8009726:	b913      	cbnz	r3, 800972e <__sfp+0x16>
 8009728:	4630      	mov	r0, r6
 800972a:	f7ff ffbd 	bl	80096a8 <__sinit>
 800972e:	3648      	adds	r6, #72	; 0x48
 8009730:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009734:	3b01      	subs	r3, #1
 8009736:	d503      	bpl.n	8009740 <__sfp+0x28>
 8009738:	6833      	ldr	r3, [r6, #0]
 800973a:	b30b      	cbz	r3, 8009780 <__sfp+0x68>
 800973c:	6836      	ldr	r6, [r6, #0]
 800973e:	e7f7      	b.n	8009730 <__sfp+0x18>
 8009740:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009744:	b9d5      	cbnz	r5, 800977c <__sfp+0x64>
 8009746:	4b16      	ldr	r3, [pc, #88]	; (80097a0 <__sfp+0x88>)
 8009748:	60e3      	str	r3, [r4, #12]
 800974a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800974e:	6665      	str	r5, [r4, #100]	; 0x64
 8009750:	f000 f86c 	bl	800982c <__retarget_lock_init_recursive>
 8009754:	f7ff ff96 	bl	8009684 <__sfp_lock_release>
 8009758:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800975c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009760:	6025      	str	r5, [r4, #0]
 8009762:	61a5      	str	r5, [r4, #24]
 8009764:	2208      	movs	r2, #8
 8009766:	4629      	mov	r1, r5
 8009768:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800976c:	f000 f861 	bl	8009832 <memset>
 8009770:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009774:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009778:	4620      	mov	r0, r4
 800977a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800977c:	3468      	adds	r4, #104	; 0x68
 800977e:	e7d9      	b.n	8009734 <__sfp+0x1c>
 8009780:	2104      	movs	r1, #4
 8009782:	4638      	mov	r0, r7
 8009784:	f7ff ff62 	bl	800964c <__sfmoreglue>
 8009788:	4604      	mov	r4, r0
 800978a:	6030      	str	r0, [r6, #0]
 800978c:	2800      	cmp	r0, #0
 800978e:	d1d5      	bne.n	800973c <__sfp+0x24>
 8009790:	f7ff ff78 	bl	8009684 <__sfp_lock_release>
 8009794:	230c      	movs	r3, #12
 8009796:	603b      	str	r3, [r7, #0]
 8009798:	e7ee      	b.n	8009778 <__sfp+0x60>
 800979a:	bf00      	nop
 800979c:	0800b8b0 	.word	0x0800b8b0
 80097a0:	ffff0001 	.word	0xffff0001

080097a4 <_fwalk_reent>:
 80097a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097a8:	4606      	mov	r6, r0
 80097aa:	4688      	mov	r8, r1
 80097ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80097b0:	2700      	movs	r7, #0
 80097b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097b6:	f1b9 0901 	subs.w	r9, r9, #1
 80097ba:	d505      	bpl.n	80097c8 <_fwalk_reent+0x24>
 80097bc:	6824      	ldr	r4, [r4, #0]
 80097be:	2c00      	cmp	r4, #0
 80097c0:	d1f7      	bne.n	80097b2 <_fwalk_reent+0xe>
 80097c2:	4638      	mov	r0, r7
 80097c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097c8:	89ab      	ldrh	r3, [r5, #12]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d907      	bls.n	80097de <_fwalk_reent+0x3a>
 80097ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097d2:	3301      	adds	r3, #1
 80097d4:	d003      	beq.n	80097de <_fwalk_reent+0x3a>
 80097d6:	4629      	mov	r1, r5
 80097d8:	4630      	mov	r0, r6
 80097da:	47c0      	blx	r8
 80097dc:	4307      	orrs	r7, r0
 80097de:	3568      	adds	r5, #104	; 0x68
 80097e0:	e7e9      	b.n	80097b6 <_fwalk_reent+0x12>
	...

080097e4 <__libc_init_array>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	4d0d      	ldr	r5, [pc, #52]	; (800981c <__libc_init_array+0x38>)
 80097e8:	4c0d      	ldr	r4, [pc, #52]	; (8009820 <__libc_init_array+0x3c>)
 80097ea:	1b64      	subs	r4, r4, r5
 80097ec:	10a4      	asrs	r4, r4, #2
 80097ee:	2600      	movs	r6, #0
 80097f0:	42a6      	cmp	r6, r4
 80097f2:	d109      	bne.n	8009808 <__libc_init_array+0x24>
 80097f4:	4d0b      	ldr	r5, [pc, #44]	; (8009824 <__libc_init_array+0x40>)
 80097f6:	4c0c      	ldr	r4, [pc, #48]	; (8009828 <__libc_init_array+0x44>)
 80097f8:	f001 fee0 	bl	800b5bc <_init>
 80097fc:	1b64      	subs	r4, r4, r5
 80097fe:	10a4      	asrs	r4, r4, #2
 8009800:	2600      	movs	r6, #0
 8009802:	42a6      	cmp	r6, r4
 8009804:	d105      	bne.n	8009812 <__libc_init_array+0x2e>
 8009806:	bd70      	pop	{r4, r5, r6, pc}
 8009808:	f855 3b04 	ldr.w	r3, [r5], #4
 800980c:	4798      	blx	r3
 800980e:	3601      	adds	r6, #1
 8009810:	e7ee      	b.n	80097f0 <__libc_init_array+0xc>
 8009812:	f855 3b04 	ldr.w	r3, [r5], #4
 8009816:	4798      	blx	r3
 8009818:	3601      	adds	r6, #1
 800981a:	e7f2      	b.n	8009802 <__libc_init_array+0x1e>
 800981c:	0800b920 	.word	0x0800b920
 8009820:	0800b920 	.word	0x0800b920
 8009824:	0800b920 	.word	0x0800b920
 8009828:	0800b924 	.word	0x0800b924

0800982c <__retarget_lock_init_recursive>:
 800982c:	4770      	bx	lr

0800982e <__retarget_lock_acquire_recursive>:
 800982e:	4770      	bx	lr

08009830 <__retarget_lock_release_recursive>:
 8009830:	4770      	bx	lr

08009832 <memset>:
 8009832:	4402      	add	r2, r0
 8009834:	4603      	mov	r3, r0
 8009836:	4293      	cmp	r3, r2
 8009838:	d100      	bne.n	800983c <memset+0xa>
 800983a:	4770      	bx	lr
 800983c:	f803 1b01 	strb.w	r1, [r3], #1
 8009840:	e7f9      	b.n	8009836 <memset+0x4>
	...

08009844 <sbrk_aligned>:
 8009844:	b570      	push	{r4, r5, r6, lr}
 8009846:	4e0e      	ldr	r6, [pc, #56]	; (8009880 <sbrk_aligned+0x3c>)
 8009848:	460c      	mov	r4, r1
 800984a:	6831      	ldr	r1, [r6, #0]
 800984c:	4605      	mov	r5, r0
 800984e:	b911      	cbnz	r1, 8009856 <sbrk_aligned+0x12>
 8009850:	f000 f984 	bl	8009b5c <_sbrk_r>
 8009854:	6030      	str	r0, [r6, #0]
 8009856:	4621      	mov	r1, r4
 8009858:	4628      	mov	r0, r5
 800985a:	f000 f97f 	bl	8009b5c <_sbrk_r>
 800985e:	1c43      	adds	r3, r0, #1
 8009860:	d00a      	beq.n	8009878 <sbrk_aligned+0x34>
 8009862:	1cc4      	adds	r4, r0, #3
 8009864:	f024 0403 	bic.w	r4, r4, #3
 8009868:	42a0      	cmp	r0, r4
 800986a:	d007      	beq.n	800987c <sbrk_aligned+0x38>
 800986c:	1a21      	subs	r1, r4, r0
 800986e:	4628      	mov	r0, r5
 8009870:	f000 f974 	bl	8009b5c <_sbrk_r>
 8009874:	3001      	adds	r0, #1
 8009876:	d101      	bne.n	800987c <sbrk_aligned+0x38>
 8009878:	f04f 34ff 	mov.w	r4, #4294967295
 800987c:	4620      	mov	r0, r4
 800987e:	bd70      	pop	{r4, r5, r6, pc}
 8009880:	2000b9a4 	.word	0x2000b9a4

08009884 <_malloc_r>:
 8009884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009888:	1ccd      	adds	r5, r1, #3
 800988a:	f025 0503 	bic.w	r5, r5, #3
 800988e:	3508      	adds	r5, #8
 8009890:	2d0c      	cmp	r5, #12
 8009892:	bf38      	it	cc
 8009894:	250c      	movcc	r5, #12
 8009896:	2d00      	cmp	r5, #0
 8009898:	4607      	mov	r7, r0
 800989a:	db01      	blt.n	80098a0 <_malloc_r+0x1c>
 800989c:	42a9      	cmp	r1, r5
 800989e:	d905      	bls.n	80098ac <_malloc_r+0x28>
 80098a0:	230c      	movs	r3, #12
 80098a2:	603b      	str	r3, [r7, #0]
 80098a4:	2600      	movs	r6, #0
 80098a6:	4630      	mov	r0, r6
 80098a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098ac:	4e2e      	ldr	r6, [pc, #184]	; (8009968 <_malloc_r+0xe4>)
 80098ae:	f000 fbc5 	bl	800a03c <__malloc_lock>
 80098b2:	6833      	ldr	r3, [r6, #0]
 80098b4:	461c      	mov	r4, r3
 80098b6:	bb34      	cbnz	r4, 8009906 <_malloc_r+0x82>
 80098b8:	4629      	mov	r1, r5
 80098ba:	4638      	mov	r0, r7
 80098bc:	f7ff ffc2 	bl	8009844 <sbrk_aligned>
 80098c0:	1c43      	adds	r3, r0, #1
 80098c2:	4604      	mov	r4, r0
 80098c4:	d14d      	bne.n	8009962 <_malloc_r+0xde>
 80098c6:	6834      	ldr	r4, [r6, #0]
 80098c8:	4626      	mov	r6, r4
 80098ca:	2e00      	cmp	r6, #0
 80098cc:	d140      	bne.n	8009950 <_malloc_r+0xcc>
 80098ce:	6823      	ldr	r3, [r4, #0]
 80098d0:	4631      	mov	r1, r6
 80098d2:	4638      	mov	r0, r7
 80098d4:	eb04 0803 	add.w	r8, r4, r3
 80098d8:	f000 f940 	bl	8009b5c <_sbrk_r>
 80098dc:	4580      	cmp	r8, r0
 80098de:	d13a      	bne.n	8009956 <_malloc_r+0xd2>
 80098e0:	6821      	ldr	r1, [r4, #0]
 80098e2:	3503      	adds	r5, #3
 80098e4:	1a6d      	subs	r5, r5, r1
 80098e6:	f025 0503 	bic.w	r5, r5, #3
 80098ea:	3508      	adds	r5, #8
 80098ec:	2d0c      	cmp	r5, #12
 80098ee:	bf38      	it	cc
 80098f0:	250c      	movcc	r5, #12
 80098f2:	4629      	mov	r1, r5
 80098f4:	4638      	mov	r0, r7
 80098f6:	f7ff ffa5 	bl	8009844 <sbrk_aligned>
 80098fa:	3001      	adds	r0, #1
 80098fc:	d02b      	beq.n	8009956 <_malloc_r+0xd2>
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	442b      	add	r3, r5
 8009902:	6023      	str	r3, [r4, #0]
 8009904:	e00e      	b.n	8009924 <_malloc_r+0xa0>
 8009906:	6822      	ldr	r2, [r4, #0]
 8009908:	1b52      	subs	r2, r2, r5
 800990a:	d41e      	bmi.n	800994a <_malloc_r+0xc6>
 800990c:	2a0b      	cmp	r2, #11
 800990e:	d916      	bls.n	800993e <_malloc_r+0xba>
 8009910:	1961      	adds	r1, r4, r5
 8009912:	42a3      	cmp	r3, r4
 8009914:	6025      	str	r5, [r4, #0]
 8009916:	bf18      	it	ne
 8009918:	6059      	strne	r1, [r3, #4]
 800991a:	6863      	ldr	r3, [r4, #4]
 800991c:	bf08      	it	eq
 800991e:	6031      	streq	r1, [r6, #0]
 8009920:	5162      	str	r2, [r4, r5]
 8009922:	604b      	str	r3, [r1, #4]
 8009924:	4638      	mov	r0, r7
 8009926:	f104 060b 	add.w	r6, r4, #11
 800992a:	f000 fb8d 	bl	800a048 <__malloc_unlock>
 800992e:	f026 0607 	bic.w	r6, r6, #7
 8009932:	1d23      	adds	r3, r4, #4
 8009934:	1af2      	subs	r2, r6, r3
 8009936:	d0b6      	beq.n	80098a6 <_malloc_r+0x22>
 8009938:	1b9b      	subs	r3, r3, r6
 800993a:	50a3      	str	r3, [r4, r2]
 800993c:	e7b3      	b.n	80098a6 <_malloc_r+0x22>
 800993e:	6862      	ldr	r2, [r4, #4]
 8009940:	42a3      	cmp	r3, r4
 8009942:	bf0c      	ite	eq
 8009944:	6032      	streq	r2, [r6, #0]
 8009946:	605a      	strne	r2, [r3, #4]
 8009948:	e7ec      	b.n	8009924 <_malloc_r+0xa0>
 800994a:	4623      	mov	r3, r4
 800994c:	6864      	ldr	r4, [r4, #4]
 800994e:	e7b2      	b.n	80098b6 <_malloc_r+0x32>
 8009950:	4634      	mov	r4, r6
 8009952:	6876      	ldr	r6, [r6, #4]
 8009954:	e7b9      	b.n	80098ca <_malloc_r+0x46>
 8009956:	230c      	movs	r3, #12
 8009958:	603b      	str	r3, [r7, #0]
 800995a:	4638      	mov	r0, r7
 800995c:	f000 fb74 	bl	800a048 <__malloc_unlock>
 8009960:	e7a1      	b.n	80098a6 <_malloc_r+0x22>
 8009962:	6025      	str	r5, [r4, #0]
 8009964:	e7de      	b.n	8009924 <_malloc_r+0xa0>
 8009966:	bf00      	nop
 8009968:	2000b9a0 	.word	0x2000b9a0

0800996c <iprintf>:
 800996c:	b40f      	push	{r0, r1, r2, r3}
 800996e:	4b0a      	ldr	r3, [pc, #40]	; (8009998 <iprintf+0x2c>)
 8009970:	b513      	push	{r0, r1, r4, lr}
 8009972:	681c      	ldr	r4, [r3, #0]
 8009974:	b124      	cbz	r4, 8009980 <iprintf+0x14>
 8009976:	69a3      	ldr	r3, [r4, #24]
 8009978:	b913      	cbnz	r3, 8009980 <iprintf+0x14>
 800997a:	4620      	mov	r0, r4
 800997c:	f7ff fe94 	bl	80096a8 <__sinit>
 8009980:	ab05      	add	r3, sp, #20
 8009982:	9a04      	ldr	r2, [sp, #16]
 8009984:	68a1      	ldr	r1, [r4, #8]
 8009986:	9301      	str	r3, [sp, #4]
 8009988:	4620      	mov	r0, r4
 800998a:	f000 fbd9 	bl	800a140 <_vfiprintf_r>
 800998e:	b002      	add	sp, #8
 8009990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009994:	b004      	add	sp, #16
 8009996:	4770      	bx	lr
 8009998:	20000040 	.word	0x20000040

0800999c <_puts_r>:
 800999c:	b570      	push	{r4, r5, r6, lr}
 800999e:	460e      	mov	r6, r1
 80099a0:	4605      	mov	r5, r0
 80099a2:	b118      	cbz	r0, 80099ac <_puts_r+0x10>
 80099a4:	6983      	ldr	r3, [r0, #24]
 80099a6:	b90b      	cbnz	r3, 80099ac <_puts_r+0x10>
 80099a8:	f7ff fe7e 	bl	80096a8 <__sinit>
 80099ac:	69ab      	ldr	r3, [r5, #24]
 80099ae:	68ac      	ldr	r4, [r5, #8]
 80099b0:	b913      	cbnz	r3, 80099b8 <_puts_r+0x1c>
 80099b2:	4628      	mov	r0, r5
 80099b4:	f7ff fe78 	bl	80096a8 <__sinit>
 80099b8:	4b2c      	ldr	r3, [pc, #176]	; (8009a6c <_puts_r+0xd0>)
 80099ba:	429c      	cmp	r4, r3
 80099bc:	d120      	bne.n	8009a00 <_puts_r+0x64>
 80099be:	686c      	ldr	r4, [r5, #4]
 80099c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099c2:	07db      	lsls	r3, r3, #31
 80099c4:	d405      	bmi.n	80099d2 <_puts_r+0x36>
 80099c6:	89a3      	ldrh	r3, [r4, #12]
 80099c8:	0598      	lsls	r0, r3, #22
 80099ca:	d402      	bmi.n	80099d2 <_puts_r+0x36>
 80099cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ce:	f7ff ff2e 	bl	800982e <__retarget_lock_acquire_recursive>
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	0719      	lsls	r1, r3, #28
 80099d6:	d51d      	bpl.n	8009a14 <_puts_r+0x78>
 80099d8:	6923      	ldr	r3, [r4, #16]
 80099da:	b1db      	cbz	r3, 8009a14 <_puts_r+0x78>
 80099dc:	3e01      	subs	r6, #1
 80099de:	68a3      	ldr	r3, [r4, #8]
 80099e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80099e4:	3b01      	subs	r3, #1
 80099e6:	60a3      	str	r3, [r4, #8]
 80099e8:	bb39      	cbnz	r1, 8009a3a <_puts_r+0x9e>
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	da38      	bge.n	8009a60 <_puts_r+0xc4>
 80099ee:	4622      	mov	r2, r4
 80099f0:	210a      	movs	r1, #10
 80099f2:	4628      	mov	r0, r5
 80099f4:	f000 f906 	bl	8009c04 <__swbuf_r>
 80099f8:	3001      	adds	r0, #1
 80099fa:	d011      	beq.n	8009a20 <_puts_r+0x84>
 80099fc:	250a      	movs	r5, #10
 80099fe:	e011      	b.n	8009a24 <_puts_r+0x88>
 8009a00:	4b1b      	ldr	r3, [pc, #108]	; (8009a70 <_puts_r+0xd4>)
 8009a02:	429c      	cmp	r4, r3
 8009a04:	d101      	bne.n	8009a0a <_puts_r+0x6e>
 8009a06:	68ac      	ldr	r4, [r5, #8]
 8009a08:	e7da      	b.n	80099c0 <_puts_r+0x24>
 8009a0a:	4b1a      	ldr	r3, [pc, #104]	; (8009a74 <_puts_r+0xd8>)
 8009a0c:	429c      	cmp	r4, r3
 8009a0e:	bf08      	it	eq
 8009a10:	68ec      	ldreq	r4, [r5, #12]
 8009a12:	e7d5      	b.n	80099c0 <_puts_r+0x24>
 8009a14:	4621      	mov	r1, r4
 8009a16:	4628      	mov	r0, r5
 8009a18:	f000 f958 	bl	8009ccc <__swsetup_r>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d0dd      	beq.n	80099dc <_puts_r+0x40>
 8009a20:	f04f 35ff 	mov.w	r5, #4294967295
 8009a24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a26:	07da      	lsls	r2, r3, #31
 8009a28:	d405      	bmi.n	8009a36 <_puts_r+0x9a>
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	059b      	lsls	r3, r3, #22
 8009a2e:	d402      	bmi.n	8009a36 <_puts_r+0x9a>
 8009a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a32:	f7ff fefd 	bl	8009830 <__retarget_lock_release_recursive>
 8009a36:	4628      	mov	r0, r5
 8009a38:	bd70      	pop	{r4, r5, r6, pc}
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	da04      	bge.n	8009a48 <_puts_r+0xac>
 8009a3e:	69a2      	ldr	r2, [r4, #24]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	dc06      	bgt.n	8009a52 <_puts_r+0xb6>
 8009a44:	290a      	cmp	r1, #10
 8009a46:	d004      	beq.n	8009a52 <_puts_r+0xb6>
 8009a48:	6823      	ldr	r3, [r4, #0]
 8009a4a:	1c5a      	adds	r2, r3, #1
 8009a4c:	6022      	str	r2, [r4, #0]
 8009a4e:	7019      	strb	r1, [r3, #0]
 8009a50:	e7c5      	b.n	80099de <_puts_r+0x42>
 8009a52:	4622      	mov	r2, r4
 8009a54:	4628      	mov	r0, r5
 8009a56:	f000 f8d5 	bl	8009c04 <__swbuf_r>
 8009a5a:	3001      	adds	r0, #1
 8009a5c:	d1bf      	bne.n	80099de <_puts_r+0x42>
 8009a5e:	e7df      	b.n	8009a20 <_puts_r+0x84>
 8009a60:	6823      	ldr	r3, [r4, #0]
 8009a62:	250a      	movs	r5, #10
 8009a64:	1c5a      	adds	r2, r3, #1
 8009a66:	6022      	str	r2, [r4, #0]
 8009a68:	701d      	strb	r5, [r3, #0]
 8009a6a:	e7db      	b.n	8009a24 <_puts_r+0x88>
 8009a6c:	0800b870 	.word	0x0800b870
 8009a70:	0800b890 	.word	0x0800b890
 8009a74:	0800b850 	.word	0x0800b850

08009a78 <puts>:
 8009a78:	4b02      	ldr	r3, [pc, #8]	; (8009a84 <puts+0xc>)
 8009a7a:	4601      	mov	r1, r0
 8009a7c:	6818      	ldr	r0, [r3, #0]
 8009a7e:	f7ff bf8d 	b.w	800999c <_puts_r>
 8009a82:	bf00      	nop
 8009a84:	20000040 	.word	0x20000040

08009a88 <cleanup_glue>:
 8009a88:	b538      	push	{r3, r4, r5, lr}
 8009a8a:	460c      	mov	r4, r1
 8009a8c:	6809      	ldr	r1, [r1, #0]
 8009a8e:	4605      	mov	r5, r0
 8009a90:	b109      	cbz	r1, 8009a96 <cleanup_glue+0xe>
 8009a92:	f7ff fff9 	bl	8009a88 <cleanup_glue>
 8009a96:	4621      	mov	r1, r4
 8009a98:	4628      	mov	r0, r5
 8009a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a9e:	f000 bad9 	b.w	800a054 <_free_r>
	...

08009aa4 <_reclaim_reent>:
 8009aa4:	4b2c      	ldr	r3, [pc, #176]	; (8009b58 <_reclaim_reent+0xb4>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4283      	cmp	r3, r0
 8009aaa:	b570      	push	{r4, r5, r6, lr}
 8009aac:	4604      	mov	r4, r0
 8009aae:	d051      	beq.n	8009b54 <_reclaim_reent+0xb0>
 8009ab0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009ab2:	b143      	cbz	r3, 8009ac6 <_reclaim_reent+0x22>
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d14a      	bne.n	8009b50 <_reclaim_reent+0xac>
 8009aba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009abc:	6819      	ldr	r1, [r3, #0]
 8009abe:	b111      	cbz	r1, 8009ac6 <_reclaim_reent+0x22>
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f000 fac7 	bl	800a054 <_free_r>
 8009ac6:	6961      	ldr	r1, [r4, #20]
 8009ac8:	b111      	cbz	r1, 8009ad0 <_reclaim_reent+0x2c>
 8009aca:	4620      	mov	r0, r4
 8009acc:	f000 fac2 	bl	800a054 <_free_r>
 8009ad0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009ad2:	b111      	cbz	r1, 8009ada <_reclaim_reent+0x36>
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	f000 fabd 	bl	800a054 <_free_r>
 8009ada:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009adc:	b111      	cbz	r1, 8009ae4 <_reclaim_reent+0x40>
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f000 fab8 	bl	800a054 <_free_r>
 8009ae4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009ae6:	b111      	cbz	r1, 8009aee <_reclaim_reent+0x4a>
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f000 fab3 	bl	800a054 <_free_r>
 8009aee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009af0:	b111      	cbz	r1, 8009af8 <_reclaim_reent+0x54>
 8009af2:	4620      	mov	r0, r4
 8009af4:	f000 faae 	bl	800a054 <_free_r>
 8009af8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009afa:	b111      	cbz	r1, 8009b02 <_reclaim_reent+0x5e>
 8009afc:	4620      	mov	r0, r4
 8009afe:	f000 faa9 	bl	800a054 <_free_r>
 8009b02:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009b04:	b111      	cbz	r1, 8009b0c <_reclaim_reent+0x68>
 8009b06:	4620      	mov	r0, r4
 8009b08:	f000 faa4 	bl	800a054 <_free_r>
 8009b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b0e:	b111      	cbz	r1, 8009b16 <_reclaim_reent+0x72>
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 fa9f 	bl	800a054 <_free_r>
 8009b16:	69a3      	ldr	r3, [r4, #24]
 8009b18:	b1e3      	cbz	r3, 8009b54 <_reclaim_reent+0xb0>
 8009b1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	4798      	blx	r3
 8009b20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009b22:	b1b9      	cbz	r1, 8009b54 <_reclaim_reent+0xb0>
 8009b24:	4620      	mov	r0, r4
 8009b26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b2a:	f7ff bfad 	b.w	8009a88 <cleanup_glue>
 8009b2e:	5949      	ldr	r1, [r1, r5]
 8009b30:	b941      	cbnz	r1, 8009b44 <_reclaim_reent+0xa0>
 8009b32:	3504      	adds	r5, #4
 8009b34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b36:	2d80      	cmp	r5, #128	; 0x80
 8009b38:	68d9      	ldr	r1, [r3, #12]
 8009b3a:	d1f8      	bne.n	8009b2e <_reclaim_reent+0x8a>
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	f000 fa89 	bl	800a054 <_free_r>
 8009b42:	e7ba      	b.n	8009aba <_reclaim_reent+0x16>
 8009b44:	680e      	ldr	r6, [r1, #0]
 8009b46:	4620      	mov	r0, r4
 8009b48:	f000 fa84 	bl	800a054 <_free_r>
 8009b4c:	4631      	mov	r1, r6
 8009b4e:	e7ef      	b.n	8009b30 <_reclaim_reent+0x8c>
 8009b50:	2500      	movs	r5, #0
 8009b52:	e7ef      	b.n	8009b34 <_reclaim_reent+0x90>
 8009b54:	bd70      	pop	{r4, r5, r6, pc}
 8009b56:	bf00      	nop
 8009b58:	20000040 	.word	0x20000040

08009b5c <_sbrk_r>:
 8009b5c:	b538      	push	{r3, r4, r5, lr}
 8009b5e:	4d06      	ldr	r5, [pc, #24]	; (8009b78 <_sbrk_r+0x1c>)
 8009b60:	2300      	movs	r3, #0
 8009b62:	4604      	mov	r4, r0
 8009b64:	4608      	mov	r0, r1
 8009b66:	602b      	str	r3, [r5, #0]
 8009b68:	f7f8 ff30 	bl	80029cc <_sbrk>
 8009b6c:	1c43      	adds	r3, r0, #1
 8009b6e:	d102      	bne.n	8009b76 <_sbrk_r+0x1a>
 8009b70:	682b      	ldr	r3, [r5, #0]
 8009b72:	b103      	cbz	r3, 8009b76 <_sbrk_r+0x1a>
 8009b74:	6023      	str	r3, [r4, #0]
 8009b76:	bd38      	pop	{r3, r4, r5, pc}
 8009b78:	2000b9a8 	.word	0x2000b9a8

08009b7c <__sread>:
 8009b7c:	b510      	push	{r4, lr}
 8009b7e:	460c      	mov	r4, r1
 8009b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b84:	f000 fda0 	bl	800a6c8 <_read_r>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	bfab      	itete	ge
 8009b8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8009b90:	181b      	addge	r3, r3, r0
 8009b92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b96:	bfac      	ite	ge
 8009b98:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b9a:	81a3      	strhlt	r3, [r4, #12]
 8009b9c:	bd10      	pop	{r4, pc}

08009b9e <__swrite>:
 8009b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba2:	461f      	mov	r7, r3
 8009ba4:	898b      	ldrh	r3, [r1, #12]
 8009ba6:	05db      	lsls	r3, r3, #23
 8009ba8:	4605      	mov	r5, r0
 8009baa:	460c      	mov	r4, r1
 8009bac:	4616      	mov	r6, r2
 8009bae:	d505      	bpl.n	8009bbc <__swrite+0x1e>
 8009bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f000 f9c8 	bl	8009f4c <_lseek_r>
 8009bbc:	89a3      	ldrh	r3, [r4, #12]
 8009bbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bc6:	81a3      	strh	r3, [r4, #12]
 8009bc8:	4632      	mov	r2, r6
 8009bca:	463b      	mov	r3, r7
 8009bcc:	4628      	mov	r0, r5
 8009bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bd2:	f000 b869 	b.w	8009ca8 <_write_r>

08009bd6 <__sseek>:
 8009bd6:	b510      	push	{r4, lr}
 8009bd8:	460c      	mov	r4, r1
 8009bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bde:	f000 f9b5 	bl	8009f4c <_lseek_r>
 8009be2:	1c43      	adds	r3, r0, #1
 8009be4:	89a3      	ldrh	r3, [r4, #12]
 8009be6:	bf15      	itete	ne
 8009be8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009bea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009bee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009bf2:	81a3      	strheq	r3, [r4, #12]
 8009bf4:	bf18      	it	ne
 8009bf6:	81a3      	strhne	r3, [r4, #12]
 8009bf8:	bd10      	pop	{r4, pc}

08009bfa <__sclose>:
 8009bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bfe:	f000 b8d3 	b.w	8009da8 <_close_r>
	...

08009c04 <__swbuf_r>:
 8009c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c06:	460e      	mov	r6, r1
 8009c08:	4614      	mov	r4, r2
 8009c0a:	4605      	mov	r5, r0
 8009c0c:	b118      	cbz	r0, 8009c16 <__swbuf_r+0x12>
 8009c0e:	6983      	ldr	r3, [r0, #24]
 8009c10:	b90b      	cbnz	r3, 8009c16 <__swbuf_r+0x12>
 8009c12:	f7ff fd49 	bl	80096a8 <__sinit>
 8009c16:	4b21      	ldr	r3, [pc, #132]	; (8009c9c <__swbuf_r+0x98>)
 8009c18:	429c      	cmp	r4, r3
 8009c1a:	d12b      	bne.n	8009c74 <__swbuf_r+0x70>
 8009c1c:	686c      	ldr	r4, [r5, #4]
 8009c1e:	69a3      	ldr	r3, [r4, #24]
 8009c20:	60a3      	str	r3, [r4, #8]
 8009c22:	89a3      	ldrh	r3, [r4, #12]
 8009c24:	071a      	lsls	r2, r3, #28
 8009c26:	d52f      	bpl.n	8009c88 <__swbuf_r+0x84>
 8009c28:	6923      	ldr	r3, [r4, #16]
 8009c2a:	b36b      	cbz	r3, 8009c88 <__swbuf_r+0x84>
 8009c2c:	6923      	ldr	r3, [r4, #16]
 8009c2e:	6820      	ldr	r0, [r4, #0]
 8009c30:	1ac0      	subs	r0, r0, r3
 8009c32:	6963      	ldr	r3, [r4, #20]
 8009c34:	b2f6      	uxtb	r6, r6
 8009c36:	4283      	cmp	r3, r0
 8009c38:	4637      	mov	r7, r6
 8009c3a:	dc04      	bgt.n	8009c46 <__swbuf_r+0x42>
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	4628      	mov	r0, r5
 8009c40:	f000 f948 	bl	8009ed4 <_fflush_r>
 8009c44:	bb30      	cbnz	r0, 8009c94 <__swbuf_r+0x90>
 8009c46:	68a3      	ldr	r3, [r4, #8]
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	60a3      	str	r3, [r4, #8]
 8009c4c:	6823      	ldr	r3, [r4, #0]
 8009c4e:	1c5a      	adds	r2, r3, #1
 8009c50:	6022      	str	r2, [r4, #0]
 8009c52:	701e      	strb	r6, [r3, #0]
 8009c54:	6963      	ldr	r3, [r4, #20]
 8009c56:	3001      	adds	r0, #1
 8009c58:	4283      	cmp	r3, r0
 8009c5a:	d004      	beq.n	8009c66 <__swbuf_r+0x62>
 8009c5c:	89a3      	ldrh	r3, [r4, #12]
 8009c5e:	07db      	lsls	r3, r3, #31
 8009c60:	d506      	bpl.n	8009c70 <__swbuf_r+0x6c>
 8009c62:	2e0a      	cmp	r6, #10
 8009c64:	d104      	bne.n	8009c70 <__swbuf_r+0x6c>
 8009c66:	4621      	mov	r1, r4
 8009c68:	4628      	mov	r0, r5
 8009c6a:	f000 f933 	bl	8009ed4 <_fflush_r>
 8009c6e:	b988      	cbnz	r0, 8009c94 <__swbuf_r+0x90>
 8009c70:	4638      	mov	r0, r7
 8009c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c74:	4b0a      	ldr	r3, [pc, #40]	; (8009ca0 <__swbuf_r+0x9c>)
 8009c76:	429c      	cmp	r4, r3
 8009c78:	d101      	bne.n	8009c7e <__swbuf_r+0x7a>
 8009c7a:	68ac      	ldr	r4, [r5, #8]
 8009c7c:	e7cf      	b.n	8009c1e <__swbuf_r+0x1a>
 8009c7e:	4b09      	ldr	r3, [pc, #36]	; (8009ca4 <__swbuf_r+0xa0>)
 8009c80:	429c      	cmp	r4, r3
 8009c82:	bf08      	it	eq
 8009c84:	68ec      	ldreq	r4, [r5, #12]
 8009c86:	e7ca      	b.n	8009c1e <__swbuf_r+0x1a>
 8009c88:	4621      	mov	r1, r4
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	f000 f81e 	bl	8009ccc <__swsetup_r>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d0cb      	beq.n	8009c2c <__swbuf_r+0x28>
 8009c94:	f04f 37ff 	mov.w	r7, #4294967295
 8009c98:	e7ea      	b.n	8009c70 <__swbuf_r+0x6c>
 8009c9a:	bf00      	nop
 8009c9c:	0800b870 	.word	0x0800b870
 8009ca0:	0800b890 	.word	0x0800b890
 8009ca4:	0800b850 	.word	0x0800b850

08009ca8 <_write_r>:
 8009ca8:	b538      	push	{r3, r4, r5, lr}
 8009caa:	4d07      	ldr	r5, [pc, #28]	; (8009cc8 <_write_r+0x20>)
 8009cac:	4604      	mov	r4, r0
 8009cae:	4608      	mov	r0, r1
 8009cb0:	4611      	mov	r1, r2
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	602a      	str	r2, [r5, #0]
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	f7f8 fe37 	bl	800292a <_write>
 8009cbc:	1c43      	adds	r3, r0, #1
 8009cbe:	d102      	bne.n	8009cc6 <_write_r+0x1e>
 8009cc0:	682b      	ldr	r3, [r5, #0]
 8009cc2:	b103      	cbz	r3, 8009cc6 <_write_r+0x1e>
 8009cc4:	6023      	str	r3, [r4, #0]
 8009cc6:	bd38      	pop	{r3, r4, r5, pc}
 8009cc8:	2000b9a8 	.word	0x2000b9a8

08009ccc <__swsetup_r>:
 8009ccc:	4b32      	ldr	r3, [pc, #200]	; (8009d98 <__swsetup_r+0xcc>)
 8009cce:	b570      	push	{r4, r5, r6, lr}
 8009cd0:	681d      	ldr	r5, [r3, #0]
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	460c      	mov	r4, r1
 8009cd6:	b125      	cbz	r5, 8009ce2 <__swsetup_r+0x16>
 8009cd8:	69ab      	ldr	r3, [r5, #24]
 8009cda:	b913      	cbnz	r3, 8009ce2 <__swsetup_r+0x16>
 8009cdc:	4628      	mov	r0, r5
 8009cde:	f7ff fce3 	bl	80096a8 <__sinit>
 8009ce2:	4b2e      	ldr	r3, [pc, #184]	; (8009d9c <__swsetup_r+0xd0>)
 8009ce4:	429c      	cmp	r4, r3
 8009ce6:	d10f      	bne.n	8009d08 <__swsetup_r+0x3c>
 8009ce8:	686c      	ldr	r4, [r5, #4]
 8009cea:	89a3      	ldrh	r3, [r4, #12]
 8009cec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cf0:	0719      	lsls	r1, r3, #28
 8009cf2:	d42c      	bmi.n	8009d4e <__swsetup_r+0x82>
 8009cf4:	06dd      	lsls	r5, r3, #27
 8009cf6:	d411      	bmi.n	8009d1c <__swsetup_r+0x50>
 8009cf8:	2309      	movs	r3, #9
 8009cfa:	6033      	str	r3, [r6, #0]
 8009cfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d00:	81a3      	strh	r3, [r4, #12]
 8009d02:	f04f 30ff 	mov.w	r0, #4294967295
 8009d06:	e03e      	b.n	8009d86 <__swsetup_r+0xba>
 8009d08:	4b25      	ldr	r3, [pc, #148]	; (8009da0 <__swsetup_r+0xd4>)
 8009d0a:	429c      	cmp	r4, r3
 8009d0c:	d101      	bne.n	8009d12 <__swsetup_r+0x46>
 8009d0e:	68ac      	ldr	r4, [r5, #8]
 8009d10:	e7eb      	b.n	8009cea <__swsetup_r+0x1e>
 8009d12:	4b24      	ldr	r3, [pc, #144]	; (8009da4 <__swsetup_r+0xd8>)
 8009d14:	429c      	cmp	r4, r3
 8009d16:	bf08      	it	eq
 8009d18:	68ec      	ldreq	r4, [r5, #12]
 8009d1a:	e7e6      	b.n	8009cea <__swsetup_r+0x1e>
 8009d1c:	0758      	lsls	r0, r3, #29
 8009d1e:	d512      	bpl.n	8009d46 <__swsetup_r+0x7a>
 8009d20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d22:	b141      	cbz	r1, 8009d36 <__swsetup_r+0x6a>
 8009d24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d28:	4299      	cmp	r1, r3
 8009d2a:	d002      	beq.n	8009d32 <__swsetup_r+0x66>
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	f000 f991 	bl	800a054 <_free_r>
 8009d32:	2300      	movs	r3, #0
 8009d34:	6363      	str	r3, [r4, #52]	; 0x34
 8009d36:	89a3      	ldrh	r3, [r4, #12]
 8009d38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d3c:	81a3      	strh	r3, [r4, #12]
 8009d3e:	2300      	movs	r3, #0
 8009d40:	6063      	str	r3, [r4, #4]
 8009d42:	6923      	ldr	r3, [r4, #16]
 8009d44:	6023      	str	r3, [r4, #0]
 8009d46:	89a3      	ldrh	r3, [r4, #12]
 8009d48:	f043 0308 	orr.w	r3, r3, #8
 8009d4c:	81a3      	strh	r3, [r4, #12]
 8009d4e:	6923      	ldr	r3, [r4, #16]
 8009d50:	b94b      	cbnz	r3, 8009d66 <__swsetup_r+0x9a>
 8009d52:	89a3      	ldrh	r3, [r4, #12]
 8009d54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d5c:	d003      	beq.n	8009d66 <__swsetup_r+0x9a>
 8009d5e:	4621      	mov	r1, r4
 8009d60:	4630      	mov	r0, r6
 8009d62:	f000 f92b 	bl	8009fbc <__smakebuf_r>
 8009d66:	89a0      	ldrh	r0, [r4, #12]
 8009d68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d6c:	f010 0301 	ands.w	r3, r0, #1
 8009d70:	d00a      	beq.n	8009d88 <__swsetup_r+0xbc>
 8009d72:	2300      	movs	r3, #0
 8009d74:	60a3      	str	r3, [r4, #8]
 8009d76:	6963      	ldr	r3, [r4, #20]
 8009d78:	425b      	negs	r3, r3
 8009d7a:	61a3      	str	r3, [r4, #24]
 8009d7c:	6923      	ldr	r3, [r4, #16]
 8009d7e:	b943      	cbnz	r3, 8009d92 <__swsetup_r+0xc6>
 8009d80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d84:	d1ba      	bne.n	8009cfc <__swsetup_r+0x30>
 8009d86:	bd70      	pop	{r4, r5, r6, pc}
 8009d88:	0781      	lsls	r1, r0, #30
 8009d8a:	bf58      	it	pl
 8009d8c:	6963      	ldrpl	r3, [r4, #20]
 8009d8e:	60a3      	str	r3, [r4, #8]
 8009d90:	e7f4      	b.n	8009d7c <__swsetup_r+0xb0>
 8009d92:	2000      	movs	r0, #0
 8009d94:	e7f7      	b.n	8009d86 <__swsetup_r+0xba>
 8009d96:	bf00      	nop
 8009d98:	20000040 	.word	0x20000040
 8009d9c:	0800b870 	.word	0x0800b870
 8009da0:	0800b890 	.word	0x0800b890
 8009da4:	0800b850 	.word	0x0800b850

08009da8 <_close_r>:
 8009da8:	b538      	push	{r3, r4, r5, lr}
 8009daa:	4d06      	ldr	r5, [pc, #24]	; (8009dc4 <_close_r+0x1c>)
 8009dac:	2300      	movs	r3, #0
 8009dae:	4604      	mov	r4, r0
 8009db0:	4608      	mov	r0, r1
 8009db2:	602b      	str	r3, [r5, #0]
 8009db4:	f7f8 fdd5 	bl	8002962 <_close>
 8009db8:	1c43      	adds	r3, r0, #1
 8009dba:	d102      	bne.n	8009dc2 <_close_r+0x1a>
 8009dbc:	682b      	ldr	r3, [r5, #0]
 8009dbe:	b103      	cbz	r3, 8009dc2 <_close_r+0x1a>
 8009dc0:	6023      	str	r3, [r4, #0]
 8009dc2:	bd38      	pop	{r3, r4, r5, pc}
 8009dc4:	2000b9a8 	.word	0x2000b9a8

08009dc8 <__sflush_r>:
 8009dc8:	898a      	ldrh	r2, [r1, #12]
 8009dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dce:	4605      	mov	r5, r0
 8009dd0:	0710      	lsls	r0, r2, #28
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	d458      	bmi.n	8009e88 <__sflush_r+0xc0>
 8009dd6:	684b      	ldr	r3, [r1, #4]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	dc05      	bgt.n	8009de8 <__sflush_r+0x20>
 8009ddc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	dc02      	bgt.n	8009de8 <__sflush_r+0x20>
 8009de2:	2000      	movs	r0, #0
 8009de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009de8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dea:	2e00      	cmp	r6, #0
 8009dec:	d0f9      	beq.n	8009de2 <__sflush_r+0x1a>
 8009dee:	2300      	movs	r3, #0
 8009df0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009df4:	682f      	ldr	r7, [r5, #0]
 8009df6:	602b      	str	r3, [r5, #0]
 8009df8:	d032      	beq.n	8009e60 <__sflush_r+0x98>
 8009dfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009dfc:	89a3      	ldrh	r3, [r4, #12]
 8009dfe:	075a      	lsls	r2, r3, #29
 8009e00:	d505      	bpl.n	8009e0e <__sflush_r+0x46>
 8009e02:	6863      	ldr	r3, [r4, #4]
 8009e04:	1ac0      	subs	r0, r0, r3
 8009e06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e08:	b10b      	cbz	r3, 8009e0e <__sflush_r+0x46>
 8009e0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e0c:	1ac0      	subs	r0, r0, r3
 8009e0e:	2300      	movs	r3, #0
 8009e10:	4602      	mov	r2, r0
 8009e12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e14:	6a21      	ldr	r1, [r4, #32]
 8009e16:	4628      	mov	r0, r5
 8009e18:	47b0      	blx	r6
 8009e1a:	1c43      	adds	r3, r0, #1
 8009e1c:	89a3      	ldrh	r3, [r4, #12]
 8009e1e:	d106      	bne.n	8009e2e <__sflush_r+0x66>
 8009e20:	6829      	ldr	r1, [r5, #0]
 8009e22:	291d      	cmp	r1, #29
 8009e24:	d82c      	bhi.n	8009e80 <__sflush_r+0xb8>
 8009e26:	4a2a      	ldr	r2, [pc, #168]	; (8009ed0 <__sflush_r+0x108>)
 8009e28:	40ca      	lsrs	r2, r1
 8009e2a:	07d6      	lsls	r6, r2, #31
 8009e2c:	d528      	bpl.n	8009e80 <__sflush_r+0xb8>
 8009e2e:	2200      	movs	r2, #0
 8009e30:	6062      	str	r2, [r4, #4]
 8009e32:	04d9      	lsls	r1, r3, #19
 8009e34:	6922      	ldr	r2, [r4, #16]
 8009e36:	6022      	str	r2, [r4, #0]
 8009e38:	d504      	bpl.n	8009e44 <__sflush_r+0x7c>
 8009e3a:	1c42      	adds	r2, r0, #1
 8009e3c:	d101      	bne.n	8009e42 <__sflush_r+0x7a>
 8009e3e:	682b      	ldr	r3, [r5, #0]
 8009e40:	b903      	cbnz	r3, 8009e44 <__sflush_r+0x7c>
 8009e42:	6560      	str	r0, [r4, #84]	; 0x54
 8009e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e46:	602f      	str	r7, [r5, #0]
 8009e48:	2900      	cmp	r1, #0
 8009e4a:	d0ca      	beq.n	8009de2 <__sflush_r+0x1a>
 8009e4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e50:	4299      	cmp	r1, r3
 8009e52:	d002      	beq.n	8009e5a <__sflush_r+0x92>
 8009e54:	4628      	mov	r0, r5
 8009e56:	f000 f8fd 	bl	800a054 <_free_r>
 8009e5a:	2000      	movs	r0, #0
 8009e5c:	6360      	str	r0, [r4, #52]	; 0x34
 8009e5e:	e7c1      	b.n	8009de4 <__sflush_r+0x1c>
 8009e60:	6a21      	ldr	r1, [r4, #32]
 8009e62:	2301      	movs	r3, #1
 8009e64:	4628      	mov	r0, r5
 8009e66:	47b0      	blx	r6
 8009e68:	1c41      	adds	r1, r0, #1
 8009e6a:	d1c7      	bne.n	8009dfc <__sflush_r+0x34>
 8009e6c:	682b      	ldr	r3, [r5, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d0c4      	beq.n	8009dfc <__sflush_r+0x34>
 8009e72:	2b1d      	cmp	r3, #29
 8009e74:	d001      	beq.n	8009e7a <__sflush_r+0xb2>
 8009e76:	2b16      	cmp	r3, #22
 8009e78:	d101      	bne.n	8009e7e <__sflush_r+0xb6>
 8009e7a:	602f      	str	r7, [r5, #0]
 8009e7c:	e7b1      	b.n	8009de2 <__sflush_r+0x1a>
 8009e7e:	89a3      	ldrh	r3, [r4, #12]
 8009e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e84:	81a3      	strh	r3, [r4, #12]
 8009e86:	e7ad      	b.n	8009de4 <__sflush_r+0x1c>
 8009e88:	690f      	ldr	r7, [r1, #16]
 8009e8a:	2f00      	cmp	r7, #0
 8009e8c:	d0a9      	beq.n	8009de2 <__sflush_r+0x1a>
 8009e8e:	0793      	lsls	r3, r2, #30
 8009e90:	680e      	ldr	r6, [r1, #0]
 8009e92:	bf08      	it	eq
 8009e94:	694b      	ldreq	r3, [r1, #20]
 8009e96:	600f      	str	r7, [r1, #0]
 8009e98:	bf18      	it	ne
 8009e9a:	2300      	movne	r3, #0
 8009e9c:	eba6 0807 	sub.w	r8, r6, r7
 8009ea0:	608b      	str	r3, [r1, #8]
 8009ea2:	f1b8 0f00 	cmp.w	r8, #0
 8009ea6:	dd9c      	ble.n	8009de2 <__sflush_r+0x1a>
 8009ea8:	6a21      	ldr	r1, [r4, #32]
 8009eaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009eac:	4643      	mov	r3, r8
 8009eae:	463a      	mov	r2, r7
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	47b0      	blx	r6
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	dc06      	bgt.n	8009ec6 <__sflush_r+0xfe>
 8009eb8:	89a3      	ldrh	r3, [r4, #12]
 8009eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ebe:	81a3      	strh	r3, [r4, #12]
 8009ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec4:	e78e      	b.n	8009de4 <__sflush_r+0x1c>
 8009ec6:	4407      	add	r7, r0
 8009ec8:	eba8 0800 	sub.w	r8, r8, r0
 8009ecc:	e7e9      	b.n	8009ea2 <__sflush_r+0xda>
 8009ece:	bf00      	nop
 8009ed0:	20400001 	.word	0x20400001

08009ed4 <_fflush_r>:
 8009ed4:	b538      	push	{r3, r4, r5, lr}
 8009ed6:	690b      	ldr	r3, [r1, #16]
 8009ed8:	4605      	mov	r5, r0
 8009eda:	460c      	mov	r4, r1
 8009edc:	b913      	cbnz	r3, 8009ee4 <_fflush_r+0x10>
 8009ede:	2500      	movs	r5, #0
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	bd38      	pop	{r3, r4, r5, pc}
 8009ee4:	b118      	cbz	r0, 8009eee <_fflush_r+0x1a>
 8009ee6:	6983      	ldr	r3, [r0, #24]
 8009ee8:	b90b      	cbnz	r3, 8009eee <_fflush_r+0x1a>
 8009eea:	f7ff fbdd 	bl	80096a8 <__sinit>
 8009eee:	4b14      	ldr	r3, [pc, #80]	; (8009f40 <_fflush_r+0x6c>)
 8009ef0:	429c      	cmp	r4, r3
 8009ef2:	d11b      	bne.n	8009f2c <_fflush_r+0x58>
 8009ef4:	686c      	ldr	r4, [r5, #4]
 8009ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d0ef      	beq.n	8009ede <_fflush_r+0xa>
 8009efe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f00:	07d0      	lsls	r0, r2, #31
 8009f02:	d404      	bmi.n	8009f0e <_fflush_r+0x3a>
 8009f04:	0599      	lsls	r1, r3, #22
 8009f06:	d402      	bmi.n	8009f0e <_fflush_r+0x3a>
 8009f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f0a:	f7ff fc90 	bl	800982e <__retarget_lock_acquire_recursive>
 8009f0e:	4628      	mov	r0, r5
 8009f10:	4621      	mov	r1, r4
 8009f12:	f7ff ff59 	bl	8009dc8 <__sflush_r>
 8009f16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f18:	07da      	lsls	r2, r3, #31
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	d4e0      	bmi.n	8009ee0 <_fflush_r+0xc>
 8009f1e:	89a3      	ldrh	r3, [r4, #12]
 8009f20:	059b      	lsls	r3, r3, #22
 8009f22:	d4dd      	bmi.n	8009ee0 <_fflush_r+0xc>
 8009f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f26:	f7ff fc83 	bl	8009830 <__retarget_lock_release_recursive>
 8009f2a:	e7d9      	b.n	8009ee0 <_fflush_r+0xc>
 8009f2c:	4b05      	ldr	r3, [pc, #20]	; (8009f44 <_fflush_r+0x70>)
 8009f2e:	429c      	cmp	r4, r3
 8009f30:	d101      	bne.n	8009f36 <_fflush_r+0x62>
 8009f32:	68ac      	ldr	r4, [r5, #8]
 8009f34:	e7df      	b.n	8009ef6 <_fflush_r+0x22>
 8009f36:	4b04      	ldr	r3, [pc, #16]	; (8009f48 <_fflush_r+0x74>)
 8009f38:	429c      	cmp	r4, r3
 8009f3a:	bf08      	it	eq
 8009f3c:	68ec      	ldreq	r4, [r5, #12]
 8009f3e:	e7da      	b.n	8009ef6 <_fflush_r+0x22>
 8009f40:	0800b870 	.word	0x0800b870
 8009f44:	0800b890 	.word	0x0800b890
 8009f48:	0800b850 	.word	0x0800b850

08009f4c <_lseek_r>:
 8009f4c:	b538      	push	{r3, r4, r5, lr}
 8009f4e:	4d07      	ldr	r5, [pc, #28]	; (8009f6c <_lseek_r+0x20>)
 8009f50:	4604      	mov	r4, r0
 8009f52:	4608      	mov	r0, r1
 8009f54:	4611      	mov	r1, r2
 8009f56:	2200      	movs	r2, #0
 8009f58:	602a      	str	r2, [r5, #0]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	f7f8 fd28 	bl	80029b0 <_lseek>
 8009f60:	1c43      	adds	r3, r0, #1
 8009f62:	d102      	bne.n	8009f6a <_lseek_r+0x1e>
 8009f64:	682b      	ldr	r3, [r5, #0]
 8009f66:	b103      	cbz	r3, 8009f6a <_lseek_r+0x1e>
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	bd38      	pop	{r3, r4, r5, pc}
 8009f6c:	2000b9a8 	.word	0x2000b9a8

08009f70 <__swhatbuf_r>:
 8009f70:	b570      	push	{r4, r5, r6, lr}
 8009f72:	460e      	mov	r6, r1
 8009f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f78:	2900      	cmp	r1, #0
 8009f7a:	b096      	sub	sp, #88	; 0x58
 8009f7c:	4614      	mov	r4, r2
 8009f7e:	461d      	mov	r5, r3
 8009f80:	da08      	bge.n	8009f94 <__swhatbuf_r+0x24>
 8009f82:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009f86:	2200      	movs	r2, #0
 8009f88:	602a      	str	r2, [r5, #0]
 8009f8a:	061a      	lsls	r2, r3, #24
 8009f8c:	d410      	bmi.n	8009fb0 <__swhatbuf_r+0x40>
 8009f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f92:	e00e      	b.n	8009fb2 <__swhatbuf_r+0x42>
 8009f94:	466a      	mov	r2, sp
 8009f96:	f000 fba9 	bl	800a6ec <_fstat_r>
 8009f9a:	2800      	cmp	r0, #0
 8009f9c:	dbf1      	blt.n	8009f82 <__swhatbuf_r+0x12>
 8009f9e:	9a01      	ldr	r2, [sp, #4]
 8009fa0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009fa4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009fa8:	425a      	negs	r2, r3
 8009faa:	415a      	adcs	r2, r3
 8009fac:	602a      	str	r2, [r5, #0]
 8009fae:	e7ee      	b.n	8009f8e <__swhatbuf_r+0x1e>
 8009fb0:	2340      	movs	r3, #64	; 0x40
 8009fb2:	2000      	movs	r0, #0
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	b016      	add	sp, #88	; 0x58
 8009fb8:	bd70      	pop	{r4, r5, r6, pc}
	...

08009fbc <__smakebuf_r>:
 8009fbc:	898b      	ldrh	r3, [r1, #12]
 8009fbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fc0:	079d      	lsls	r5, r3, #30
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	460c      	mov	r4, r1
 8009fc6:	d507      	bpl.n	8009fd8 <__smakebuf_r+0x1c>
 8009fc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009fcc:	6023      	str	r3, [r4, #0]
 8009fce:	6123      	str	r3, [r4, #16]
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	6163      	str	r3, [r4, #20]
 8009fd4:	b002      	add	sp, #8
 8009fd6:	bd70      	pop	{r4, r5, r6, pc}
 8009fd8:	ab01      	add	r3, sp, #4
 8009fda:	466a      	mov	r2, sp
 8009fdc:	f7ff ffc8 	bl	8009f70 <__swhatbuf_r>
 8009fe0:	9900      	ldr	r1, [sp, #0]
 8009fe2:	4605      	mov	r5, r0
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	f7ff fc4d 	bl	8009884 <_malloc_r>
 8009fea:	b948      	cbnz	r0, 800a000 <__smakebuf_r+0x44>
 8009fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ff0:	059a      	lsls	r2, r3, #22
 8009ff2:	d4ef      	bmi.n	8009fd4 <__smakebuf_r+0x18>
 8009ff4:	f023 0303 	bic.w	r3, r3, #3
 8009ff8:	f043 0302 	orr.w	r3, r3, #2
 8009ffc:	81a3      	strh	r3, [r4, #12]
 8009ffe:	e7e3      	b.n	8009fc8 <__smakebuf_r+0xc>
 800a000:	4b0d      	ldr	r3, [pc, #52]	; (800a038 <__smakebuf_r+0x7c>)
 800a002:	62b3      	str	r3, [r6, #40]	; 0x28
 800a004:	89a3      	ldrh	r3, [r4, #12]
 800a006:	6020      	str	r0, [r4, #0]
 800a008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a00c:	81a3      	strh	r3, [r4, #12]
 800a00e:	9b00      	ldr	r3, [sp, #0]
 800a010:	6163      	str	r3, [r4, #20]
 800a012:	9b01      	ldr	r3, [sp, #4]
 800a014:	6120      	str	r0, [r4, #16]
 800a016:	b15b      	cbz	r3, 800a030 <__smakebuf_r+0x74>
 800a018:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a01c:	4630      	mov	r0, r6
 800a01e:	f000 fb77 	bl	800a710 <_isatty_r>
 800a022:	b128      	cbz	r0, 800a030 <__smakebuf_r+0x74>
 800a024:	89a3      	ldrh	r3, [r4, #12]
 800a026:	f023 0303 	bic.w	r3, r3, #3
 800a02a:	f043 0301 	orr.w	r3, r3, #1
 800a02e:	81a3      	strh	r3, [r4, #12]
 800a030:	89a0      	ldrh	r0, [r4, #12]
 800a032:	4305      	orrs	r5, r0
 800a034:	81a5      	strh	r5, [r4, #12]
 800a036:	e7cd      	b.n	8009fd4 <__smakebuf_r+0x18>
 800a038:	08009641 	.word	0x08009641

0800a03c <__malloc_lock>:
 800a03c:	4801      	ldr	r0, [pc, #4]	; (800a044 <__malloc_lock+0x8>)
 800a03e:	f7ff bbf6 	b.w	800982e <__retarget_lock_acquire_recursive>
 800a042:	bf00      	nop
 800a044:	2000b99c 	.word	0x2000b99c

0800a048 <__malloc_unlock>:
 800a048:	4801      	ldr	r0, [pc, #4]	; (800a050 <__malloc_unlock+0x8>)
 800a04a:	f7ff bbf1 	b.w	8009830 <__retarget_lock_release_recursive>
 800a04e:	bf00      	nop
 800a050:	2000b99c 	.word	0x2000b99c

0800a054 <_free_r>:
 800a054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a056:	2900      	cmp	r1, #0
 800a058:	d044      	beq.n	800a0e4 <_free_r+0x90>
 800a05a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a05e:	9001      	str	r0, [sp, #4]
 800a060:	2b00      	cmp	r3, #0
 800a062:	f1a1 0404 	sub.w	r4, r1, #4
 800a066:	bfb8      	it	lt
 800a068:	18e4      	addlt	r4, r4, r3
 800a06a:	f7ff ffe7 	bl	800a03c <__malloc_lock>
 800a06e:	4a1e      	ldr	r2, [pc, #120]	; (800a0e8 <_free_r+0x94>)
 800a070:	9801      	ldr	r0, [sp, #4]
 800a072:	6813      	ldr	r3, [r2, #0]
 800a074:	b933      	cbnz	r3, 800a084 <_free_r+0x30>
 800a076:	6063      	str	r3, [r4, #4]
 800a078:	6014      	str	r4, [r2, #0]
 800a07a:	b003      	add	sp, #12
 800a07c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a080:	f7ff bfe2 	b.w	800a048 <__malloc_unlock>
 800a084:	42a3      	cmp	r3, r4
 800a086:	d908      	bls.n	800a09a <_free_r+0x46>
 800a088:	6825      	ldr	r5, [r4, #0]
 800a08a:	1961      	adds	r1, r4, r5
 800a08c:	428b      	cmp	r3, r1
 800a08e:	bf01      	itttt	eq
 800a090:	6819      	ldreq	r1, [r3, #0]
 800a092:	685b      	ldreq	r3, [r3, #4]
 800a094:	1949      	addeq	r1, r1, r5
 800a096:	6021      	streq	r1, [r4, #0]
 800a098:	e7ed      	b.n	800a076 <_free_r+0x22>
 800a09a:	461a      	mov	r2, r3
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	b10b      	cbz	r3, 800a0a4 <_free_r+0x50>
 800a0a0:	42a3      	cmp	r3, r4
 800a0a2:	d9fa      	bls.n	800a09a <_free_r+0x46>
 800a0a4:	6811      	ldr	r1, [r2, #0]
 800a0a6:	1855      	adds	r5, r2, r1
 800a0a8:	42a5      	cmp	r5, r4
 800a0aa:	d10b      	bne.n	800a0c4 <_free_r+0x70>
 800a0ac:	6824      	ldr	r4, [r4, #0]
 800a0ae:	4421      	add	r1, r4
 800a0b0:	1854      	adds	r4, r2, r1
 800a0b2:	42a3      	cmp	r3, r4
 800a0b4:	6011      	str	r1, [r2, #0]
 800a0b6:	d1e0      	bne.n	800a07a <_free_r+0x26>
 800a0b8:	681c      	ldr	r4, [r3, #0]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	6053      	str	r3, [r2, #4]
 800a0be:	4421      	add	r1, r4
 800a0c0:	6011      	str	r1, [r2, #0]
 800a0c2:	e7da      	b.n	800a07a <_free_r+0x26>
 800a0c4:	d902      	bls.n	800a0cc <_free_r+0x78>
 800a0c6:	230c      	movs	r3, #12
 800a0c8:	6003      	str	r3, [r0, #0]
 800a0ca:	e7d6      	b.n	800a07a <_free_r+0x26>
 800a0cc:	6825      	ldr	r5, [r4, #0]
 800a0ce:	1961      	adds	r1, r4, r5
 800a0d0:	428b      	cmp	r3, r1
 800a0d2:	bf04      	itt	eq
 800a0d4:	6819      	ldreq	r1, [r3, #0]
 800a0d6:	685b      	ldreq	r3, [r3, #4]
 800a0d8:	6063      	str	r3, [r4, #4]
 800a0da:	bf04      	itt	eq
 800a0dc:	1949      	addeq	r1, r1, r5
 800a0de:	6021      	streq	r1, [r4, #0]
 800a0e0:	6054      	str	r4, [r2, #4]
 800a0e2:	e7ca      	b.n	800a07a <_free_r+0x26>
 800a0e4:	b003      	add	sp, #12
 800a0e6:	bd30      	pop	{r4, r5, pc}
 800a0e8:	2000b9a0 	.word	0x2000b9a0

0800a0ec <__sfputc_r>:
 800a0ec:	6893      	ldr	r3, [r2, #8]
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	b410      	push	{r4}
 800a0f4:	6093      	str	r3, [r2, #8]
 800a0f6:	da08      	bge.n	800a10a <__sfputc_r+0x1e>
 800a0f8:	6994      	ldr	r4, [r2, #24]
 800a0fa:	42a3      	cmp	r3, r4
 800a0fc:	db01      	blt.n	800a102 <__sfputc_r+0x16>
 800a0fe:	290a      	cmp	r1, #10
 800a100:	d103      	bne.n	800a10a <__sfputc_r+0x1e>
 800a102:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a106:	f7ff bd7d 	b.w	8009c04 <__swbuf_r>
 800a10a:	6813      	ldr	r3, [r2, #0]
 800a10c:	1c58      	adds	r0, r3, #1
 800a10e:	6010      	str	r0, [r2, #0]
 800a110:	7019      	strb	r1, [r3, #0]
 800a112:	4608      	mov	r0, r1
 800a114:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <__sfputs_r>:
 800a11a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11c:	4606      	mov	r6, r0
 800a11e:	460f      	mov	r7, r1
 800a120:	4614      	mov	r4, r2
 800a122:	18d5      	adds	r5, r2, r3
 800a124:	42ac      	cmp	r4, r5
 800a126:	d101      	bne.n	800a12c <__sfputs_r+0x12>
 800a128:	2000      	movs	r0, #0
 800a12a:	e007      	b.n	800a13c <__sfputs_r+0x22>
 800a12c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a130:	463a      	mov	r2, r7
 800a132:	4630      	mov	r0, r6
 800a134:	f7ff ffda 	bl	800a0ec <__sfputc_r>
 800a138:	1c43      	adds	r3, r0, #1
 800a13a:	d1f3      	bne.n	800a124 <__sfputs_r+0xa>
 800a13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a140 <_vfiprintf_r>:
 800a140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a144:	460d      	mov	r5, r1
 800a146:	b09d      	sub	sp, #116	; 0x74
 800a148:	4614      	mov	r4, r2
 800a14a:	4698      	mov	r8, r3
 800a14c:	4606      	mov	r6, r0
 800a14e:	b118      	cbz	r0, 800a158 <_vfiprintf_r+0x18>
 800a150:	6983      	ldr	r3, [r0, #24]
 800a152:	b90b      	cbnz	r3, 800a158 <_vfiprintf_r+0x18>
 800a154:	f7ff faa8 	bl	80096a8 <__sinit>
 800a158:	4b89      	ldr	r3, [pc, #548]	; (800a380 <_vfiprintf_r+0x240>)
 800a15a:	429d      	cmp	r5, r3
 800a15c:	d11b      	bne.n	800a196 <_vfiprintf_r+0x56>
 800a15e:	6875      	ldr	r5, [r6, #4]
 800a160:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a162:	07d9      	lsls	r1, r3, #31
 800a164:	d405      	bmi.n	800a172 <_vfiprintf_r+0x32>
 800a166:	89ab      	ldrh	r3, [r5, #12]
 800a168:	059a      	lsls	r2, r3, #22
 800a16a:	d402      	bmi.n	800a172 <_vfiprintf_r+0x32>
 800a16c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a16e:	f7ff fb5e 	bl	800982e <__retarget_lock_acquire_recursive>
 800a172:	89ab      	ldrh	r3, [r5, #12]
 800a174:	071b      	lsls	r3, r3, #28
 800a176:	d501      	bpl.n	800a17c <_vfiprintf_r+0x3c>
 800a178:	692b      	ldr	r3, [r5, #16]
 800a17a:	b9eb      	cbnz	r3, 800a1b8 <_vfiprintf_r+0x78>
 800a17c:	4629      	mov	r1, r5
 800a17e:	4630      	mov	r0, r6
 800a180:	f7ff fda4 	bl	8009ccc <__swsetup_r>
 800a184:	b1c0      	cbz	r0, 800a1b8 <_vfiprintf_r+0x78>
 800a186:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a188:	07dc      	lsls	r4, r3, #31
 800a18a:	d50e      	bpl.n	800a1aa <_vfiprintf_r+0x6a>
 800a18c:	f04f 30ff 	mov.w	r0, #4294967295
 800a190:	b01d      	add	sp, #116	; 0x74
 800a192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a196:	4b7b      	ldr	r3, [pc, #492]	; (800a384 <_vfiprintf_r+0x244>)
 800a198:	429d      	cmp	r5, r3
 800a19a:	d101      	bne.n	800a1a0 <_vfiprintf_r+0x60>
 800a19c:	68b5      	ldr	r5, [r6, #8]
 800a19e:	e7df      	b.n	800a160 <_vfiprintf_r+0x20>
 800a1a0:	4b79      	ldr	r3, [pc, #484]	; (800a388 <_vfiprintf_r+0x248>)
 800a1a2:	429d      	cmp	r5, r3
 800a1a4:	bf08      	it	eq
 800a1a6:	68f5      	ldreq	r5, [r6, #12]
 800a1a8:	e7da      	b.n	800a160 <_vfiprintf_r+0x20>
 800a1aa:	89ab      	ldrh	r3, [r5, #12]
 800a1ac:	0598      	lsls	r0, r3, #22
 800a1ae:	d4ed      	bmi.n	800a18c <_vfiprintf_r+0x4c>
 800a1b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1b2:	f7ff fb3d 	bl	8009830 <__retarget_lock_release_recursive>
 800a1b6:	e7e9      	b.n	800a18c <_vfiprintf_r+0x4c>
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a1bc:	2320      	movs	r3, #32
 800a1be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1c6:	2330      	movs	r3, #48	; 0x30
 800a1c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a38c <_vfiprintf_r+0x24c>
 800a1cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1d0:	f04f 0901 	mov.w	r9, #1
 800a1d4:	4623      	mov	r3, r4
 800a1d6:	469a      	mov	sl, r3
 800a1d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1dc:	b10a      	cbz	r2, 800a1e2 <_vfiprintf_r+0xa2>
 800a1de:	2a25      	cmp	r2, #37	; 0x25
 800a1e0:	d1f9      	bne.n	800a1d6 <_vfiprintf_r+0x96>
 800a1e2:	ebba 0b04 	subs.w	fp, sl, r4
 800a1e6:	d00b      	beq.n	800a200 <_vfiprintf_r+0xc0>
 800a1e8:	465b      	mov	r3, fp
 800a1ea:	4622      	mov	r2, r4
 800a1ec:	4629      	mov	r1, r5
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	f7ff ff93 	bl	800a11a <__sfputs_r>
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	f000 80aa 	beq.w	800a34e <_vfiprintf_r+0x20e>
 800a1fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1fc:	445a      	add	r2, fp
 800a1fe:	9209      	str	r2, [sp, #36]	; 0x24
 800a200:	f89a 3000 	ldrb.w	r3, [sl]
 800a204:	2b00      	cmp	r3, #0
 800a206:	f000 80a2 	beq.w	800a34e <_vfiprintf_r+0x20e>
 800a20a:	2300      	movs	r3, #0
 800a20c:	f04f 32ff 	mov.w	r2, #4294967295
 800a210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a214:	f10a 0a01 	add.w	sl, sl, #1
 800a218:	9304      	str	r3, [sp, #16]
 800a21a:	9307      	str	r3, [sp, #28]
 800a21c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a220:	931a      	str	r3, [sp, #104]	; 0x68
 800a222:	4654      	mov	r4, sl
 800a224:	2205      	movs	r2, #5
 800a226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a22a:	4858      	ldr	r0, [pc, #352]	; (800a38c <_vfiprintf_r+0x24c>)
 800a22c:	f7f5 fff0 	bl	8000210 <memchr>
 800a230:	9a04      	ldr	r2, [sp, #16]
 800a232:	b9d8      	cbnz	r0, 800a26c <_vfiprintf_r+0x12c>
 800a234:	06d1      	lsls	r1, r2, #27
 800a236:	bf44      	itt	mi
 800a238:	2320      	movmi	r3, #32
 800a23a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a23e:	0713      	lsls	r3, r2, #28
 800a240:	bf44      	itt	mi
 800a242:	232b      	movmi	r3, #43	; 0x2b
 800a244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a248:	f89a 3000 	ldrb.w	r3, [sl]
 800a24c:	2b2a      	cmp	r3, #42	; 0x2a
 800a24e:	d015      	beq.n	800a27c <_vfiprintf_r+0x13c>
 800a250:	9a07      	ldr	r2, [sp, #28]
 800a252:	4654      	mov	r4, sl
 800a254:	2000      	movs	r0, #0
 800a256:	f04f 0c0a 	mov.w	ip, #10
 800a25a:	4621      	mov	r1, r4
 800a25c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a260:	3b30      	subs	r3, #48	; 0x30
 800a262:	2b09      	cmp	r3, #9
 800a264:	d94e      	bls.n	800a304 <_vfiprintf_r+0x1c4>
 800a266:	b1b0      	cbz	r0, 800a296 <_vfiprintf_r+0x156>
 800a268:	9207      	str	r2, [sp, #28]
 800a26a:	e014      	b.n	800a296 <_vfiprintf_r+0x156>
 800a26c:	eba0 0308 	sub.w	r3, r0, r8
 800a270:	fa09 f303 	lsl.w	r3, r9, r3
 800a274:	4313      	orrs	r3, r2
 800a276:	9304      	str	r3, [sp, #16]
 800a278:	46a2      	mov	sl, r4
 800a27a:	e7d2      	b.n	800a222 <_vfiprintf_r+0xe2>
 800a27c:	9b03      	ldr	r3, [sp, #12]
 800a27e:	1d19      	adds	r1, r3, #4
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	9103      	str	r1, [sp, #12]
 800a284:	2b00      	cmp	r3, #0
 800a286:	bfbb      	ittet	lt
 800a288:	425b      	neglt	r3, r3
 800a28a:	f042 0202 	orrlt.w	r2, r2, #2
 800a28e:	9307      	strge	r3, [sp, #28]
 800a290:	9307      	strlt	r3, [sp, #28]
 800a292:	bfb8      	it	lt
 800a294:	9204      	strlt	r2, [sp, #16]
 800a296:	7823      	ldrb	r3, [r4, #0]
 800a298:	2b2e      	cmp	r3, #46	; 0x2e
 800a29a:	d10c      	bne.n	800a2b6 <_vfiprintf_r+0x176>
 800a29c:	7863      	ldrb	r3, [r4, #1]
 800a29e:	2b2a      	cmp	r3, #42	; 0x2a
 800a2a0:	d135      	bne.n	800a30e <_vfiprintf_r+0x1ce>
 800a2a2:	9b03      	ldr	r3, [sp, #12]
 800a2a4:	1d1a      	adds	r2, r3, #4
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	9203      	str	r2, [sp, #12]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	bfb8      	it	lt
 800a2ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2b2:	3402      	adds	r4, #2
 800a2b4:	9305      	str	r3, [sp, #20]
 800a2b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a39c <_vfiprintf_r+0x25c>
 800a2ba:	7821      	ldrb	r1, [r4, #0]
 800a2bc:	2203      	movs	r2, #3
 800a2be:	4650      	mov	r0, sl
 800a2c0:	f7f5 ffa6 	bl	8000210 <memchr>
 800a2c4:	b140      	cbz	r0, 800a2d8 <_vfiprintf_r+0x198>
 800a2c6:	2340      	movs	r3, #64	; 0x40
 800a2c8:	eba0 000a 	sub.w	r0, r0, sl
 800a2cc:	fa03 f000 	lsl.w	r0, r3, r0
 800a2d0:	9b04      	ldr	r3, [sp, #16]
 800a2d2:	4303      	orrs	r3, r0
 800a2d4:	3401      	adds	r4, #1
 800a2d6:	9304      	str	r3, [sp, #16]
 800a2d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2dc:	482c      	ldr	r0, [pc, #176]	; (800a390 <_vfiprintf_r+0x250>)
 800a2de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2e2:	2206      	movs	r2, #6
 800a2e4:	f7f5 ff94 	bl	8000210 <memchr>
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	d03f      	beq.n	800a36c <_vfiprintf_r+0x22c>
 800a2ec:	4b29      	ldr	r3, [pc, #164]	; (800a394 <_vfiprintf_r+0x254>)
 800a2ee:	bb1b      	cbnz	r3, 800a338 <_vfiprintf_r+0x1f8>
 800a2f0:	9b03      	ldr	r3, [sp, #12]
 800a2f2:	3307      	adds	r3, #7
 800a2f4:	f023 0307 	bic.w	r3, r3, #7
 800a2f8:	3308      	adds	r3, #8
 800a2fa:	9303      	str	r3, [sp, #12]
 800a2fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2fe:	443b      	add	r3, r7
 800a300:	9309      	str	r3, [sp, #36]	; 0x24
 800a302:	e767      	b.n	800a1d4 <_vfiprintf_r+0x94>
 800a304:	fb0c 3202 	mla	r2, ip, r2, r3
 800a308:	460c      	mov	r4, r1
 800a30a:	2001      	movs	r0, #1
 800a30c:	e7a5      	b.n	800a25a <_vfiprintf_r+0x11a>
 800a30e:	2300      	movs	r3, #0
 800a310:	3401      	adds	r4, #1
 800a312:	9305      	str	r3, [sp, #20]
 800a314:	4619      	mov	r1, r3
 800a316:	f04f 0c0a 	mov.w	ip, #10
 800a31a:	4620      	mov	r0, r4
 800a31c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a320:	3a30      	subs	r2, #48	; 0x30
 800a322:	2a09      	cmp	r2, #9
 800a324:	d903      	bls.n	800a32e <_vfiprintf_r+0x1ee>
 800a326:	2b00      	cmp	r3, #0
 800a328:	d0c5      	beq.n	800a2b6 <_vfiprintf_r+0x176>
 800a32a:	9105      	str	r1, [sp, #20]
 800a32c:	e7c3      	b.n	800a2b6 <_vfiprintf_r+0x176>
 800a32e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a332:	4604      	mov	r4, r0
 800a334:	2301      	movs	r3, #1
 800a336:	e7f0      	b.n	800a31a <_vfiprintf_r+0x1da>
 800a338:	ab03      	add	r3, sp, #12
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	462a      	mov	r2, r5
 800a33e:	4b16      	ldr	r3, [pc, #88]	; (800a398 <_vfiprintf_r+0x258>)
 800a340:	a904      	add	r1, sp, #16
 800a342:	4630      	mov	r0, r6
 800a344:	f3af 8000 	nop.w
 800a348:	4607      	mov	r7, r0
 800a34a:	1c78      	adds	r0, r7, #1
 800a34c:	d1d6      	bne.n	800a2fc <_vfiprintf_r+0x1bc>
 800a34e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a350:	07d9      	lsls	r1, r3, #31
 800a352:	d405      	bmi.n	800a360 <_vfiprintf_r+0x220>
 800a354:	89ab      	ldrh	r3, [r5, #12]
 800a356:	059a      	lsls	r2, r3, #22
 800a358:	d402      	bmi.n	800a360 <_vfiprintf_r+0x220>
 800a35a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a35c:	f7ff fa68 	bl	8009830 <__retarget_lock_release_recursive>
 800a360:	89ab      	ldrh	r3, [r5, #12]
 800a362:	065b      	lsls	r3, r3, #25
 800a364:	f53f af12 	bmi.w	800a18c <_vfiprintf_r+0x4c>
 800a368:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a36a:	e711      	b.n	800a190 <_vfiprintf_r+0x50>
 800a36c:	ab03      	add	r3, sp, #12
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	462a      	mov	r2, r5
 800a372:	4b09      	ldr	r3, [pc, #36]	; (800a398 <_vfiprintf_r+0x258>)
 800a374:	a904      	add	r1, sp, #16
 800a376:	4630      	mov	r0, r6
 800a378:	f000 f880 	bl	800a47c <_printf_i>
 800a37c:	e7e4      	b.n	800a348 <_vfiprintf_r+0x208>
 800a37e:	bf00      	nop
 800a380:	0800b870 	.word	0x0800b870
 800a384:	0800b890 	.word	0x0800b890
 800a388:	0800b850 	.word	0x0800b850
 800a38c:	0800b8b4 	.word	0x0800b8b4
 800a390:	0800b8be 	.word	0x0800b8be
 800a394:	00000000 	.word	0x00000000
 800a398:	0800a11b 	.word	0x0800a11b
 800a39c:	0800b8ba 	.word	0x0800b8ba

0800a3a0 <_printf_common>:
 800a3a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a4:	4616      	mov	r6, r2
 800a3a6:	4699      	mov	r9, r3
 800a3a8:	688a      	ldr	r2, [r1, #8]
 800a3aa:	690b      	ldr	r3, [r1, #16]
 800a3ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	bfb8      	it	lt
 800a3b4:	4613      	movlt	r3, r2
 800a3b6:	6033      	str	r3, [r6, #0]
 800a3b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a3bc:	4607      	mov	r7, r0
 800a3be:	460c      	mov	r4, r1
 800a3c0:	b10a      	cbz	r2, 800a3c6 <_printf_common+0x26>
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	6033      	str	r3, [r6, #0]
 800a3c6:	6823      	ldr	r3, [r4, #0]
 800a3c8:	0699      	lsls	r1, r3, #26
 800a3ca:	bf42      	ittt	mi
 800a3cc:	6833      	ldrmi	r3, [r6, #0]
 800a3ce:	3302      	addmi	r3, #2
 800a3d0:	6033      	strmi	r3, [r6, #0]
 800a3d2:	6825      	ldr	r5, [r4, #0]
 800a3d4:	f015 0506 	ands.w	r5, r5, #6
 800a3d8:	d106      	bne.n	800a3e8 <_printf_common+0x48>
 800a3da:	f104 0a19 	add.w	sl, r4, #25
 800a3de:	68e3      	ldr	r3, [r4, #12]
 800a3e0:	6832      	ldr	r2, [r6, #0]
 800a3e2:	1a9b      	subs	r3, r3, r2
 800a3e4:	42ab      	cmp	r3, r5
 800a3e6:	dc26      	bgt.n	800a436 <_printf_common+0x96>
 800a3e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a3ec:	1e13      	subs	r3, r2, #0
 800a3ee:	6822      	ldr	r2, [r4, #0]
 800a3f0:	bf18      	it	ne
 800a3f2:	2301      	movne	r3, #1
 800a3f4:	0692      	lsls	r2, r2, #26
 800a3f6:	d42b      	bmi.n	800a450 <_printf_common+0xb0>
 800a3f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3fc:	4649      	mov	r1, r9
 800a3fe:	4638      	mov	r0, r7
 800a400:	47c0      	blx	r8
 800a402:	3001      	adds	r0, #1
 800a404:	d01e      	beq.n	800a444 <_printf_common+0xa4>
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	68e5      	ldr	r5, [r4, #12]
 800a40a:	6832      	ldr	r2, [r6, #0]
 800a40c:	f003 0306 	and.w	r3, r3, #6
 800a410:	2b04      	cmp	r3, #4
 800a412:	bf08      	it	eq
 800a414:	1aad      	subeq	r5, r5, r2
 800a416:	68a3      	ldr	r3, [r4, #8]
 800a418:	6922      	ldr	r2, [r4, #16]
 800a41a:	bf0c      	ite	eq
 800a41c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a420:	2500      	movne	r5, #0
 800a422:	4293      	cmp	r3, r2
 800a424:	bfc4      	itt	gt
 800a426:	1a9b      	subgt	r3, r3, r2
 800a428:	18ed      	addgt	r5, r5, r3
 800a42a:	2600      	movs	r6, #0
 800a42c:	341a      	adds	r4, #26
 800a42e:	42b5      	cmp	r5, r6
 800a430:	d11a      	bne.n	800a468 <_printf_common+0xc8>
 800a432:	2000      	movs	r0, #0
 800a434:	e008      	b.n	800a448 <_printf_common+0xa8>
 800a436:	2301      	movs	r3, #1
 800a438:	4652      	mov	r2, sl
 800a43a:	4649      	mov	r1, r9
 800a43c:	4638      	mov	r0, r7
 800a43e:	47c0      	blx	r8
 800a440:	3001      	adds	r0, #1
 800a442:	d103      	bne.n	800a44c <_printf_common+0xac>
 800a444:	f04f 30ff 	mov.w	r0, #4294967295
 800a448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a44c:	3501      	adds	r5, #1
 800a44e:	e7c6      	b.n	800a3de <_printf_common+0x3e>
 800a450:	18e1      	adds	r1, r4, r3
 800a452:	1c5a      	adds	r2, r3, #1
 800a454:	2030      	movs	r0, #48	; 0x30
 800a456:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a45a:	4422      	add	r2, r4
 800a45c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a460:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a464:	3302      	adds	r3, #2
 800a466:	e7c7      	b.n	800a3f8 <_printf_common+0x58>
 800a468:	2301      	movs	r3, #1
 800a46a:	4622      	mov	r2, r4
 800a46c:	4649      	mov	r1, r9
 800a46e:	4638      	mov	r0, r7
 800a470:	47c0      	blx	r8
 800a472:	3001      	adds	r0, #1
 800a474:	d0e6      	beq.n	800a444 <_printf_common+0xa4>
 800a476:	3601      	adds	r6, #1
 800a478:	e7d9      	b.n	800a42e <_printf_common+0x8e>
	...

0800a47c <_printf_i>:
 800a47c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a480:	7e0f      	ldrb	r7, [r1, #24]
 800a482:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a484:	2f78      	cmp	r7, #120	; 0x78
 800a486:	4691      	mov	r9, r2
 800a488:	4680      	mov	r8, r0
 800a48a:	460c      	mov	r4, r1
 800a48c:	469a      	mov	sl, r3
 800a48e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a492:	d807      	bhi.n	800a4a4 <_printf_i+0x28>
 800a494:	2f62      	cmp	r7, #98	; 0x62
 800a496:	d80a      	bhi.n	800a4ae <_printf_i+0x32>
 800a498:	2f00      	cmp	r7, #0
 800a49a:	f000 80d8 	beq.w	800a64e <_printf_i+0x1d2>
 800a49e:	2f58      	cmp	r7, #88	; 0x58
 800a4a0:	f000 80a3 	beq.w	800a5ea <_printf_i+0x16e>
 800a4a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a4ac:	e03a      	b.n	800a524 <_printf_i+0xa8>
 800a4ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a4b2:	2b15      	cmp	r3, #21
 800a4b4:	d8f6      	bhi.n	800a4a4 <_printf_i+0x28>
 800a4b6:	a101      	add	r1, pc, #4	; (adr r1, 800a4bc <_printf_i+0x40>)
 800a4b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4bc:	0800a515 	.word	0x0800a515
 800a4c0:	0800a529 	.word	0x0800a529
 800a4c4:	0800a4a5 	.word	0x0800a4a5
 800a4c8:	0800a4a5 	.word	0x0800a4a5
 800a4cc:	0800a4a5 	.word	0x0800a4a5
 800a4d0:	0800a4a5 	.word	0x0800a4a5
 800a4d4:	0800a529 	.word	0x0800a529
 800a4d8:	0800a4a5 	.word	0x0800a4a5
 800a4dc:	0800a4a5 	.word	0x0800a4a5
 800a4e0:	0800a4a5 	.word	0x0800a4a5
 800a4e4:	0800a4a5 	.word	0x0800a4a5
 800a4e8:	0800a635 	.word	0x0800a635
 800a4ec:	0800a559 	.word	0x0800a559
 800a4f0:	0800a617 	.word	0x0800a617
 800a4f4:	0800a4a5 	.word	0x0800a4a5
 800a4f8:	0800a4a5 	.word	0x0800a4a5
 800a4fc:	0800a657 	.word	0x0800a657
 800a500:	0800a4a5 	.word	0x0800a4a5
 800a504:	0800a559 	.word	0x0800a559
 800a508:	0800a4a5 	.word	0x0800a4a5
 800a50c:	0800a4a5 	.word	0x0800a4a5
 800a510:	0800a61f 	.word	0x0800a61f
 800a514:	682b      	ldr	r3, [r5, #0]
 800a516:	1d1a      	adds	r2, r3, #4
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	602a      	str	r2, [r5, #0]
 800a51c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a520:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a524:	2301      	movs	r3, #1
 800a526:	e0a3      	b.n	800a670 <_printf_i+0x1f4>
 800a528:	6820      	ldr	r0, [r4, #0]
 800a52a:	6829      	ldr	r1, [r5, #0]
 800a52c:	0606      	lsls	r6, r0, #24
 800a52e:	f101 0304 	add.w	r3, r1, #4
 800a532:	d50a      	bpl.n	800a54a <_printf_i+0xce>
 800a534:	680e      	ldr	r6, [r1, #0]
 800a536:	602b      	str	r3, [r5, #0]
 800a538:	2e00      	cmp	r6, #0
 800a53a:	da03      	bge.n	800a544 <_printf_i+0xc8>
 800a53c:	232d      	movs	r3, #45	; 0x2d
 800a53e:	4276      	negs	r6, r6
 800a540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a544:	485e      	ldr	r0, [pc, #376]	; (800a6c0 <_printf_i+0x244>)
 800a546:	230a      	movs	r3, #10
 800a548:	e019      	b.n	800a57e <_printf_i+0x102>
 800a54a:	680e      	ldr	r6, [r1, #0]
 800a54c:	602b      	str	r3, [r5, #0]
 800a54e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a552:	bf18      	it	ne
 800a554:	b236      	sxthne	r6, r6
 800a556:	e7ef      	b.n	800a538 <_printf_i+0xbc>
 800a558:	682b      	ldr	r3, [r5, #0]
 800a55a:	6820      	ldr	r0, [r4, #0]
 800a55c:	1d19      	adds	r1, r3, #4
 800a55e:	6029      	str	r1, [r5, #0]
 800a560:	0601      	lsls	r1, r0, #24
 800a562:	d501      	bpl.n	800a568 <_printf_i+0xec>
 800a564:	681e      	ldr	r6, [r3, #0]
 800a566:	e002      	b.n	800a56e <_printf_i+0xf2>
 800a568:	0646      	lsls	r6, r0, #25
 800a56a:	d5fb      	bpl.n	800a564 <_printf_i+0xe8>
 800a56c:	881e      	ldrh	r6, [r3, #0]
 800a56e:	4854      	ldr	r0, [pc, #336]	; (800a6c0 <_printf_i+0x244>)
 800a570:	2f6f      	cmp	r7, #111	; 0x6f
 800a572:	bf0c      	ite	eq
 800a574:	2308      	moveq	r3, #8
 800a576:	230a      	movne	r3, #10
 800a578:	2100      	movs	r1, #0
 800a57a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a57e:	6865      	ldr	r5, [r4, #4]
 800a580:	60a5      	str	r5, [r4, #8]
 800a582:	2d00      	cmp	r5, #0
 800a584:	bfa2      	ittt	ge
 800a586:	6821      	ldrge	r1, [r4, #0]
 800a588:	f021 0104 	bicge.w	r1, r1, #4
 800a58c:	6021      	strge	r1, [r4, #0]
 800a58e:	b90e      	cbnz	r6, 800a594 <_printf_i+0x118>
 800a590:	2d00      	cmp	r5, #0
 800a592:	d04d      	beq.n	800a630 <_printf_i+0x1b4>
 800a594:	4615      	mov	r5, r2
 800a596:	fbb6 f1f3 	udiv	r1, r6, r3
 800a59a:	fb03 6711 	mls	r7, r3, r1, r6
 800a59e:	5dc7      	ldrb	r7, [r0, r7]
 800a5a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a5a4:	4637      	mov	r7, r6
 800a5a6:	42bb      	cmp	r3, r7
 800a5a8:	460e      	mov	r6, r1
 800a5aa:	d9f4      	bls.n	800a596 <_printf_i+0x11a>
 800a5ac:	2b08      	cmp	r3, #8
 800a5ae:	d10b      	bne.n	800a5c8 <_printf_i+0x14c>
 800a5b0:	6823      	ldr	r3, [r4, #0]
 800a5b2:	07de      	lsls	r6, r3, #31
 800a5b4:	d508      	bpl.n	800a5c8 <_printf_i+0x14c>
 800a5b6:	6923      	ldr	r3, [r4, #16]
 800a5b8:	6861      	ldr	r1, [r4, #4]
 800a5ba:	4299      	cmp	r1, r3
 800a5bc:	bfde      	ittt	le
 800a5be:	2330      	movle	r3, #48	; 0x30
 800a5c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a5c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a5c8:	1b52      	subs	r2, r2, r5
 800a5ca:	6122      	str	r2, [r4, #16]
 800a5cc:	f8cd a000 	str.w	sl, [sp]
 800a5d0:	464b      	mov	r3, r9
 800a5d2:	aa03      	add	r2, sp, #12
 800a5d4:	4621      	mov	r1, r4
 800a5d6:	4640      	mov	r0, r8
 800a5d8:	f7ff fee2 	bl	800a3a0 <_printf_common>
 800a5dc:	3001      	adds	r0, #1
 800a5de:	d14c      	bne.n	800a67a <_printf_i+0x1fe>
 800a5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e4:	b004      	add	sp, #16
 800a5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ea:	4835      	ldr	r0, [pc, #212]	; (800a6c0 <_printf_i+0x244>)
 800a5ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a5f0:	6829      	ldr	r1, [r5, #0]
 800a5f2:	6823      	ldr	r3, [r4, #0]
 800a5f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a5f8:	6029      	str	r1, [r5, #0]
 800a5fa:	061d      	lsls	r5, r3, #24
 800a5fc:	d514      	bpl.n	800a628 <_printf_i+0x1ac>
 800a5fe:	07df      	lsls	r7, r3, #31
 800a600:	bf44      	itt	mi
 800a602:	f043 0320 	orrmi.w	r3, r3, #32
 800a606:	6023      	strmi	r3, [r4, #0]
 800a608:	b91e      	cbnz	r6, 800a612 <_printf_i+0x196>
 800a60a:	6823      	ldr	r3, [r4, #0]
 800a60c:	f023 0320 	bic.w	r3, r3, #32
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	2310      	movs	r3, #16
 800a614:	e7b0      	b.n	800a578 <_printf_i+0xfc>
 800a616:	6823      	ldr	r3, [r4, #0]
 800a618:	f043 0320 	orr.w	r3, r3, #32
 800a61c:	6023      	str	r3, [r4, #0]
 800a61e:	2378      	movs	r3, #120	; 0x78
 800a620:	4828      	ldr	r0, [pc, #160]	; (800a6c4 <_printf_i+0x248>)
 800a622:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a626:	e7e3      	b.n	800a5f0 <_printf_i+0x174>
 800a628:	0659      	lsls	r1, r3, #25
 800a62a:	bf48      	it	mi
 800a62c:	b2b6      	uxthmi	r6, r6
 800a62e:	e7e6      	b.n	800a5fe <_printf_i+0x182>
 800a630:	4615      	mov	r5, r2
 800a632:	e7bb      	b.n	800a5ac <_printf_i+0x130>
 800a634:	682b      	ldr	r3, [r5, #0]
 800a636:	6826      	ldr	r6, [r4, #0]
 800a638:	6961      	ldr	r1, [r4, #20]
 800a63a:	1d18      	adds	r0, r3, #4
 800a63c:	6028      	str	r0, [r5, #0]
 800a63e:	0635      	lsls	r5, r6, #24
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	d501      	bpl.n	800a648 <_printf_i+0x1cc>
 800a644:	6019      	str	r1, [r3, #0]
 800a646:	e002      	b.n	800a64e <_printf_i+0x1d2>
 800a648:	0670      	lsls	r0, r6, #25
 800a64a:	d5fb      	bpl.n	800a644 <_printf_i+0x1c8>
 800a64c:	8019      	strh	r1, [r3, #0]
 800a64e:	2300      	movs	r3, #0
 800a650:	6123      	str	r3, [r4, #16]
 800a652:	4615      	mov	r5, r2
 800a654:	e7ba      	b.n	800a5cc <_printf_i+0x150>
 800a656:	682b      	ldr	r3, [r5, #0]
 800a658:	1d1a      	adds	r2, r3, #4
 800a65a:	602a      	str	r2, [r5, #0]
 800a65c:	681d      	ldr	r5, [r3, #0]
 800a65e:	6862      	ldr	r2, [r4, #4]
 800a660:	2100      	movs	r1, #0
 800a662:	4628      	mov	r0, r5
 800a664:	f7f5 fdd4 	bl	8000210 <memchr>
 800a668:	b108      	cbz	r0, 800a66e <_printf_i+0x1f2>
 800a66a:	1b40      	subs	r0, r0, r5
 800a66c:	6060      	str	r0, [r4, #4]
 800a66e:	6863      	ldr	r3, [r4, #4]
 800a670:	6123      	str	r3, [r4, #16]
 800a672:	2300      	movs	r3, #0
 800a674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a678:	e7a8      	b.n	800a5cc <_printf_i+0x150>
 800a67a:	6923      	ldr	r3, [r4, #16]
 800a67c:	462a      	mov	r2, r5
 800a67e:	4649      	mov	r1, r9
 800a680:	4640      	mov	r0, r8
 800a682:	47d0      	blx	sl
 800a684:	3001      	adds	r0, #1
 800a686:	d0ab      	beq.n	800a5e0 <_printf_i+0x164>
 800a688:	6823      	ldr	r3, [r4, #0]
 800a68a:	079b      	lsls	r3, r3, #30
 800a68c:	d413      	bmi.n	800a6b6 <_printf_i+0x23a>
 800a68e:	68e0      	ldr	r0, [r4, #12]
 800a690:	9b03      	ldr	r3, [sp, #12]
 800a692:	4298      	cmp	r0, r3
 800a694:	bfb8      	it	lt
 800a696:	4618      	movlt	r0, r3
 800a698:	e7a4      	b.n	800a5e4 <_printf_i+0x168>
 800a69a:	2301      	movs	r3, #1
 800a69c:	4632      	mov	r2, r6
 800a69e:	4649      	mov	r1, r9
 800a6a0:	4640      	mov	r0, r8
 800a6a2:	47d0      	blx	sl
 800a6a4:	3001      	adds	r0, #1
 800a6a6:	d09b      	beq.n	800a5e0 <_printf_i+0x164>
 800a6a8:	3501      	adds	r5, #1
 800a6aa:	68e3      	ldr	r3, [r4, #12]
 800a6ac:	9903      	ldr	r1, [sp, #12]
 800a6ae:	1a5b      	subs	r3, r3, r1
 800a6b0:	42ab      	cmp	r3, r5
 800a6b2:	dcf2      	bgt.n	800a69a <_printf_i+0x21e>
 800a6b4:	e7eb      	b.n	800a68e <_printf_i+0x212>
 800a6b6:	2500      	movs	r5, #0
 800a6b8:	f104 0619 	add.w	r6, r4, #25
 800a6bc:	e7f5      	b.n	800a6aa <_printf_i+0x22e>
 800a6be:	bf00      	nop
 800a6c0:	0800b8c5 	.word	0x0800b8c5
 800a6c4:	0800b8d6 	.word	0x0800b8d6

0800a6c8 <_read_r>:
 800a6c8:	b538      	push	{r3, r4, r5, lr}
 800a6ca:	4d07      	ldr	r5, [pc, #28]	; (800a6e8 <_read_r+0x20>)
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	4608      	mov	r0, r1
 800a6d0:	4611      	mov	r1, r2
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	602a      	str	r2, [r5, #0]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	f7f8 f90a 	bl	80028f0 <_read>
 800a6dc:	1c43      	adds	r3, r0, #1
 800a6de:	d102      	bne.n	800a6e6 <_read_r+0x1e>
 800a6e0:	682b      	ldr	r3, [r5, #0]
 800a6e2:	b103      	cbz	r3, 800a6e6 <_read_r+0x1e>
 800a6e4:	6023      	str	r3, [r4, #0]
 800a6e6:	bd38      	pop	{r3, r4, r5, pc}
 800a6e8:	2000b9a8 	.word	0x2000b9a8

0800a6ec <_fstat_r>:
 800a6ec:	b538      	push	{r3, r4, r5, lr}
 800a6ee:	4d07      	ldr	r5, [pc, #28]	; (800a70c <_fstat_r+0x20>)
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	4608      	mov	r0, r1
 800a6f6:	4611      	mov	r1, r2
 800a6f8:	602b      	str	r3, [r5, #0]
 800a6fa:	f7f8 f93e 	bl	800297a <_fstat>
 800a6fe:	1c43      	adds	r3, r0, #1
 800a700:	d102      	bne.n	800a708 <_fstat_r+0x1c>
 800a702:	682b      	ldr	r3, [r5, #0]
 800a704:	b103      	cbz	r3, 800a708 <_fstat_r+0x1c>
 800a706:	6023      	str	r3, [r4, #0]
 800a708:	bd38      	pop	{r3, r4, r5, pc}
 800a70a:	bf00      	nop
 800a70c:	2000b9a8 	.word	0x2000b9a8

0800a710 <_isatty_r>:
 800a710:	b538      	push	{r3, r4, r5, lr}
 800a712:	4d06      	ldr	r5, [pc, #24]	; (800a72c <_isatty_r+0x1c>)
 800a714:	2300      	movs	r3, #0
 800a716:	4604      	mov	r4, r0
 800a718:	4608      	mov	r0, r1
 800a71a:	602b      	str	r3, [r5, #0]
 800a71c:	f7f8 f93d 	bl	800299a <_isatty>
 800a720:	1c43      	adds	r3, r0, #1
 800a722:	d102      	bne.n	800a72a <_isatty_r+0x1a>
 800a724:	682b      	ldr	r3, [r5, #0]
 800a726:	b103      	cbz	r3, 800a72a <_isatty_r+0x1a>
 800a728:	6023      	str	r3, [r4, #0]
 800a72a:	bd38      	pop	{r3, r4, r5, pc}
 800a72c:	2000b9a8 	.word	0x2000b9a8

0800a730 <pow>:
 800a730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a732:	ed2d 8b02 	vpush	{d8}
 800a736:	eeb0 8a40 	vmov.f32	s16, s0
 800a73a:	eef0 8a60 	vmov.f32	s17, s1
 800a73e:	ec55 4b11 	vmov	r4, r5, d1
 800a742:	f000 f891 	bl	800a868 <__ieee754_pow>
 800a746:	4622      	mov	r2, r4
 800a748:	462b      	mov	r3, r5
 800a74a:	4620      	mov	r0, r4
 800a74c:	4629      	mov	r1, r5
 800a74e:	ec57 6b10 	vmov	r6, r7, d0
 800a752:	f7f6 fa03 	bl	8000b5c <__aeabi_dcmpun>
 800a756:	2800      	cmp	r0, #0
 800a758:	d13b      	bne.n	800a7d2 <pow+0xa2>
 800a75a:	ec51 0b18 	vmov	r0, r1, d8
 800a75e:	2200      	movs	r2, #0
 800a760:	2300      	movs	r3, #0
 800a762:	f7f6 f9c9 	bl	8000af8 <__aeabi_dcmpeq>
 800a766:	b1b8      	cbz	r0, 800a798 <pow+0x68>
 800a768:	2200      	movs	r2, #0
 800a76a:	2300      	movs	r3, #0
 800a76c:	4620      	mov	r0, r4
 800a76e:	4629      	mov	r1, r5
 800a770:	f7f6 f9c2 	bl	8000af8 <__aeabi_dcmpeq>
 800a774:	2800      	cmp	r0, #0
 800a776:	d146      	bne.n	800a806 <pow+0xd6>
 800a778:	ec45 4b10 	vmov	d0, r4, r5
 800a77c:	f000 fe8d 	bl	800b49a <finite>
 800a780:	b338      	cbz	r0, 800a7d2 <pow+0xa2>
 800a782:	2200      	movs	r2, #0
 800a784:	2300      	movs	r3, #0
 800a786:	4620      	mov	r0, r4
 800a788:	4629      	mov	r1, r5
 800a78a:	f7f6 f9bf 	bl	8000b0c <__aeabi_dcmplt>
 800a78e:	b300      	cbz	r0, 800a7d2 <pow+0xa2>
 800a790:	f7fe ff2c 	bl	80095ec <__errno>
 800a794:	2322      	movs	r3, #34	; 0x22
 800a796:	e01b      	b.n	800a7d0 <pow+0xa0>
 800a798:	ec47 6b10 	vmov	d0, r6, r7
 800a79c:	f000 fe7d 	bl	800b49a <finite>
 800a7a0:	b9e0      	cbnz	r0, 800a7dc <pow+0xac>
 800a7a2:	eeb0 0a48 	vmov.f32	s0, s16
 800a7a6:	eef0 0a68 	vmov.f32	s1, s17
 800a7aa:	f000 fe76 	bl	800b49a <finite>
 800a7ae:	b1a8      	cbz	r0, 800a7dc <pow+0xac>
 800a7b0:	ec45 4b10 	vmov	d0, r4, r5
 800a7b4:	f000 fe71 	bl	800b49a <finite>
 800a7b8:	b180      	cbz	r0, 800a7dc <pow+0xac>
 800a7ba:	4632      	mov	r2, r6
 800a7bc:	463b      	mov	r3, r7
 800a7be:	4630      	mov	r0, r6
 800a7c0:	4639      	mov	r1, r7
 800a7c2:	f7f6 f9cb 	bl	8000b5c <__aeabi_dcmpun>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d0e2      	beq.n	800a790 <pow+0x60>
 800a7ca:	f7fe ff0f 	bl	80095ec <__errno>
 800a7ce:	2321      	movs	r3, #33	; 0x21
 800a7d0:	6003      	str	r3, [r0, #0]
 800a7d2:	ecbd 8b02 	vpop	{d8}
 800a7d6:	ec47 6b10 	vmov	d0, r6, r7
 800a7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7dc:	2200      	movs	r2, #0
 800a7de:	2300      	movs	r3, #0
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	4639      	mov	r1, r7
 800a7e4:	f7f6 f988 	bl	8000af8 <__aeabi_dcmpeq>
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	d0f2      	beq.n	800a7d2 <pow+0xa2>
 800a7ec:	eeb0 0a48 	vmov.f32	s0, s16
 800a7f0:	eef0 0a68 	vmov.f32	s1, s17
 800a7f4:	f000 fe51 	bl	800b49a <finite>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	d0ea      	beq.n	800a7d2 <pow+0xa2>
 800a7fc:	ec45 4b10 	vmov	d0, r4, r5
 800a800:	f000 fe4b 	bl	800b49a <finite>
 800a804:	e7c3      	b.n	800a78e <pow+0x5e>
 800a806:	4f01      	ldr	r7, [pc, #4]	; (800a80c <pow+0xdc>)
 800a808:	2600      	movs	r6, #0
 800a80a:	e7e2      	b.n	800a7d2 <pow+0xa2>
 800a80c:	3ff00000 	.word	0x3ff00000

0800a810 <sqrt>:
 800a810:	b538      	push	{r3, r4, r5, lr}
 800a812:	ed2d 8b02 	vpush	{d8}
 800a816:	ec55 4b10 	vmov	r4, r5, d0
 800a81a:	f000 fd53 	bl	800b2c4 <__ieee754_sqrt>
 800a81e:	4622      	mov	r2, r4
 800a820:	462b      	mov	r3, r5
 800a822:	4620      	mov	r0, r4
 800a824:	4629      	mov	r1, r5
 800a826:	eeb0 8a40 	vmov.f32	s16, s0
 800a82a:	eef0 8a60 	vmov.f32	s17, s1
 800a82e:	f7f6 f995 	bl	8000b5c <__aeabi_dcmpun>
 800a832:	b990      	cbnz	r0, 800a85a <sqrt+0x4a>
 800a834:	2200      	movs	r2, #0
 800a836:	2300      	movs	r3, #0
 800a838:	4620      	mov	r0, r4
 800a83a:	4629      	mov	r1, r5
 800a83c:	f7f6 f966 	bl	8000b0c <__aeabi_dcmplt>
 800a840:	b158      	cbz	r0, 800a85a <sqrt+0x4a>
 800a842:	f7fe fed3 	bl	80095ec <__errno>
 800a846:	2321      	movs	r3, #33	; 0x21
 800a848:	6003      	str	r3, [r0, #0]
 800a84a:	2200      	movs	r2, #0
 800a84c:	2300      	movs	r3, #0
 800a84e:	4610      	mov	r0, r2
 800a850:	4619      	mov	r1, r3
 800a852:	f7f6 f813 	bl	800087c <__aeabi_ddiv>
 800a856:	ec41 0b18 	vmov	d8, r0, r1
 800a85a:	eeb0 0a48 	vmov.f32	s0, s16
 800a85e:	eef0 0a68 	vmov.f32	s1, s17
 800a862:	ecbd 8b02 	vpop	{d8}
 800a866:	bd38      	pop	{r3, r4, r5, pc}

0800a868 <__ieee754_pow>:
 800a868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a86c:	ed2d 8b06 	vpush	{d8-d10}
 800a870:	b089      	sub	sp, #36	; 0x24
 800a872:	ed8d 1b00 	vstr	d1, [sp]
 800a876:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a87a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a87e:	ea58 0102 	orrs.w	r1, r8, r2
 800a882:	ec57 6b10 	vmov	r6, r7, d0
 800a886:	d115      	bne.n	800a8b4 <__ieee754_pow+0x4c>
 800a888:	19b3      	adds	r3, r6, r6
 800a88a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a88e:	4152      	adcs	r2, r2
 800a890:	4299      	cmp	r1, r3
 800a892:	4b89      	ldr	r3, [pc, #548]	; (800aab8 <__ieee754_pow+0x250>)
 800a894:	4193      	sbcs	r3, r2
 800a896:	f080 84d2 	bcs.w	800b23e <__ieee754_pow+0x9d6>
 800a89a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a89e:	4630      	mov	r0, r6
 800a8a0:	4639      	mov	r1, r7
 800a8a2:	f7f5 fd0b 	bl	80002bc <__adddf3>
 800a8a6:	ec41 0b10 	vmov	d0, r0, r1
 800a8aa:	b009      	add	sp, #36	; 0x24
 800a8ac:	ecbd 8b06 	vpop	{d8-d10}
 800a8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b4:	4b81      	ldr	r3, [pc, #516]	; (800aabc <__ieee754_pow+0x254>)
 800a8b6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a8ba:	429c      	cmp	r4, r3
 800a8bc:	ee10 aa10 	vmov	sl, s0
 800a8c0:	463d      	mov	r5, r7
 800a8c2:	dc06      	bgt.n	800a8d2 <__ieee754_pow+0x6a>
 800a8c4:	d101      	bne.n	800a8ca <__ieee754_pow+0x62>
 800a8c6:	2e00      	cmp	r6, #0
 800a8c8:	d1e7      	bne.n	800a89a <__ieee754_pow+0x32>
 800a8ca:	4598      	cmp	r8, r3
 800a8cc:	dc01      	bgt.n	800a8d2 <__ieee754_pow+0x6a>
 800a8ce:	d10f      	bne.n	800a8f0 <__ieee754_pow+0x88>
 800a8d0:	b172      	cbz	r2, 800a8f0 <__ieee754_pow+0x88>
 800a8d2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a8d6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a8da:	ea55 050a 	orrs.w	r5, r5, sl
 800a8de:	d1dc      	bne.n	800a89a <__ieee754_pow+0x32>
 800a8e0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a8e4:	18db      	adds	r3, r3, r3
 800a8e6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a8ea:	4152      	adcs	r2, r2
 800a8ec:	429d      	cmp	r5, r3
 800a8ee:	e7d0      	b.n	800a892 <__ieee754_pow+0x2a>
 800a8f0:	2d00      	cmp	r5, #0
 800a8f2:	da3b      	bge.n	800a96c <__ieee754_pow+0x104>
 800a8f4:	4b72      	ldr	r3, [pc, #456]	; (800aac0 <__ieee754_pow+0x258>)
 800a8f6:	4598      	cmp	r8, r3
 800a8f8:	dc51      	bgt.n	800a99e <__ieee754_pow+0x136>
 800a8fa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a8fe:	4598      	cmp	r8, r3
 800a900:	f340 84ac 	ble.w	800b25c <__ieee754_pow+0x9f4>
 800a904:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a908:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a90c:	2b14      	cmp	r3, #20
 800a90e:	dd0f      	ble.n	800a930 <__ieee754_pow+0xc8>
 800a910:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a914:	fa22 f103 	lsr.w	r1, r2, r3
 800a918:	fa01 f303 	lsl.w	r3, r1, r3
 800a91c:	4293      	cmp	r3, r2
 800a91e:	f040 849d 	bne.w	800b25c <__ieee754_pow+0x9f4>
 800a922:	f001 0101 	and.w	r1, r1, #1
 800a926:	f1c1 0302 	rsb	r3, r1, #2
 800a92a:	9304      	str	r3, [sp, #16]
 800a92c:	b182      	cbz	r2, 800a950 <__ieee754_pow+0xe8>
 800a92e:	e05f      	b.n	800a9f0 <__ieee754_pow+0x188>
 800a930:	2a00      	cmp	r2, #0
 800a932:	d15b      	bne.n	800a9ec <__ieee754_pow+0x184>
 800a934:	f1c3 0314 	rsb	r3, r3, #20
 800a938:	fa48 f103 	asr.w	r1, r8, r3
 800a93c:	fa01 f303 	lsl.w	r3, r1, r3
 800a940:	4543      	cmp	r3, r8
 800a942:	f040 8488 	bne.w	800b256 <__ieee754_pow+0x9ee>
 800a946:	f001 0101 	and.w	r1, r1, #1
 800a94a:	f1c1 0302 	rsb	r3, r1, #2
 800a94e:	9304      	str	r3, [sp, #16]
 800a950:	4b5c      	ldr	r3, [pc, #368]	; (800aac4 <__ieee754_pow+0x25c>)
 800a952:	4598      	cmp	r8, r3
 800a954:	d132      	bne.n	800a9bc <__ieee754_pow+0x154>
 800a956:	f1b9 0f00 	cmp.w	r9, #0
 800a95a:	f280 8478 	bge.w	800b24e <__ieee754_pow+0x9e6>
 800a95e:	4959      	ldr	r1, [pc, #356]	; (800aac4 <__ieee754_pow+0x25c>)
 800a960:	4632      	mov	r2, r6
 800a962:	463b      	mov	r3, r7
 800a964:	2000      	movs	r0, #0
 800a966:	f7f5 ff89 	bl	800087c <__aeabi_ddiv>
 800a96a:	e79c      	b.n	800a8a6 <__ieee754_pow+0x3e>
 800a96c:	2300      	movs	r3, #0
 800a96e:	9304      	str	r3, [sp, #16]
 800a970:	2a00      	cmp	r2, #0
 800a972:	d13d      	bne.n	800a9f0 <__ieee754_pow+0x188>
 800a974:	4b51      	ldr	r3, [pc, #324]	; (800aabc <__ieee754_pow+0x254>)
 800a976:	4598      	cmp	r8, r3
 800a978:	d1ea      	bne.n	800a950 <__ieee754_pow+0xe8>
 800a97a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a97e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a982:	ea53 030a 	orrs.w	r3, r3, sl
 800a986:	f000 845a 	beq.w	800b23e <__ieee754_pow+0x9d6>
 800a98a:	4b4f      	ldr	r3, [pc, #316]	; (800aac8 <__ieee754_pow+0x260>)
 800a98c:	429c      	cmp	r4, r3
 800a98e:	dd08      	ble.n	800a9a2 <__ieee754_pow+0x13a>
 800a990:	f1b9 0f00 	cmp.w	r9, #0
 800a994:	f2c0 8457 	blt.w	800b246 <__ieee754_pow+0x9de>
 800a998:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a99c:	e783      	b.n	800a8a6 <__ieee754_pow+0x3e>
 800a99e:	2302      	movs	r3, #2
 800a9a0:	e7e5      	b.n	800a96e <__ieee754_pow+0x106>
 800a9a2:	f1b9 0f00 	cmp.w	r9, #0
 800a9a6:	f04f 0000 	mov.w	r0, #0
 800a9aa:	f04f 0100 	mov.w	r1, #0
 800a9ae:	f6bf af7a 	bge.w	800a8a6 <__ieee754_pow+0x3e>
 800a9b2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a9b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a9ba:	e774      	b.n	800a8a6 <__ieee754_pow+0x3e>
 800a9bc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a9c0:	d106      	bne.n	800a9d0 <__ieee754_pow+0x168>
 800a9c2:	4632      	mov	r2, r6
 800a9c4:	463b      	mov	r3, r7
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	4639      	mov	r1, r7
 800a9ca:	f7f5 fe2d 	bl	8000628 <__aeabi_dmul>
 800a9ce:	e76a      	b.n	800a8a6 <__ieee754_pow+0x3e>
 800a9d0:	4b3e      	ldr	r3, [pc, #248]	; (800aacc <__ieee754_pow+0x264>)
 800a9d2:	4599      	cmp	r9, r3
 800a9d4:	d10c      	bne.n	800a9f0 <__ieee754_pow+0x188>
 800a9d6:	2d00      	cmp	r5, #0
 800a9d8:	db0a      	blt.n	800a9f0 <__ieee754_pow+0x188>
 800a9da:	ec47 6b10 	vmov	d0, r6, r7
 800a9de:	b009      	add	sp, #36	; 0x24
 800a9e0:	ecbd 8b06 	vpop	{d8-d10}
 800a9e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e8:	f000 bc6c 	b.w	800b2c4 <__ieee754_sqrt>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	9304      	str	r3, [sp, #16]
 800a9f0:	ec47 6b10 	vmov	d0, r6, r7
 800a9f4:	f000 fd48 	bl	800b488 <fabs>
 800a9f8:	ec51 0b10 	vmov	r0, r1, d0
 800a9fc:	f1ba 0f00 	cmp.w	sl, #0
 800aa00:	d129      	bne.n	800aa56 <__ieee754_pow+0x1ee>
 800aa02:	b124      	cbz	r4, 800aa0e <__ieee754_pow+0x1a6>
 800aa04:	4b2f      	ldr	r3, [pc, #188]	; (800aac4 <__ieee754_pow+0x25c>)
 800aa06:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d123      	bne.n	800aa56 <__ieee754_pow+0x1ee>
 800aa0e:	f1b9 0f00 	cmp.w	r9, #0
 800aa12:	da05      	bge.n	800aa20 <__ieee754_pow+0x1b8>
 800aa14:	4602      	mov	r2, r0
 800aa16:	460b      	mov	r3, r1
 800aa18:	2000      	movs	r0, #0
 800aa1a:	492a      	ldr	r1, [pc, #168]	; (800aac4 <__ieee754_pow+0x25c>)
 800aa1c:	f7f5 ff2e 	bl	800087c <__aeabi_ddiv>
 800aa20:	2d00      	cmp	r5, #0
 800aa22:	f6bf af40 	bge.w	800a8a6 <__ieee754_pow+0x3e>
 800aa26:	9b04      	ldr	r3, [sp, #16]
 800aa28:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800aa2c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800aa30:	4323      	orrs	r3, r4
 800aa32:	d108      	bne.n	800aa46 <__ieee754_pow+0x1de>
 800aa34:	4602      	mov	r2, r0
 800aa36:	460b      	mov	r3, r1
 800aa38:	4610      	mov	r0, r2
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	f7f5 fc3c 	bl	80002b8 <__aeabi_dsub>
 800aa40:	4602      	mov	r2, r0
 800aa42:	460b      	mov	r3, r1
 800aa44:	e78f      	b.n	800a966 <__ieee754_pow+0xfe>
 800aa46:	9b04      	ldr	r3, [sp, #16]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	f47f af2c 	bne.w	800a8a6 <__ieee754_pow+0x3e>
 800aa4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa52:	4619      	mov	r1, r3
 800aa54:	e727      	b.n	800a8a6 <__ieee754_pow+0x3e>
 800aa56:	0feb      	lsrs	r3, r5, #31
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	9306      	str	r3, [sp, #24]
 800aa5c:	9a06      	ldr	r2, [sp, #24]
 800aa5e:	9b04      	ldr	r3, [sp, #16]
 800aa60:	4313      	orrs	r3, r2
 800aa62:	d102      	bne.n	800aa6a <__ieee754_pow+0x202>
 800aa64:	4632      	mov	r2, r6
 800aa66:	463b      	mov	r3, r7
 800aa68:	e7e6      	b.n	800aa38 <__ieee754_pow+0x1d0>
 800aa6a:	4b19      	ldr	r3, [pc, #100]	; (800aad0 <__ieee754_pow+0x268>)
 800aa6c:	4598      	cmp	r8, r3
 800aa6e:	f340 80fb 	ble.w	800ac68 <__ieee754_pow+0x400>
 800aa72:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800aa76:	4598      	cmp	r8, r3
 800aa78:	4b13      	ldr	r3, [pc, #76]	; (800aac8 <__ieee754_pow+0x260>)
 800aa7a:	dd0c      	ble.n	800aa96 <__ieee754_pow+0x22e>
 800aa7c:	429c      	cmp	r4, r3
 800aa7e:	dc0f      	bgt.n	800aaa0 <__ieee754_pow+0x238>
 800aa80:	f1b9 0f00 	cmp.w	r9, #0
 800aa84:	da0f      	bge.n	800aaa6 <__ieee754_pow+0x23e>
 800aa86:	2000      	movs	r0, #0
 800aa88:	b009      	add	sp, #36	; 0x24
 800aa8a:	ecbd 8b06 	vpop	{d8-d10}
 800aa8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa92:	f000 bcf0 	b.w	800b476 <__math_oflow>
 800aa96:	429c      	cmp	r4, r3
 800aa98:	dbf2      	blt.n	800aa80 <__ieee754_pow+0x218>
 800aa9a:	4b0a      	ldr	r3, [pc, #40]	; (800aac4 <__ieee754_pow+0x25c>)
 800aa9c:	429c      	cmp	r4, r3
 800aa9e:	dd19      	ble.n	800aad4 <__ieee754_pow+0x26c>
 800aaa0:	f1b9 0f00 	cmp.w	r9, #0
 800aaa4:	dcef      	bgt.n	800aa86 <__ieee754_pow+0x21e>
 800aaa6:	2000      	movs	r0, #0
 800aaa8:	b009      	add	sp, #36	; 0x24
 800aaaa:	ecbd 8b06 	vpop	{d8-d10}
 800aaae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab2:	f000 bcd7 	b.w	800b464 <__math_uflow>
 800aab6:	bf00      	nop
 800aab8:	fff00000 	.word	0xfff00000
 800aabc:	7ff00000 	.word	0x7ff00000
 800aac0:	433fffff 	.word	0x433fffff
 800aac4:	3ff00000 	.word	0x3ff00000
 800aac8:	3fefffff 	.word	0x3fefffff
 800aacc:	3fe00000 	.word	0x3fe00000
 800aad0:	41e00000 	.word	0x41e00000
 800aad4:	4b60      	ldr	r3, [pc, #384]	; (800ac58 <__ieee754_pow+0x3f0>)
 800aad6:	2200      	movs	r2, #0
 800aad8:	f7f5 fbee 	bl	80002b8 <__aeabi_dsub>
 800aadc:	a354      	add	r3, pc, #336	; (adr r3, 800ac30 <__ieee754_pow+0x3c8>)
 800aade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae2:	4604      	mov	r4, r0
 800aae4:	460d      	mov	r5, r1
 800aae6:	f7f5 fd9f 	bl	8000628 <__aeabi_dmul>
 800aaea:	a353      	add	r3, pc, #332	; (adr r3, 800ac38 <__ieee754_pow+0x3d0>)
 800aaec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf0:	4606      	mov	r6, r0
 800aaf2:	460f      	mov	r7, r1
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	4629      	mov	r1, r5
 800aaf8:	f7f5 fd96 	bl	8000628 <__aeabi_dmul>
 800aafc:	4b57      	ldr	r3, [pc, #348]	; (800ac5c <__ieee754_pow+0x3f4>)
 800aafe:	4682      	mov	sl, r0
 800ab00:	468b      	mov	fp, r1
 800ab02:	2200      	movs	r2, #0
 800ab04:	4620      	mov	r0, r4
 800ab06:	4629      	mov	r1, r5
 800ab08:	f7f5 fd8e 	bl	8000628 <__aeabi_dmul>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	460b      	mov	r3, r1
 800ab10:	a14b      	add	r1, pc, #300	; (adr r1, 800ac40 <__ieee754_pow+0x3d8>)
 800ab12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab16:	f7f5 fbcf 	bl	80002b8 <__aeabi_dsub>
 800ab1a:	4622      	mov	r2, r4
 800ab1c:	462b      	mov	r3, r5
 800ab1e:	f7f5 fd83 	bl	8000628 <__aeabi_dmul>
 800ab22:	4602      	mov	r2, r0
 800ab24:	460b      	mov	r3, r1
 800ab26:	2000      	movs	r0, #0
 800ab28:	494d      	ldr	r1, [pc, #308]	; (800ac60 <__ieee754_pow+0x3f8>)
 800ab2a:	f7f5 fbc5 	bl	80002b8 <__aeabi_dsub>
 800ab2e:	4622      	mov	r2, r4
 800ab30:	4680      	mov	r8, r0
 800ab32:	4689      	mov	r9, r1
 800ab34:	462b      	mov	r3, r5
 800ab36:	4620      	mov	r0, r4
 800ab38:	4629      	mov	r1, r5
 800ab3a:	f7f5 fd75 	bl	8000628 <__aeabi_dmul>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	460b      	mov	r3, r1
 800ab42:	4640      	mov	r0, r8
 800ab44:	4649      	mov	r1, r9
 800ab46:	f7f5 fd6f 	bl	8000628 <__aeabi_dmul>
 800ab4a:	a33f      	add	r3, pc, #252	; (adr r3, 800ac48 <__ieee754_pow+0x3e0>)
 800ab4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab50:	f7f5 fd6a 	bl	8000628 <__aeabi_dmul>
 800ab54:	4602      	mov	r2, r0
 800ab56:	460b      	mov	r3, r1
 800ab58:	4650      	mov	r0, sl
 800ab5a:	4659      	mov	r1, fp
 800ab5c:	f7f5 fbac 	bl	80002b8 <__aeabi_dsub>
 800ab60:	4602      	mov	r2, r0
 800ab62:	460b      	mov	r3, r1
 800ab64:	4680      	mov	r8, r0
 800ab66:	4689      	mov	r9, r1
 800ab68:	4630      	mov	r0, r6
 800ab6a:	4639      	mov	r1, r7
 800ab6c:	f7f5 fba6 	bl	80002bc <__adddf3>
 800ab70:	2000      	movs	r0, #0
 800ab72:	4632      	mov	r2, r6
 800ab74:	463b      	mov	r3, r7
 800ab76:	4604      	mov	r4, r0
 800ab78:	460d      	mov	r5, r1
 800ab7a:	f7f5 fb9d 	bl	80002b8 <__aeabi_dsub>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	460b      	mov	r3, r1
 800ab82:	4640      	mov	r0, r8
 800ab84:	4649      	mov	r1, r9
 800ab86:	f7f5 fb97 	bl	80002b8 <__aeabi_dsub>
 800ab8a:	9b04      	ldr	r3, [sp, #16]
 800ab8c:	9a06      	ldr	r2, [sp, #24]
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	4313      	orrs	r3, r2
 800ab92:	4682      	mov	sl, r0
 800ab94:	468b      	mov	fp, r1
 800ab96:	f040 81e7 	bne.w	800af68 <__ieee754_pow+0x700>
 800ab9a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ac50 <__ieee754_pow+0x3e8>
 800ab9e:	eeb0 8a47 	vmov.f32	s16, s14
 800aba2:	eef0 8a67 	vmov.f32	s17, s15
 800aba6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800abaa:	2600      	movs	r6, #0
 800abac:	4632      	mov	r2, r6
 800abae:	463b      	mov	r3, r7
 800abb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abb4:	f7f5 fb80 	bl	80002b8 <__aeabi_dsub>
 800abb8:	4622      	mov	r2, r4
 800abba:	462b      	mov	r3, r5
 800abbc:	f7f5 fd34 	bl	8000628 <__aeabi_dmul>
 800abc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abc4:	4680      	mov	r8, r0
 800abc6:	4689      	mov	r9, r1
 800abc8:	4650      	mov	r0, sl
 800abca:	4659      	mov	r1, fp
 800abcc:	f7f5 fd2c 	bl	8000628 <__aeabi_dmul>
 800abd0:	4602      	mov	r2, r0
 800abd2:	460b      	mov	r3, r1
 800abd4:	4640      	mov	r0, r8
 800abd6:	4649      	mov	r1, r9
 800abd8:	f7f5 fb70 	bl	80002bc <__adddf3>
 800abdc:	4632      	mov	r2, r6
 800abde:	463b      	mov	r3, r7
 800abe0:	4680      	mov	r8, r0
 800abe2:	4689      	mov	r9, r1
 800abe4:	4620      	mov	r0, r4
 800abe6:	4629      	mov	r1, r5
 800abe8:	f7f5 fd1e 	bl	8000628 <__aeabi_dmul>
 800abec:	460b      	mov	r3, r1
 800abee:	4604      	mov	r4, r0
 800abf0:	460d      	mov	r5, r1
 800abf2:	4602      	mov	r2, r0
 800abf4:	4649      	mov	r1, r9
 800abf6:	4640      	mov	r0, r8
 800abf8:	f7f5 fb60 	bl	80002bc <__adddf3>
 800abfc:	4b19      	ldr	r3, [pc, #100]	; (800ac64 <__ieee754_pow+0x3fc>)
 800abfe:	4299      	cmp	r1, r3
 800ac00:	ec45 4b19 	vmov	d9, r4, r5
 800ac04:	4606      	mov	r6, r0
 800ac06:	460f      	mov	r7, r1
 800ac08:	468b      	mov	fp, r1
 800ac0a:	f340 82f1 	ble.w	800b1f0 <__ieee754_pow+0x988>
 800ac0e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ac12:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ac16:	4303      	orrs	r3, r0
 800ac18:	f000 81e4 	beq.w	800afe4 <__ieee754_pow+0x77c>
 800ac1c:	ec51 0b18 	vmov	r0, r1, d8
 800ac20:	2200      	movs	r2, #0
 800ac22:	2300      	movs	r3, #0
 800ac24:	f7f5 ff72 	bl	8000b0c <__aeabi_dcmplt>
 800ac28:	3800      	subs	r0, #0
 800ac2a:	bf18      	it	ne
 800ac2c:	2001      	movne	r0, #1
 800ac2e:	e72b      	b.n	800aa88 <__ieee754_pow+0x220>
 800ac30:	60000000 	.word	0x60000000
 800ac34:	3ff71547 	.word	0x3ff71547
 800ac38:	f85ddf44 	.word	0xf85ddf44
 800ac3c:	3e54ae0b 	.word	0x3e54ae0b
 800ac40:	55555555 	.word	0x55555555
 800ac44:	3fd55555 	.word	0x3fd55555
 800ac48:	652b82fe 	.word	0x652b82fe
 800ac4c:	3ff71547 	.word	0x3ff71547
 800ac50:	00000000 	.word	0x00000000
 800ac54:	bff00000 	.word	0xbff00000
 800ac58:	3ff00000 	.word	0x3ff00000
 800ac5c:	3fd00000 	.word	0x3fd00000
 800ac60:	3fe00000 	.word	0x3fe00000
 800ac64:	408fffff 	.word	0x408fffff
 800ac68:	4bd5      	ldr	r3, [pc, #852]	; (800afc0 <__ieee754_pow+0x758>)
 800ac6a:	402b      	ands	r3, r5
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	b92b      	cbnz	r3, 800ac7c <__ieee754_pow+0x414>
 800ac70:	4bd4      	ldr	r3, [pc, #848]	; (800afc4 <__ieee754_pow+0x75c>)
 800ac72:	f7f5 fcd9 	bl	8000628 <__aeabi_dmul>
 800ac76:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	1523      	asrs	r3, r4, #20
 800ac7e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ac82:	4413      	add	r3, r2
 800ac84:	9305      	str	r3, [sp, #20]
 800ac86:	4bd0      	ldr	r3, [pc, #832]	; (800afc8 <__ieee754_pow+0x760>)
 800ac88:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ac8c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ac90:	429c      	cmp	r4, r3
 800ac92:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ac96:	dd08      	ble.n	800acaa <__ieee754_pow+0x442>
 800ac98:	4bcc      	ldr	r3, [pc, #816]	; (800afcc <__ieee754_pow+0x764>)
 800ac9a:	429c      	cmp	r4, r3
 800ac9c:	f340 8162 	ble.w	800af64 <__ieee754_pow+0x6fc>
 800aca0:	9b05      	ldr	r3, [sp, #20]
 800aca2:	3301      	adds	r3, #1
 800aca4:	9305      	str	r3, [sp, #20]
 800aca6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800acaa:	2400      	movs	r4, #0
 800acac:	00e3      	lsls	r3, r4, #3
 800acae:	9307      	str	r3, [sp, #28]
 800acb0:	4bc7      	ldr	r3, [pc, #796]	; (800afd0 <__ieee754_pow+0x768>)
 800acb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800acb6:	ed93 7b00 	vldr	d7, [r3]
 800acba:	4629      	mov	r1, r5
 800acbc:	ec53 2b17 	vmov	r2, r3, d7
 800acc0:	eeb0 9a47 	vmov.f32	s18, s14
 800acc4:	eef0 9a67 	vmov.f32	s19, s15
 800acc8:	4682      	mov	sl, r0
 800acca:	f7f5 faf5 	bl	80002b8 <__aeabi_dsub>
 800acce:	4652      	mov	r2, sl
 800acd0:	4606      	mov	r6, r0
 800acd2:	460f      	mov	r7, r1
 800acd4:	462b      	mov	r3, r5
 800acd6:	ec51 0b19 	vmov	r0, r1, d9
 800acda:	f7f5 faef 	bl	80002bc <__adddf3>
 800acde:	4602      	mov	r2, r0
 800ace0:	460b      	mov	r3, r1
 800ace2:	2000      	movs	r0, #0
 800ace4:	49bb      	ldr	r1, [pc, #748]	; (800afd4 <__ieee754_pow+0x76c>)
 800ace6:	f7f5 fdc9 	bl	800087c <__aeabi_ddiv>
 800acea:	ec41 0b1a 	vmov	d10, r0, r1
 800acee:	4602      	mov	r2, r0
 800acf0:	460b      	mov	r3, r1
 800acf2:	4630      	mov	r0, r6
 800acf4:	4639      	mov	r1, r7
 800acf6:	f7f5 fc97 	bl	8000628 <__aeabi_dmul>
 800acfa:	2300      	movs	r3, #0
 800acfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad00:	9302      	str	r3, [sp, #8]
 800ad02:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ad06:	46ab      	mov	fp, r5
 800ad08:	106d      	asrs	r5, r5, #1
 800ad0a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ad0e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ad12:	ec41 0b18 	vmov	d8, r0, r1
 800ad16:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	4640      	mov	r0, r8
 800ad1e:	4649      	mov	r1, r9
 800ad20:	4614      	mov	r4, r2
 800ad22:	461d      	mov	r5, r3
 800ad24:	f7f5 fc80 	bl	8000628 <__aeabi_dmul>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	4639      	mov	r1, r7
 800ad30:	f7f5 fac2 	bl	80002b8 <__aeabi_dsub>
 800ad34:	ec53 2b19 	vmov	r2, r3, d9
 800ad38:	4606      	mov	r6, r0
 800ad3a:	460f      	mov	r7, r1
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	4629      	mov	r1, r5
 800ad40:	f7f5 faba 	bl	80002b8 <__aeabi_dsub>
 800ad44:	4602      	mov	r2, r0
 800ad46:	460b      	mov	r3, r1
 800ad48:	4650      	mov	r0, sl
 800ad4a:	4659      	mov	r1, fp
 800ad4c:	f7f5 fab4 	bl	80002b8 <__aeabi_dsub>
 800ad50:	4642      	mov	r2, r8
 800ad52:	464b      	mov	r3, r9
 800ad54:	f7f5 fc68 	bl	8000628 <__aeabi_dmul>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	4630      	mov	r0, r6
 800ad5e:	4639      	mov	r1, r7
 800ad60:	f7f5 faaa 	bl	80002b8 <__aeabi_dsub>
 800ad64:	ec53 2b1a 	vmov	r2, r3, d10
 800ad68:	f7f5 fc5e 	bl	8000628 <__aeabi_dmul>
 800ad6c:	ec53 2b18 	vmov	r2, r3, d8
 800ad70:	ec41 0b19 	vmov	d9, r0, r1
 800ad74:	ec51 0b18 	vmov	r0, r1, d8
 800ad78:	f7f5 fc56 	bl	8000628 <__aeabi_dmul>
 800ad7c:	a37c      	add	r3, pc, #496	; (adr r3, 800af70 <__ieee754_pow+0x708>)
 800ad7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad82:	4604      	mov	r4, r0
 800ad84:	460d      	mov	r5, r1
 800ad86:	f7f5 fc4f 	bl	8000628 <__aeabi_dmul>
 800ad8a:	a37b      	add	r3, pc, #492	; (adr r3, 800af78 <__ieee754_pow+0x710>)
 800ad8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad90:	f7f5 fa94 	bl	80002bc <__adddf3>
 800ad94:	4622      	mov	r2, r4
 800ad96:	462b      	mov	r3, r5
 800ad98:	f7f5 fc46 	bl	8000628 <__aeabi_dmul>
 800ad9c:	a378      	add	r3, pc, #480	; (adr r3, 800af80 <__ieee754_pow+0x718>)
 800ad9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada2:	f7f5 fa8b 	bl	80002bc <__adddf3>
 800ada6:	4622      	mov	r2, r4
 800ada8:	462b      	mov	r3, r5
 800adaa:	f7f5 fc3d 	bl	8000628 <__aeabi_dmul>
 800adae:	a376      	add	r3, pc, #472	; (adr r3, 800af88 <__ieee754_pow+0x720>)
 800adb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb4:	f7f5 fa82 	bl	80002bc <__adddf3>
 800adb8:	4622      	mov	r2, r4
 800adba:	462b      	mov	r3, r5
 800adbc:	f7f5 fc34 	bl	8000628 <__aeabi_dmul>
 800adc0:	a373      	add	r3, pc, #460	; (adr r3, 800af90 <__ieee754_pow+0x728>)
 800adc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc6:	f7f5 fa79 	bl	80002bc <__adddf3>
 800adca:	4622      	mov	r2, r4
 800adcc:	462b      	mov	r3, r5
 800adce:	f7f5 fc2b 	bl	8000628 <__aeabi_dmul>
 800add2:	a371      	add	r3, pc, #452	; (adr r3, 800af98 <__ieee754_pow+0x730>)
 800add4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add8:	f7f5 fa70 	bl	80002bc <__adddf3>
 800addc:	4622      	mov	r2, r4
 800adde:	4606      	mov	r6, r0
 800ade0:	460f      	mov	r7, r1
 800ade2:	462b      	mov	r3, r5
 800ade4:	4620      	mov	r0, r4
 800ade6:	4629      	mov	r1, r5
 800ade8:	f7f5 fc1e 	bl	8000628 <__aeabi_dmul>
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	4630      	mov	r0, r6
 800adf2:	4639      	mov	r1, r7
 800adf4:	f7f5 fc18 	bl	8000628 <__aeabi_dmul>
 800adf8:	4642      	mov	r2, r8
 800adfa:	4604      	mov	r4, r0
 800adfc:	460d      	mov	r5, r1
 800adfe:	464b      	mov	r3, r9
 800ae00:	ec51 0b18 	vmov	r0, r1, d8
 800ae04:	f7f5 fa5a 	bl	80002bc <__adddf3>
 800ae08:	ec53 2b19 	vmov	r2, r3, d9
 800ae0c:	f7f5 fc0c 	bl	8000628 <__aeabi_dmul>
 800ae10:	4622      	mov	r2, r4
 800ae12:	462b      	mov	r3, r5
 800ae14:	f7f5 fa52 	bl	80002bc <__adddf3>
 800ae18:	4642      	mov	r2, r8
 800ae1a:	4682      	mov	sl, r0
 800ae1c:	468b      	mov	fp, r1
 800ae1e:	464b      	mov	r3, r9
 800ae20:	4640      	mov	r0, r8
 800ae22:	4649      	mov	r1, r9
 800ae24:	f7f5 fc00 	bl	8000628 <__aeabi_dmul>
 800ae28:	4b6b      	ldr	r3, [pc, #428]	; (800afd8 <__ieee754_pow+0x770>)
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	4606      	mov	r6, r0
 800ae2e:	460f      	mov	r7, r1
 800ae30:	f7f5 fa44 	bl	80002bc <__adddf3>
 800ae34:	4652      	mov	r2, sl
 800ae36:	465b      	mov	r3, fp
 800ae38:	f7f5 fa40 	bl	80002bc <__adddf3>
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	4604      	mov	r4, r0
 800ae40:	460d      	mov	r5, r1
 800ae42:	4602      	mov	r2, r0
 800ae44:	460b      	mov	r3, r1
 800ae46:	4640      	mov	r0, r8
 800ae48:	4649      	mov	r1, r9
 800ae4a:	f7f5 fbed 	bl	8000628 <__aeabi_dmul>
 800ae4e:	4b62      	ldr	r3, [pc, #392]	; (800afd8 <__ieee754_pow+0x770>)
 800ae50:	4680      	mov	r8, r0
 800ae52:	4689      	mov	r9, r1
 800ae54:	2200      	movs	r2, #0
 800ae56:	4620      	mov	r0, r4
 800ae58:	4629      	mov	r1, r5
 800ae5a:	f7f5 fa2d 	bl	80002b8 <__aeabi_dsub>
 800ae5e:	4632      	mov	r2, r6
 800ae60:	463b      	mov	r3, r7
 800ae62:	f7f5 fa29 	bl	80002b8 <__aeabi_dsub>
 800ae66:	4602      	mov	r2, r0
 800ae68:	460b      	mov	r3, r1
 800ae6a:	4650      	mov	r0, sl
 800ae6c:	4659      	mov	r1, fp
 800ae6e:	f7f5 fa23 	bl	80002b8 <__aeabi_dsub>
 800ae72:	ec53 2b18 	vmov	r2, r3, d8
 800ae76:	f7f5 fbd7 	bl	8000628 <__aeabi_dmul>
 800ae7a:	4622      	mov	r2, r4
 800ae7c:	4606      	mov	r6, r0
 800ae7e:	460f      	mov	r7, r1
 800ae80:	462b      	mov	r3, r5
 800ae82:	ec51 0b19 	vmov	r0, r1, d9
 800ae86:	f7f5 fbcf 	bl	8000628 <__aeabi_dmul>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	4630      	mov	r0, r6
 800ae90:	4639      	mov	r1, r7
 800ae92:	f7f5 fa13 	bl	80002bc <__adddf3>
 800ae96:	4606      	mov	r6, r0
 800ae98:	460f      	mov	r7, r1
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	4640      	mov	r0, r8
 800aea0:	4649      	mov	r1, r9
 800aea2:	f7f5 fa0b 	bl	80002bc <__adddf3>
 800aea6:	a33e      	add	r3, pc, #248	; (adr r3, 800afa0 <__ieee754_pow+0x738>)
 800aea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeac:	2000      	movs	r0, #0
 800aeae:	4604      	mov	r4, r0
 800aeb0:	460d      	mov	r5, r1
 800aeb2:	f7f5 fbb9 	bl	8000628 <__aeabi_dmul>
 800aeb6:	4642      	mov	r2, r8
 800aeb8:	ec41 0b18 	vmov	d8, r0, r1
 800aebc:	464b      	mov	r3, r9
 800aebe:	4620      	mov	r0, r4
 800aec0:	4629      	mov	r1, r5
 800aec2:	f7f5 f9f9 	bl	80002b8 <__aeabi_dsub>
 800aec6:	4602      	mov	r2, r0
 800aec8:	460b      	mov	r3, r1
 800aeca:	4630      	mov	r0, r6
 800aecc:	4639      	mov	r1, r7
 800aece:	f7f5 f9f3 	bl	80002b8 <__aeabi_dsub>
 800aed2:	a335      	add	r3, pc, #212	; (adr r3, 800afa8 <__ieee754_pow+0x740>)
 800aed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed8:	f7f5 fba6 	bl	8000628 <__aeabi_dmul>
 800aedc:	a334      	add	r3, pc, #208	; (adr r3, 800afb0 <__ieee754_pow+0x748>)
 800aede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee2:	4606      	mov	r6, r0
 800aee4:	460f      	mov	r7, r1
 800aee6:	4620      	mov	r0, r4
 800aee8:	4629      	mov	r1, r5
 800aeea:	f7f5 fb9d 	bl	8000628 <__aeabi_dmul>
 800aeee:	4602      	mov	r2, r0
 800aef0:	460b      	mov	r3, r1
 800aef2:	4630      	mov	r0, r6
 800aef4:	4639      	mov	r1, r7
 800aef6:	f7f5 f9e1 	bl	80002bc <__adddf3>
 800aefa:	9a07      	ldr	r2, [sp, #28]
 800aefc:	4b37      	ldr	r3, [pc, #220]	; (800afdc <__ieee754_pow+0x774>)
 800aefe:	4413      	add	r3, r2
 800af00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af04:	f7f5 f9da 	bl	80002bc <__adddf3>
 800af08:	4682      	mov	sl, r0
 800af0a:	9805      	ldr	r0, [sp, #20]
 800af0c:	468b      	mov	fp, r1
 800af0e:	f7f5 fb21 	bl	8000554 <__aeabi_i2d>
 800af12:	9a07      	ldr	r2, [sp, #28]
 800af14:	4b32      	ldr	r3, [pc, #200]	; (800afe0 <__ieee754_pow+0x778>)
 800af16:	4413      	add	r3, r2
 800af18:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af1c:	4606      	mov	r6, r0
 800af1e:	460f      	mov	r7, r1
 800af20:	4652      	mov	r2, sl
 800af22:	465b      	mov	r3, fp
 800af24:	ec51 0b18 	vmov	r0, r1, d8
 800af28:	f7f5 f9c8 	bl	80002bc <__adddf3>
 800af2c:	4642      	mov	r2, r8
 800af2e:	464b      	mov	r3, r9
 800af30:	f7f5 f9c4 	bl	80002bc <__adddf3>
 800af34:	4632      	mov	r2, r6
 800af36:	463b      	mov	r3, r7
 800af38:	f7f5 f9c0 	bl	80002bc <__adddf3>
 800af3c:	2000      	movs	r0, #0
 800af3e:	4632      	mov	r2, r6
 800af40:	463b      	mov	r3, r7
 800af42:	4604      	mov	r4, r0
 800af44:	460d      	mov	r5, r1
 800af46:	f7f5 f9b7 	bl	80002b8 <__aeabi_dsub>
 800af4a:	4642      	mov	r2, r8
 800af4c:	464b      	mov	r3, r9
 800af4e:	f7f5 f9b3 	bl	80002b8 <__aeabi_dsub>
 800af52:	ec53 2b18 	vmov	r2, r3, d8
 800af56:	f7f5 f9af 	bl	80002b8 <__aeabi_dsub>
 800af5a:	4602      	mov	r2, r0
 800af5c:	460b      	mov	r3, r1
 800af5e:	4650      	mov	r0, sl
 800af60:	4659      	mov	r1, fp
 800af62:	e610      	b.n	800ab86 <__ieee754_pow+0x31e>
 800af64:	2401      	movs	r4, #1
 800af66:	e6a1      	b.n	800acac <__ieee754_pow+0x444>
 800af68:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800afb8 <__ieee754_pow+0x750>
 800af6c:	e617      	b.n	800ab9e <__ieee754_pow+0x336>
 800af6e:	bf00      	nop
 800af70:	4a454eef 	.word	0x4a454eef
 800af74:	3fca7e28 	.word	0x3fca7e28
 800af78:	93c9db65 	.word	0x93c9db65
 800af7c:	3fcd864a 	.word	0x3fcd864a
 800af80:	a91d4101 	.word	0xa91d4101
 800af84:	3fd17460 	.word	0x3fd17460
 800af88:	518f264d 	.word	0x518f264d
 800af8c:	3fd55555 	.word	0x3fd55555
 800af90:	db6fabff 	.word	0xdb6fabff
 800af94:	3fdb6db6 	.word	0x3fdb6db6
 800af98:	33333303 	.word	0x33333303
 800af9c:	3fe33333 	.word	0x3fe33333
 800afa0:	e0000000 	.word	0xe0000000
 800afa4:	3feec709 	.word	0x3feec709
 800afa8:	dc3a03fd 	.word	0xdc3a03fd
 800afac:	3feec709 	.word	0x3feec709
 800afb0:	145b01f5 	.word	0x145b01f5
 800afb4:	be3e2fe0 	.word	0xbe3e2fe0
 800afb8:	00000000 	.word	0x00000000
 800afbc:	3ff00000 	.word	0x3ff00000
 800afc0:	7ff00000 	.word	0x7ff00000
 800afc4:	43400000 	.word	0x43400000
 800afc8:	0003988e 	.word	0x0003988e
 800afcc:	000bb679 	.word	0x000bb679
 800afd0:	0800b8e8 	.word	0x0800b8e8
 800afd4:	3ff00000 	.word	0x3ff00000
 800afd8:	40080000 	.word	0x40080000
 800afdc:	0800b908 	.word	0x0800b908
 800afe0:	0800b8f8 	.word	0x0800b8f8
 800afe4:	a3b5      	add	r3, pc, #724	; (adr r3, 800b2bc <__ieee754_pow+0xa54>)
 800afe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afea:	4640      	mov	r0, r8
 800afec:	4649      	mov	r1, r9
 800afee:	f7f5 f965 	bl	80002bc <__adddf3>
 800aff2:	4622      	mov	r2, r4
 800aff4:	ec41 0b1a 	vmov	d10, r0, r1
 800aff8:	462b      	mov	r3, r5
 800affa:	4630      	mov	r0, r6
 800affc:	4639      	mov	r1, r7
 800affe:	f7f5 f95b 	bl	80002b8 <__aeabi_dsub>
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	ec51 0b1a 	vmov	r0, r1, d10
 800b00a:	f7f5 fd9d 	bl	8000b48 <__aeabi_dcmpgt>
 800b00e:	2800      	cmp	r0, #0
 800b010:	f47f ae04 	bne.w	800ac1c <__ieee754_pow+0x3b4>
 800b014:	4aa4      	ldr	r2, [pc, #656]	; (800b2a8 <__ieee754_pow+0xa40>)
 800b016:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b01a:	4293      	cmp	r3, r2
 800b01c:	f340 8108 	ble.w	800b230 <__ieee754_pow+0x9c8>
 800b020:	151b      	asrs	r3, r3, #20
 800b022:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b026:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b02a:	fa4a f303 	asr.w	r3, sl, r3
 800b02e:	445b      	add	r3, fp
 800b030:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b034:	4e9d      	ldr	r6, [pc, #628]	; (800b2ac <__ieee754_pow+0xa44>)
 800b036:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b03a:	4116      	asrs	r6, r2
 800b03c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b040:	2000      	movs	r0, #0
 800b042:	ea23 0106 	bic.w	r1, r3, r6
 800b046:	f1c2 0214 	rsb	r2, r2, #20
 800b04a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b04e:	fa4a fa02 	asr.w	sl, sl, r2
 800b052:	f1bb 0f00 	cmp.w	fp, #0
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	4620      	mov	r0, r4
 800b05c:	4629      	mov	r1, r5
 800b05e:	bfb8      	it	lt
 800b060:	f1ca 0a00 	rsblt	sl, sl, #0
 800b064:	f7f5 f928 	bl	80002b8 <__aeabi_dsub>
 800b068:	ec41 0b19 	vmov	d9, r0, r1
 800b06c:	4642      	mov	r2, r8
 800b06e:	464b      	mov	r3, r9
 800b070:	ec51 0b19 	vmov	r0, r1, d9
 800b074:	f7f5 f922 	bl	80002bc <__adddf3>
 800b078:	a37b      	add	r3, pc, #492	; (adr r3, 800b268 <__ieee754_pow+0xa00>)
 800b07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07e:	2000      	movs	r0, #0
 800b080:	4604      	mov	r4, r0
 800b082:	460d      	mov	r5, r1
 800b084:	f7f5 fad0 	bl	8000628 <__aeabi_dmul>
 800b088:	ec53 2b19 	vmov	r2, r3, d9
 800b08c:	4606      	mov	r6, r0
 800b08e:	460f      	mov	r7, r1
 800b090:	4620      	mov	r0, r4
 800b092:	4629      	mov	r1, r5
 800b094:	f7f5 f910 	bl	80002b8 <__aeabi_dsub>
 800b098:	4602      	mov	r2, r0
 800b09a:	460b      	mov	r3, r1
 800b09c:	4640      	mov	r0, r8
 800b09e:	4649      	mov	r1, r9
 800b0a0:	f7f5 f90a 	bl	80002b8 <__aeabi_dsub>
 800b0a4:	a372      	add	r3, pc, #456	; (adr r3, 800b270 <__ieee754_pow+0xa08>)
 800b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0aa:	f7f5 fabd 	bl	8000628 <__aeabi_dmul>
 800b0ae:	a372      	add	r3, pc, #456	; (adr r3, 800b278 <__ieee754_pow+0xa10>)
 800b0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b4:	4680      	mov	r8, r0
 800b0b6:	4689      	mov	r9, r1
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	4629      	mov	r1, r5
 800b0bc:	f7f5 fab4 	bl	8000628 <__aeabi_dmul>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	4640      	mov	r0, r8
 800b0c6:	4649      	mov	r1, r9
 800b0c8:	f7f5 f8f8 	bl	80002bc <__adddf3>
 800b0cc:	4604      	mov	r4, r0
 800b0ce:	460d      	mov	r5, r1
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	4639      	mov	r1, r7
 800b0d8:	f7f5 f8f0 	bl	80002bc <__adddf3>
 800b0dc:	4632      	mov	r2, r6
 800b0de:	463b      	mov	r3, r7
 800b0e0:	4680      	mov	r8, r0
 800b0e2:	4689      	mov	r9, r1
 800b0e4:	f7f5 f8e8 	bl	80002b8 <__aeabi_dsub>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	4629      	mov	r1, r5
 800b0f0:	f7f5 f8e2 	bl	80002b8 <__aeabi_dsub>
 800b0f4:	4642      	mov	r2, r8
 800b0f6:	4606      	mov	r6, r0
 800b0f8:	460f      	mov	r7, r1
 800b0fa:	464b      	mov	r3, r9
 800b0fc:	4640      	mov	r0, r8
 800b0fe:	4649      	mov	r1, r9
 800b100:	f7f5 fa92 	bl	8000628 <__aeabi_dmul>
 800b104:	a35e      	add	r3, pc, #376	; (adr r3, 800b280 <__ieee754_pow+0xa18>)
 800b106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10a:	4604      	mov	r4, r0
 800b10c:	460d      	mov	r5, r1
 800b10e:	f7f5 fa8b 	bl	8000628 <__aeabi_dmul>
 800b112:	a35d      	add	r3, pc, #372	; (adr r3, 800b288 <__ieee754_pow+0xa20>)
 800b114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b118:	f7f5 f8ce 	bl	80002b8 <__aeabi_dsub>
 800b11c:	4622      	mov	r2, r4
 800b11e:	462b      	mov	r3, r5
 800b120:	f7f5 fa82 	bl	8000628 <__aeabi_dmul>
 800b124:	a35a      	add	r3, pc, #360	; (adr r3, 800b290 <__ieee754_pow+0xa28>)
 800b126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12a:	f7f5 f8c7 	bl	80002bc <__adddf3>
 800b12e:	4622      	mov	r2, r4
 800b130:	462b      	mov	r3, r5
 800b132:	f7f5 fa79 	bl	8000628 <__aeabi_dmul>
 800b136:	a358      	add	r3, pc, #352	; (adr r3, 800b298 <__ieee754_pow+0xa30>)
 800b138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13c:	f7f5 f8bc 	bl	80002b8 <__aeabi_dsub>
 800b140:	4622      	mov	r2, r4
 800b142:	462b      	mov	r3, r5
 800b144:	f7f5 fa70 	bl	8000628 <__aeabi_dmul>
 800b148:	a355      	add	r3, pc, #340	; (adr r3, 800b2a0 <__ieee754_pow+0xa38>)
 800b14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14e:	f7f5 f8b5 	bl	80002bc <__adddf3>
 800b152:	4622      	mov	r2, r4
 800b154:	462b      	mov	r3, r5
 800b156:	f7f5 fa67 	bl	8000628 <__aeabi_dmul>
 800b15a:	4602      	mov	r2, r0
 800b15c:	460b      	mov	r3, r1
 800b15e:	4640      	mov	r0, r8
 800b160:	4649      	mov	r1, r9
 800b162:	f7f5 f8a9 	bl	80002b8 <__aeabi_dsub>
 800b166:	4604      	mov	r4, r0
 800b168:	460d      	mov	r5, r1
 800b16a:	4602      	mov	r2, r0
 800b16c:	460b      	mov	r3, r1
 800b16e:	4640      	mov	r0, r8
 800b170:	4649      	mov	r1, r9
 800b172:	f7f5 fa59 	bl	8000628 <__aeabi_dmul>
 800b176:	2200      	movs	r2, #0
 800b178:	ec41 0b19 	vmov	d9, r0, r1
 800b17c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b180:	4620      	mov	r0, r4
 800b182:	4629      	mov	r1, r5
 800b184:	f7f5 f898 	bl	80002b8 <__aeabi_dsub>
 800b188:	4602      	mov	r2, r0
 800b18a:	460b      	mov	r3, r1
 800b18c:	ec51 0b19 	vmov	r0, r1, d9
 800b190:	f7f5 fb74 	bl	800087c <__aeabi_ddiv>
 800b194:	4632      	mov	r2, r6
 800b196:	4604      	mov	r4, r0
 800b198:	460d      	mov	r5, r1
 800b19a:	463b      	mov	r3, r7
 800b19c:	4640      	mov	r0, r8
 800b19e:	4649      	mov	r1, r9
 800b1a0:	f7f5 fa42 	bl	8000628 <__aeabi_dmul>
 800b1a4:	4632      	mov	r2, r6
 800b1a6:	463b      	mov	r3, r7
 800b1a8:	f7f5 f888 	bl	80002bc <__adddf3>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	4629      	mov	r1, r5
 800b1b4:	f7f5 f880 	bl	80002b8 <__aeabi_dsub>
 800b1b8:	4642      	mov	r2, r8
 800b1ba:	464b      	mov	r3, r9
 800b1bc:	f7f5 f87c 	bl	80002b8 <__aeabi_dsub>
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	493a      	ldr	r1, [pc, #232]	; (800b2b0 <__ieee754_pow+0xa48>)
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	f7f5 f876 	bl	80002b8 <__aeabi_dsub>
 800b1cc:	ec41 0b10 	vmov	d0, r0, r1
 800b1d0:	ee10 3a90 	vmov	r3, s1
 800b1d4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b1d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1dc:	da2b      	bge.n	800b236 <__ieee754_pow+0x9ce>
 800b1de:	4650      	mov	r0, sl
 800b1e0:	f000 f966 	bl	800b4b0 <scalbn>
 800b1e4:	ec51 0b10 	vmov	r0, r1, d0
 800b1e8:	ec53 2b18 	vmov	r2, r3, d8
 800b1ec:	f7ff bbed 	b.w	800a9ca <__ieee754_pow+0x162>
 800b1f0:	4b30      	ldr	r3, [pc, #192]	; (800b2b4 <__ieee754_pow+0xa4c>)
 800b1f2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b1f6:	429e      	cmp	r6, r3
 800b1f8:	f77f af0c 	ble.w	800b014 <__ieee754_pow+0x7ac>
 800b1fc:	4b2e      	ldr	r3, [pc, #184]	; (800b2b8 <__ieee754_pow+0xa50>)
 800b1fe:	440b      	add	r3, r1
 800b200:	4303      	orrs	r3, r0
 800b202:	d009      	beq.n	800b218 <__ieee754_pow+0x9b0>
 800b204:	ec51 0b18 	vmov	r0, r1, d8
 800b208:	2200      	movs	r2, #0
 800b20a:	2300      	movs	r3, #0
 800b20c:	f7f5 fc7e 	bl	8000b0c <__aeabi_dcmplt>
 800b210:	3800      	subs	r0, #0
 800b212:	bf18      	it	ne
 800b214:	2001      	movne	r0, #1
 800b216:	e447      	b.n	800aaa8 <__ieee754_pow+0x240>
 800b218:	4622      	mov	r2, r4
 800b21a:	462b      	mov	r3, r5
 800b21c:	f7f5 f84c 	bl	80002b8 <__aeabi_dsub>
 800b220:	4642      	mov	r2, r8
 800b222:	464b      	mov	r3, r9
 800b224:	f7f5 fc86 	bl	8000b34 <__aeabi_dcmpge>
 800b228:	2800      	cmp	r0, #0
 800b22a:	f43f aef3 	beq.w	800b014 <__ieee754_pow+0x7ac>
 800b22e:	e7e9      	b.n	800b204 <__ieee754_pow+0x99c>
 800b230:	f04f 0a00 	mov.w	sl, #0
 800b234:	e71a      	b.n	800b06c <__ieee754_pow+0x804>
 800b236:	ec51 0b10 	vmov	r0, r1, d0
 800b23a:	4619      	mov	r1, r3
 800b23c:	e7d4      	b.n	800b1e8 <__ieee754_pow+0x980>
 800b23e:	491c      	ldr	r1, [pc, #112]	; (800b2b0 <__ieee754_pow+0xa48>)
 800b240:	2000      	movs	r0, #0
 800b242:	f7ff bb30 	b.w	800a8a6 <__ieee754_pow+0x3e>
 800b246:	2000      	movs	r0, #0
 800b248:	2100      	movs	r1, #0
 800b24a:	f7ff bb2c 	b.w	800a8a6 <__ieee754_pow+0x3e>
 800b24e:	4630      	mov	r0, r6
 800b250:	4639      	mov	r1, r7
 800b252:	f7ff bb28 	b.w	800a8a6 <__ieee754_pow+0x3e>
 800b256:	9204      	str	r2, [sp, #16]
 800b258:	f7ff bb7a 	b.w	800a950 <__ieee754_pow+0xe8>
 800b25c:	2300      	movs	r3, #0
 800b25e:	f7ff bb64 	b.w	800a92a <__ieee754_pow+0xc2>
 800b262:	bf00      	nop
 800b264:	f3af 8000 	nop.w
 800b268:	00000000 	.word	0x00000000
 800b26c:	3fe62e43 	.word	0x3fe62e43
 800b270:	fefa39ef 	.word	0xfefa39ef
 800b274:	3fe62e42 	.word	0x3fe62e42
 800b278:	0ca86c39 	.word	0x0ca86c39
 800b27c:	be205c61 	.word	0xbe205c61
 800b280:	72bea4d0 	.word	0x72bea4d0
 800b284:	3e663769 	.word	0x3e663769
 800b288:	c5d26bf1 	.word	0xc5d26bf1
 800b28c:	3ebbbd41 	.word	0x3ebbbd41
 800b290:	af25de2c 	.word	0xaf25de2c
 800b294:	3f11566a 	.word	0x3f11566a
 800b298:	16bebd93 	.word	0x16bebd93
 800b29c:	3f66c16c 	.word	0x3f66c16c
 800b2a0:	5555553e 	.word	0x5555553e
 800b2a4:	3fc55555 	.word	0x3fc55555
 800b2a8:	3fe00000 	.word	0x3fe00000
 800b2ac:	000fffff 	.word	0x000fffff
 800b2b0:	3ff00000 	.word	0x3ff00000
 800b2b4:	4090cbff 	.word	0x4090cbff
 800b2b8:	3f6f3400 	.word	0x3f6f3400
 800b2bc:	652b82fe 	.word	0x652b82fe
 800b2c0:	3c971547 	.word	0x3c971547

0800b2c4 <__ieee754_sqrt>:
 800b2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c8:	ec55 4b10 	vmov	r4, r5, d0
 800b2cc:	4e55      	ldr	r6, [pc, #340]	; (800b424 <__ieee754_sqrt+0x160>)
 800b2ce:	43ae      	bics	r6, r5
 800b2d0:	ee10 0a10 	vmov	r0, s0
 800b2d4:	ee10 3a10 	vmov	r3, s0
 800b2d8:	462a      	mov	r2, r5
 800b2da:	4629      	mov	r1, r5
 800b2dc:	d110      	bne.n	800b300 <__ieee754_sqrt+0x3c>
 800b2de:	ee10 2a10 	vmov	r2, s0
 800b2e2:	462b      	mov	r3, r5
 800b2e4:	f7f5 f9a0 	bl	8000628 <__aeabi_dmul>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	4629      	mov	r1, r5
 800b2f0:	f7f4 ffe4 	bl	80002bc <__adddf3>
 800b2f4:	4604      	mov	r4, r0
 800b2f6:	460d      	mov	r5, r1
 800b2f8:	ec45 4b10 	vmov	d0, r4, r5
 800b2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b300:	2d00      	cmp	r5, #0
 800b302:	dc10      	bgt.n	800b326 <__ieee754_sqrt+0x62>
 800b304:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b308:	4330      	orrs	r0, r6
 800b30a:	d0f5      	beq.n	800b2f8 <__ieee754_sqrt+0x34>
 800b30c:	b15d      	cbz	r5, 800b326 <__ieee754_sqrt+0x62>
 800b30e:	ee10 2a10 	vmov	r2, s0
 800b312:	462b      	mov	r3, r5
 800b314:	ee10 0a10 	vmov	r0, s0
 800b318:	f7f4 ffce 	bl	80002b8 <__aeabi_dsub>
 800b31c:	4602      	mov	r2, r0
 800b31e:	460b      	mov	r3, r1
 800b320:	f7f5 faac 	bl	800087c <__aeabi_ddiv>
 800b324:	e7e6      	b.n	800b2f4 <__ieee754_sqrt+0x30>
 800b326:	1512      	asrs	r2, r2, #20
 800b328:	d074      	beq.n	800b414 <__ieee754_sqrt+0x150>
 800b32a:	07d4      	lsls	r4, r2, #31
 800b32c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b330:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b334:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b338:	bf5e      	ittt	pl
 800b33a:	0fda      	lsrpl	r2, r3, #31
 800b33c:	005b      	lslpl	r3, r3, #1
 800b33e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b342:	2400      	movs	r4, #0
 800b344:	0fda      	lsrs	r2, r3, #31
 800b346:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b34a:	107f      	asrs	r7, r7, #1
 800b34c:	005b      	lsls	r3, r3, #1
 800b34e:	2516      	movs	r5, #22
 800b350:	4620      	mov	r0, r4
 800b352:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b356:	1886      	adds	r6, r0, r2
 800b358:	428e      	cmp	r6, r1
 800b35a:	bfde      	ittt	le
 800b35c:	1b89      	suble	r1, r1, r6
 800b35e:	18b0      	addle	r0, r6, r2
 800b360:	18a4      	addle	r4, r4, r2
 800b362:	0049      	lsls	r1, r1, #1
 800b364:	3d01      	subs	r5, #1
 800b366:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b36a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b36e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b372:	d1f0      	bne.n	800b356 <__ieee754_sqrt+0x92>
 800b374:	462a      	mov	r2, r5
 800b376:	f04f 0e20 	mov.w	lr, #32
 800b37a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b37e:	4281      	cmp	r1, r0
 800b380:	eb06 0c05 	add.w	ip, r6, r5
 800b384:	dc02      	bgt.n	800b38c <__ieee754_sqrt+0xc8>
 800b386:	d113      	bne.n	800b3b0 <__ieee754_sqrt+0xec>
 800b388:	459c      	cmp	ip, r3
 800b38a:	d811      	bhi.n	800b3b0 <__ieee754_sqrt+0xec>
 800b38c:	f1bc 0f00 	cmp.w	ip, #0
 800b390:	eb0c 0506 	add.w	r5, ip, r6
 800b394:	da43      	bge.n	800b41e <__ieee754_sqrt+0x15a>
 800b396:	2d00      	cmp	r5, #0
 800b398:	db41      	blt.n	800b41e <__ieee754_sqrt+0x15a>
 800b39a:	f100 0801 	add.w	r8, r0, #1
 800b39e:	1a09      	subs	r1, r1, r0
 800b3a0:	459c      	cmp	ip, r3
 800b3a2:	bf88      	it	hi
 800b3a4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b3a8:	eba3 030c 	sub.w	r3, r3, ip
 800b3ac:	4432      	add	r2, r6
 800b3ae:	4640      	mov	r0, r8
 800b3b0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b3b4:	f1be 0e01 	subs.w	lr, lr, #1
 800b3b8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b3bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b3c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b3c4:	d1db      	bne.n	800b37e <__ieee754_sqrt+0xba>
 800b3c6:	430b      	orrs	r3, r1
 800b3c8:	d006      	beq.n	800b3d8 <__ieee754_sqrt+0x114>
 800b3ca:	1c50      	adds	r0, r2, #1
 800b3cc:	bf13      	iteet	ne
 800b3ce:	3201      	addne	r2, #1
 800b3d0:	3401      	addeq	r4, #1
 800b3d2:	4672      	moveq	r2, lr
 800b3d4:	f022 0201 	bicne.w	r2, r2, #1
 800b3d8:	1063      	asrs	r3, r4, #1
 800b3da:	0852      	lsrs	r2, r2, #1
 800b3dc:	07e1      	lsls	r1, r4, #31
 800b3de:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b3e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b3e6:	bf48      	it	mi
 800b3e8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b3ec:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b3f0:	4614      	mov	r4, r2
 800b3f2:	e781      	b.n	800b2f8 <__ieee754_sqrt+0x34>
 800b3f4:	0ad9      	lsrs	r1, r3, #11
 800b3f6:	3815      	subs	r0, #21
 800b3f8:	055b      	lsls	r3, r3, #21
 800b3fa:	2900      	cmp	r1, #0
 800b3fc:	d0fa      	beq.n	800b3f4 <__ieee754_sqrt+0x130>
 800b3fe:	02cd      	lsls	r5, r1, #11
 800b400:	d50a      	bpl.n	800b418 <__ieee754_sqrt+0x154>
 800b402:	f1c2 0420 	rsb	r4, r2, #32
 800b406:	fa23 f404 	lsr.w	r4, r3, r4
 800b40a:	1e55      	subs	r5, r2, #1
 800b40c:	4093      	lsls	r3, r2
 800b40e:	4321      	orrs	r1, r4
 800b410:	1b42      	subs	r2, r0, r5
 800b412:	e78a      	b.n	800b32a <__ieee754_sqrt+0x66>
 800b414:	4610      	mov	r0, r2
 800b416:	e7f0      	b.n	800b3fa <__ieee754_sqrt+0x136>
 800b418:	0049      	lsls	r1, r1, #1
 800b41a:	3201      	adds	r2, #1
 800b41c:	e7ef      	b.n	800b3fe <__ieee754_sqrt+0x13a>
 800b41e:	4680      	mov	r8, r0
 800b420:	e7bd      	b.n	800b39e <__ieee754_sqrt+0xda>
 800b422:	bf00      	nop
 800b424:	7ff00000 	.word	0x7ff00000

0800b428 <with_errno>:
 800b428:	b570      	push	{r4, r5, r6, lr}
 800b42a:	4604      	mov	r4, r0
 800b42c:	460d      	mov	r5, r1
 800b42e:	4616      	mov	r6, r2
 800b430:	f7fe f8dc 	bl	80095ec <__errno>
 800b434:	4629      	mov	r1, r5
 800b436:	6006      	str	r6, [r0, #0]
 800b438:	4620      	mov	r0, r4
 800b43a:	bd70      	pop	{r4, r5, r6, pc}

0800b43c <xflow>:
 800b43c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b43e:	4614      	mov	r4, r2
 800b440:	461d      	mov	r5, r3
 800b442:	b108      	cbz	r0, 800b448 <xflow+0xc>
 800b444:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b448:	e9cd 2300 	strd	r2, r3, [sp]
 800b44c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b450:	4620      	mov	r0, r4
 800b452:	4629      	mov	r1, r5
 800b454:	f7f5 f8e8 	bl	8000628 <__aeabi_dmul>
 800b458:	2222      	movs	r2, #34	; 0x22
 800b45a:	b003      	add	sp, #12
 800b45c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b460:	f7ff bfe2 	b.w	800b428 <with_errno>

0800b464 <__math_uflow>:
 800b464:	b508      	push	{r3, lr}
 800b466:	2200      	movs	r2, #0
 800b468:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b46c:	f7ff ffe6 	bl	800b43c <xflow>
 800b470:	ec41 0b10 	vmov	d0, r0, r1
 800b474:	bd08      	pop	{r3, pc}

0800b476 <__math_oflow>:
 800b476:	b508      	push	{r3, lr}
 800b478:	2200      	movs	r2, #0
 800b47a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b47e:	f7ff ffdd 	bl	800b43c <xflow>
 800b482:	ec41 0b10 	vmov	d0, r0, r1
 800b486:	bd08      	pop	{r3, pc}

0800b488 <fabs>:
 800b488:	ec51 0b10 	vmov	r0, r1, d0
 800b48c:	ee10 2a10 	vmov	r2, s0
 800b490:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b494:	ec43 2b10 	vmov	d0, r2, r3
 800b498:	4770      	bx	lr

0800b49a <finite>:
 800b49a:	b082      	sub	sp, #8
 800b49c:	ed8d 0b00 	vstr	d0, [sp]
 800b4a0:	9801      	ldr	r0, [sp, #4]
 800b4a2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b4a6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b4aa:	0fc0      	lsrs	r0, r0, #31
 800b4ac:	b002      	add	sp, #8
 800b4ae:	4770      	bx	lr

0800b4b0 <scalbn>:
 800b4b0:	b570      	push	{r4, r5, r6, lr}
 800b4b2:	ec55 4b10 	vmov	r4, r5, d0
 800b4b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b4ba:	4606      	mov	r6, r0
 800b4bc:	462b      	mov	r3, r5
 800b4be:	b99a      	cbnz	r2, 800b4e8 <scalbn+0x38>
 800b4c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b4c4:	4323      	orrs	r3, r4
 800b4c6:	d036      	beq.n	800b536 <scalbn+0x86>
 800b4c8:	4b39      	ldr	r3, [pc, #228]	; (800b5b0 <scalbn+0x100>)
 800b4ca:	4629      	mov	r1, r5
 800b4cc:	ee10 0a10 	vmov	r0, s0
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f7f5 f8a9 	bl	8000628 <__aeabi_dmul>
 800b4d6:	4b37      	ldr	r3, [pc, #220]	; (800b5b4 <scalbn+0x104>)
 800b4d8:	429e      	cmp	r6, r3
 800b4da:	4604      	mov	r4, r0
 800b4dc:	460d      	mov	r5, r1
 800b4de:	da10      	bge.n	800b502 <scalbn+0x52>
 800b4e0:	a32b      	add	r3, pc, #172	; (adr r3, 800b590 <scalbn+0xe0>)
 800b4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e6:	e03a      	b.n	800b55e <scalbn+0xae>
 800b4e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b4ec:	428a      	cmp	r2, r1
 800b4ee:	d10c      	bne.n	800b50a <scalbn+0x5a>
 800b4f0:	ee10 2a10 	vmov	r2, s0
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	4629      	mov	r1, r5
 800b4f8:	f7f4 fee0 	bl	80002bc <__adddf3>
 800b4fc:	4604      	mov	r4, r0
 800b4fe:	460d      	mov	r5, r1
 800b500:	e019      	b.n	800b536 <scalbn+0x86>
 800b502:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b506:	460b      	mov	r3, r1
 800b508:	3a36      	subs	r2, #54	; 0x36
 800b50a:	4432      	add	r2, r6
 800b50c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b510:	428a      	cmp	r2, r1
 800b512:	dd08      	ble.n	800b526 <scalbn+0x76>
 800b514:	2d00      	cmp	r5, #0
 800b516:	a120      	add	r1, pc, #128	; (adr r1, 800b598 <scalbn+0xe8>)
 800b518:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b51c:	da1c      	bge.n	800b558 <scalbn+0xa8>
 800b51e:	a120      	add	r1, pc, #128	; (adr r1, 800b5a0 <scalbn+0xf0>)
 800b520:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b524:	e018      	b.n	800b558 <scalbn+0xa8>
 800b526:	2a00      	cmp	r2, #0
 800b528:	dd08      	ble.n	800b53c <scalbn+0x8c>
 800b52a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b52e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b532:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b536:	ec45 4b10 	vmov	d0, r4, r5
 800b53a:	bd70      	pop	{r4, r5, r6, pc}
 800b53c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b540:	da19      	bge.n	800b576 <scalbn+0xc6>
 800b542:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b546:	429e      	cmp	r6, r3
 800b548:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b54c:	dd0a      	ble.n	800b564 <scalbn+0xb4>
 800b54e:	a112      	add	r1, pc, #72	; (adr r1, 800b598 <scalbn+0xe8>)
 800b550:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d1e2      	bne.n	800b51e <scalbn+0x6e>
 800b558:	a30f      	add	r3, pc, #60	; (adr r3, 800b598 <scalbn+0xe8>)
 800b55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55e:	f7f5 f863 	bl	8000628 <__aeabi_dmul>
 800b562:	e7cb      	b.n	800b4fc <scalbn+0x4c>
 800b564:	a10a      	add	r1, pc, #40	; (adr r1, 800b590 <scalbn+0xe0>)
 800b566:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d0b8      	beq.n	800b4e0 <scalbn+0x30>
 800b56e:	a10e      	add	r1, pc, #56	; (adr r1, 800b5a8 <scalbn+0xf8>)
 800b570:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b574:	e7b4      	b.n	800b4e0 <scalbn+0x30>
 800b576:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b57a:	3236      	adds	r2, #54	; 0x36
 800b57c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b580:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b584:	4620      	mov	r0, r4
 800b586:	4b0c      	ldr	r3, [pc, #48]	; (800b5b8 <scalbn+0x108>)
 800b588:	2200      	movs	r2, #0
 800b58a:	e7e8      	b.n	800b55e <scalbn+0xae>
 800b58c:	f3af 8000 	nop.w
 800b590:	c2f8f359 	.word	0xc2f8f359
 800b594:	01a56e1f 	.word	0x01a56e1f
 800b598:	8800759c 	.word	0x8800759c
 800b59c:	7e37e43c 	.word	0x7e37e43c
 800b5a0:	8800759c 	.word	0x8800759c
 800b5a4:	fe37e43c 	.word	0xfe37e43c
 800b5a8:	c2f8f359 	.word	0xc2f8f359
 800b5ac:	81a56e1f 	.word	0x81a56e1f
 800b5b0:	43500000 	.word	0x43500000
 800b5b4:	ffff3cb0 	.word	0xffff3cb0
 800b5b8:	3c900000 	.word	0x3c900000

0800b5bc <_init>:
 800b5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5be:	bf00      	nop
 800b5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5c2:	bc08      	pop	{r3}
 800b5c4:	469e      	mov	lr, r3
 800b5c6:	4770      	bx	lr

0800b5c8 <_fini>:
 800b5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ca:	bf00      	nop
 800b5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ce:	bc08      	pop	{r3}
 800b5d0:	469e      	mov	lr, r3
 800b5d2:	4770      	bx	lr
